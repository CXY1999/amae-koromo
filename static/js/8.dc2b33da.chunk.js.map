{"version":3,"sources":["components/playerDetails/charts/recentRank.tsx"],"names":["createDot","props","active","r","stroke","RANK_COLORS","payload","rank","onClick","window","open","GameRecord","getRecordLink","game","playerId","fill","createActiveDot","RankChartTooltip","length","realPayload","className","formatFullStartTime","GameMode","modeId","RANK_LABELS","players","map","x","key","accountId","toString","player","isActive","hideDetailLink","RecentRankChart","dataAdapter","aspect","numGames","dataPoints","useMemo","result","totalGames","getCount","i","Math","min","getItem","getRankIndexByPlayer","unshift","pos","width","height","data","margin","top","right","bottom","left","isAnimationActive","dataKey","type","strokeWidth","dot","activeDot","cursor","content"],"mappings":"kHAAA,oGAwBMA,EAAY,SAACC,EAAgCC,GACjD,OACE,kBAAC,IAAD,iBACMD,EADN,CAEEE,EAAG,EACHC,OAAQC,cAAYJ,EAAMK,QAAQC,MAClCC,QAAS,kBAAMC,OAAOC,KAAKC,aAAWC,cAAcX,EAAMK,QAAQO,KAAMZ,EAAMK,QAAQQ,UAAW,YAC5FZ,EAAS,CAAEa,KAAMV,cAAYJ,EAAMK,QAAQC,MAAOJ,EAAG,IAAO,MAKjEa,EAAkB,SAACf,GAAD,OAAgBD,EAAUC,GAAO,IAEnDgB,EAAmB,WAA6C,IAAD,yDAAP,GAAlCf,EAAyC,EAAzCA,OAAQI,EAAiC,EAAjCA,QAClC,IAAKJ,IAAWI,IAAYA,EAAQY,OAClC,OAAO,KAET,IAAMC,EAAcb,EAAQ,GAAGA,QAC/B,OACE,yBAAKc,UAAU,wBACb,4BACGT,aAAWU,oBAAoBF,EAAYN,MAD9C,IACsDS,WAASH,EAAYN,KAAKU,QAAS,IACtFC,cAAYL,EAAYZ,OAE1BY,EAAYN,KAAKY,QAAQC,KAAI,SAAAC,GAAC,OAC7B,uBAAGC,IAAKD,EAAEE,UAAUC,YAClB,kBAAC,IAAD,CAAQC,OAAQJ,EAAGd,KAAMM,EAAYN,KAAMmB,SAAUb,EAAYL,WAAaa,EAAEE,UAAWI,gBAAc,UAOpG,SAASC,EAAT,GAUX,IATFC,EASC,EATDA,YACArB,EAQC,EARDA,SAQC,IAPDsB,cAOC,MAPQ,EAOR,MANDC,gBAMC,MANU,GAMV,EACKC,EAAaC,mBAAQ,WACzB,IAAMC,EAAS,GACTC,EAAaN,EAAYO,WAC/B,IAAKD,EACH,OAAOD,EAET,IAAK,IAAIG,EAAI,EAAGA,EAAIC,KAAKC,IAAIJ,EAAYJ,GAAWM,IAAK,CACvD,IAAM9B,EAAOsB,EAAYW,QAAQH,GACjC,KAAM,SAAU9B,GACd,MAEF,IAAMN,EAAOI,aAAWoC,qBAAqBlC,EAAMC,GACnD0B,EAAOQ,QAAQ,CAAEC,IAAK,EAAI1C,EAAMA,OAAMM,OAAMC,aAE9C,OAAO0B,IACN,CAACL,EAAaE,EAAUvB,IAC3B,OAAKwB,EAAWpB,OAId,kBAAC,IAAD,CAAqBgC,MAAM,OAAOd,OAAQA,EAAQe,OAAO,QACvD,kBAAC,IAAD,CAAWC,KAAMd,EAAYe,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAC3E,kBAAC,IAAD,CACEC,mBAAmB,EACnBC,QAAQ,MACRC,KAAK,SACLxD,OAAO,UACPyD,YAAa,EACbC,IAAK9D,EACL+D,UAAW/C,IAEb,kBAAC,IAAD,CAASgD,QAAQ,EAAOC,QAAS,kBAAChD,EAAD,UAd9B,kBAAC,IAAD","file":"static/js/8.dc2b33da.chunk.js","sourcesContent":["import React from \"react\";\nimport { ResponsiveContainer, LineChart, Line, Dot, Tooltip, TooltipProps } from \"recharts\";\n\nimport { IDataAdapter } from \"../../gameRecords/dataAdapterProvider\";\nimport { GameRecord, RANK_LABELS, RANK_COLORS, GameMode } from \"../../../data/types\";\nimport { useMemo } from \"react\";\nimport { Player } from \"../../gameRecords/player\";\nimport Loading from \"../../misc/loading\";\n\ndeclare module \"recharts\" {\n  interface DotProps {\n    strokeWidth?: number;\n    stroke?: string;\n    fill?: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload?: any;\n  }\n  interface LabelListProps {\n    fill?: string;\n  }\n}\n\ntype DotPayload = { pos: number; rank: number; game: GameRecord; playerId: number };\n\nconst createDot = (props: { payload: DotPayload }, active?: boolean) => {\n  return (\n    <Dot\n      {...props}\n      r={5}\n      stroke={RANK_COLORS[props.payload.rank]}\n      onClick={() => window.open(GameRecord.getRecordLink(props.payload.game, props.payload.playerId), \"_blank\")}\n      {...(active ? { fill: RANK_COLORS[props.payload.rank], r: 10 } : {})}\n    />\n  );\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst createActiveDot = (props: any) => createDot(props, true);\n\nconst RankChartTooltip = ({ active, payload }: TooltipProps = {}) => {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n  const realPayload = payload[0].payload as DotPayload;\n  return (\n    <div className=\"player-chart-tooltip\">\n      <h5>\n        {GameRecord.formatFullStartTime(realPayload.game)} {GameMode[realPayload.game.modeId]}{\" \"}\n        {RANK_LABELS[realPayload.rank]}\n      </h5>\n      {realPayload.game.players.map(x => (\n        <p key={x.accountId.toString()}>\n          <Player player={x} game={realPayload.game} isActive={realPayload.playerId === x.accountId} hideDetailLink />\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default function RecentRankChart({\n  dataAdapter,\n  playerId,\n  aspect = 2,\n  numGames = 20\n}: {\n  dataAdapter: IDataAdapter;\n  playerId: number;\n  aspect?: number;\n  numGames?: number;\n}) {\n  const dataPoints = useMemo(() => {\n    const result = [] as DotPayload[];\n    const totalGames = dataAdapter.getCount();\n    if (!totalGames) {\n      return result;\n    }\n    for (let i = 0; i < Math.min(totalGames, numGames); i++) {\n      const game = dataAdapter.getItem(i);\n      if (!(\"uuid\" in game)) {\n        break;\n      }\n      const rank = GameRecord.getRankIndexByPlayer(game, playerId);\n      result.unshift({ pos: 3 - rank, rank, game, playerId });\n    }\n    return result;\n  }, [dataAdapter, numGames, playerId]);\n  if (!dataPoints.length) {\n    return <Loading />;\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" aspect={aspect} height=\"auto\">\n      <LineChart data={dataPoints} margin={{ top: 15, right: 15, bottom: 15, left: 15 }}>\n        <Line\n          isAnimationActive={false}\n          dataKey=\"pos\"\n          type=\"linear\"\n          stroke=\"#b5c2ce\"\n          strokeWidth={3}\n          dot={createDot}\n          activeDot={createActiveDot}\n        />\n        <Tooltip cursor={false} content={<RankChartTooltip />} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n"],"sourceRoot":""}