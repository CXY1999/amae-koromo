{"version":3,"sources":["../node_modules/clsx/dist/clsx.m.js","../node_modules/react-lifecycles-compat/react-lifecycles-compat.es.js","../node_modules/babel-runtime/core-js/object/keys.js","../node_modules/core-js/library/fn/object/keys.js","../node_modules/core-js/library/modules/es6.object.keys.js","../node_modules/babel-runtime/helpers/objectWithoutProperties.js","../node_modules/react-virtualized/dist/es/Table/defaultHeaderRowRenderer.js","../node_modules/react-virtualized/dist/es/Table/SortDirection.js","../node_modules/react-virtualized/dist/es/Table/SortIndicator.js","../node_modules/react-virtualized/dist/es/Table/defaultHeaderRenderer.js","../node_modules/react-virtualized/dist/es/Table/defaultRowRenderer.js","../node_modules/react-virtualized/dist/es/Table/Column.js","../node_modules/react-virtualized/dist/es/Table/defaultCellDataGetter.js","../node_modules/react-virtualized/dist/es/Table/defaultCellRenderer.js","../node_modules/react-virtualized/dist/es/Grid/utils/calculateSizeAndPositionDataAndUpdateScrollOffset.js","../node_modules/react-virtualized/dist/es/Grid/utils/CellSizeAndPositionManager.js","../node_modules/react-virtualized/dist/es/Grid/utils/maxElementSize.js","../node_modules/react-virtualized/dist/es/Grid/utils/ScalingCellSizeAndPositionManager.js","../node_modules/react-virtualized/dist/es/utils/createCallbackMemoizer.js","../node_modules/react-virtualized/dist/es/Grid/defaultOverscanIndicesGetter.js","../node_modules/react-virtualized/dist/es/Grid/utils/updateScrollIndexHelper.js","../node_modules/react-virtualized/node_modules/dom-helpers/esm/canUseDOM.js","../node_modules/react-virtualized/node_modules/dom-helpers/esm/scrollbarSize.js","../node_modules/react-virtualized/dist/es/Grid/Grid.js","../node_modules/react-virtualized/dist/es/Grid/defaultCellRangeRenderer.js","../node_modules/react-virtualized/dist/es/Grid/accessibilityOverscanIndicesGetter.js","../node_modules/react-virtualized/dist/es/Table/Table.js","../node_modules/react-virtualized/dist/es/Table/index.js","../node_modules/react-virtualized/dist/es/AutoSizer/AutoSizer.js","../node_modules/react-virtualized/dist/es/AutoSizer/index.js"],"names":["toVal","mix","k","y","str","push","length","call","x","i","arguments","componentWillMount","state","this","constructor","getDerivedStateFromProps","props","undefined","setState","componentWillReceiveProps","nextProps","prevState","bind","componentWillUpdate","nextState","prevProps","__reactInternalSnapshotFlag","__reactInternalSnapshot","getSnapshotBeforeUpdate","polyfill","Component","prototype","isReactComponent","Error","foundWillMountName","foundWillReceivePropsName","foundWillUpdateName","UNSAFE_componentWillMount","UNSAFE_componentWillReceiveProps","UNSAFE_componentWillUpdate","componentName","displayName","name","newApiName","componentDidUpdate","maybeSnapshot","snapshot","__suppressDeprecationWarning","module","exports","__esModule","Object","keys","toObject","$keys","it","default","obj","target","indexOf","hasOwnProperty","defaultHeaderRowRenderer","_ref","className","columns","style","role","propTypes","ASC","DESC","SortIndicator","sortDirection","classNames","width","height","viewBox","d","fill","defaultHeaderRenderer","dataKey","label","sortBy","showSortIndicator","children","key","title","defaultRowRenderer","index","onRowClick","onRowDoubleClick","onRowMouseOut","onRowMouseOver","onRowRightClick","rowData","a11yProps","tabIndex","onClick","event","onDoubleClick","onMouseOut","onMouseOver","onContextMenu","_React$Component","Column","__proto__","apply","defaultProps","cellDataGetter","get","cellRenderer","cellData","String","defaultSortDirection","flexGrow","flexShrink","headerRenderer","calculateSizeAndPositionDataAndUpdateScrollOffset","cellCount","cellSize","computeMetadataCallback","computeMetadataCallbackProps","nextCellsCount","nextCellSize","nextScrollToIndex","scrollToIndex","updateScrollOffsetForScrollToIndex","CellSizeAndPositionManager","cellSizeGetter","estimatedCellSize","_cellSizeAndPositionData","_lastMeasuredIndex","_lastBatchedIndex","_cellSizeGetter","_cellCount","_estimatedCellSize","value","_ref2","lastMeasuredCellSizeAndPosition","getSizeAndPositionOfLastMeasuredCell","_offset","offset","size","_size","isNaN","_ref3","_ref3$align","align","containerSize","currentOffset","targetIndex","datum","getSizeAndPositionOfCell","maxOffset","minOffset","idealOffset","Math","max","min","totalSize","getTotalSize","params","start","_findNearestCell","stop","high","low","middle","floor","_currentOffset","interval","_binarySearch","lastMeasuredIndex","_exponentialSearch","getMaxElementSize","window","chrome","ScalingCellSizeAndPositionManager","_ref$maxScrollSize","maxScrollSize","_cellSizeAndPositionManager","_maxScrollSize","configure","getCellCount","getEstimatedCellSize","getLastMeasuredIndex","safeTotalSize","offsetPercentage","_getOffsetPercentage","round","_safeOffsetToOffset","getUpdatedOffsetForIndex","_offsetToSafeOffset","_ref4","getVisibleCellRange","resetCell","_ref5","_ref6","_ref7","createCallbackMemoizer","requireAllKeys","cachedIndices","callback","indices","allInitialized","every","Array","isArray","indexChanged","some","cachedValue","join","SCROLL_DIRECTION_FORWARD","updateScrollIndexHelper","cellSizeAndPositionManager","previousCellsCount","previousCellSize","previousScrollToAlignment","previousScrollToIndex","previousSize","scrollOffset","scrollToAlignment","sizeJustIncreasedFromZero","updateScrollIndexCallback","hasScrollToIndex","SCROLL_POSITION_CHANGE_REASONS","_React$PureComponent","Grid","_this","_onGridRenderedMemoizer","_onScrollMemoizer","_deferredInvalidateColumnIndex","_deferredInvalidateRowIndex","_recomputeScrollLeftFlag","_recomputeScrollTopFlag","_horizontalScrollBarSize","_verticalScrollBarSize","_scrollbarPresenceChanged","_renderedColumnStartIndex","_renderedColumnStopIndex","_renderedRowStartIndex","_renderedRowStopIndex","_styleCache","_cellCache","_debounceScrollEndedCallback","_disablePointerEventsTimeoutId","isScrolling","needToResetStyleCache","_invokeOnGridRenderedHelper","onSectionRendered","columnOverscanStartIndex","_columnStartIndex","columnOverscanStopIndex","_columnStopIndex","columnStartIndex","columnStopIndex","rowOverscanStartIndex","_rowStartIndex","rowOverscanStopIndex","_rowStopIndex","rowStartIndex","rowStopIndex","_setScrollingContainerRef","ref","_scrollingContainer","_onScroll","handleScrollEvent","columnSizeAndPositionManager","columnCount","_wrapSizeGetter","columnWidth","_getEstimatedColumnSize","rowSizeAndPositionManager","rowCount","rowHeight","_getEstimatedRowSize","instanceProps","prevColumnWidth","prevRowHeight","prevColumnCount","prevRowCount","prevIsScrolling","prevScrollToColumn","scrollToColumn","prevScrollToRow","scrollToRow","scrollbarSize","scrollbarSizeMeasured","scrollDirectionHorizontal","scrollDirectionVertical","scrollLeft","scrollTop","scrollPositionChangeReason","_initialScrollTop","_getCalculatedScrollTop","_initialScrollLeft","_getCalculatedScrollLeft","_ref$alignment","alignment","_ref$columnIndex","columnIndex","_ref$rowIndex","rowIndex","offsetProps","_ref2$scrollLeft","scrollLeftParam","_ref2$scrollTop","scrollTopParam","_debounceScrollEnded","_props","autoHeight","autoWidth","totalRowsHeight","totalColumnsWidth","newState","_invokeOnScrollMemoizer","_props2","_ref4$columnIndex","_ref4$rowIndex","_props3","forceUpdate","_updateScrollLeftForScrollToColumn","_updateScrollTopForScrollToRow","_props4","getScrollbarSize","_handleInvalidatedGridSize","stateUpdate","_getScrollToPositionStateUpdate","sizeIsBiggerThanZero","_maybeCallOnScrollbarPresenceChange","_this2","_props5","_state","columnOrRowCountJustIncreasedFromZero","_props6","autoContainerWidth","containerProps","containerRole","containerStyle","id","noContentRenderer","_state2","_isScrolling","gridStyle","boxSizing","direction","position","WebkitOverflowScrolling","willChange","_resetStyleCache","_calculateChildrenToRender","verticalScrollBarSize","horizontalScrollBarSize","overflowX","overflowY","childrenToDisplay","_childrenToDisplay","showNoContentRenderer","onScroll","maxWidth","maxHeight","overflow","pointerEvents","cellRangeRenderer","deferredMeasurementCache","overscanColumnCount","overscanIndicesGetter","overscanRowCount","isScrollingOptOut","visibleColumnIndices","visibleRowIndices","horizontalOffsetAdjustment","getOffsetAdjustment","verticalOffsetAdjustment","overscanColumnIndices","overscanCellsCount","scrollDirection","startIndex","stopIndex","overscanRowIndices","overscanStartIndex","overscanStopIndex","hasFixedHeight","has","hasFixedWidth","cellCache","parent","styleCache","scrollingResetTimeInterval","requestAnimationTimeout","recomputeGridSize","_this3","_props7","clientHeight","clientWidth","scrollHeight","scrollWidth","Boolean","_onScrollbarPresenceChange","onScrollbarPresenceChange","horizontal","vertical","_ref8","_getScrollLeftForScrollToColumnStateUpdate","_getScrollTopForScrollToRowStateUpdate","maybeStateA","maybeStateB","estimatedColumnSize","estimatedRowSize","_ref9","finalColumn","scrollBarSize","calculatedScrollLeft","finalRow","calculatedScrollTop","renderedCells","areOffsetsAdjusted","canCacheStyle","rowDatum","columnDatum","isVisible","left","top","cellRendererParams","renderedCell","recalc","canUseDOM","scrollDiv","document","createElement","body","appendChild","offsetWidth","removeChild","Table","scrollbarWidth","_createColumn","_createRow","_onSectionRendered","_setRef","getOffsetForCell","invalidateCellSizeAfterRender","measureAllCells","_ref3$columnIndex","_ref3$rowIndex","scrollToPosition","scrollToCell","_Grid","_setScrollbarWidth","disableHeader","gridClassName","headerHeight","headerRowRenderer","noRowsRenderer","rowClassName","rowStyle","availableRowsHeight","rowClass","rowStyleObject","_cachedColumnStyles","toArray","forEach","column","flexStyles","_getFlexStyleForColumn","_getHeaderColumns","paddingRight","onColumnClick","_column$props","columnData","headerClassName","headerStyle","onHeaderClick","sort","_column$props2","disableSort","sortEnabled","ReactVirtualized__Table__sortableHeaderColumn","renderedHeader","headerOnClick","headerOnKeyDown","headerTabIndex","headerAriaSort","headerAriaLabel","newSortDirection","onKeyDown","rowGetter","rowRenderer","map","flattenedStyle","_getRowHeight","customStyle","flexValue","flex","msFlex","WebkitFlex","minWidth","_this4","_createHeader","onRowsRendered","getScrollbarWidth","AutoSizer","_temp","_ret","_len","args","_key","concat","defaultHeight","defaultWidth","_onResize","_this$props","disableHeight","disableWidth","onResize","_parentNode","_height","offsetHeight","_width","_style","_window","getComputedStyle","paddingLeft","parseInt","paddingTop","paddingBottom","newHeight","newWidth","autoSizer","_autoSizer","nonce","parentNode","ownerDocument","defaultView","HTMLElement","_detectElementResize","addResizeListener","removeResizeListener","outerStyle","childParams"],"mappings":"kHAAA,SAASA,EAAMC,GACb,IAAIC,EACAC,EACAC,EAAM,GAEV,GAAIH,EACF,GAAmB,kBAARA,EACT,GAAMA,EAAII,KACR,IAAKH,EAAI,EAAGA,EAAID,EAAIK,OAAQJ,IACtBD,EAAIC,KAAOC,EAAIH,EAAMC,EAAIC,OAC3BE,IAAQA,GAAO,KACfA,GAAOD,QAIX,IAAKD,KAAKD,EACJA,EAAIC,KAAOC,EAAIH,EAAME,MACvBE,IAAQA,GAAO,KACfA,GAAOD,OAIW,mBAARF,GAAsBA,EAAIM,OAC1CH,IAAQA,GAAO,KACfA,GAAOH,GAIX,OAAOG,EAGM,eAKb,IAJA,IACII,EADAC,EAAI,EAEJL,EAAM,GAEHK,EAAIC,UAAUJ,SACfE,EAAIR,EAAMU,UAAUD,SACtBL,IAAQA,GAAO,KACfA,GAAOI,GAIX,OAAOJ,I,iCCrCT,SAASO,IAEP,IAAIC,EAAQC,KAAKC,YAAYC,yBAAyBF,KAAKG,MAAOH,KAAKD,OAEzD,OAAVA,QAA4BK,IAAVL,GACpBC,KAAKK,SAASN,GAIlB,SAASO,EAA0BC,GASjCP,KAAKK,SANL,SAAiBG,GACf,IAAIT,EAAQC,KAAKC,YAAYC,yBAAyBK,EAAWC,GACjE,OAAiB,OAAVT,QAA4BK,IAAVL,EAAsBA,EAAQ,MAInCU,KAAKT,OAG7B,SAASU,EAAoBH,EAAWI,GACtC,IACE,IAAIC,EAAYZ,KAAKG,MACjBK,EAAYR,KAAKD,MACrBC,KAAKG,MAAQI,EACbP,KAAKD,MAAQY,EACbX,KAAKa,6BAA8B,EACnCb,KAAKc,wBAA0Bd,KAAKe,wBAAwBH,EAAWJ,GACvE,QACAR,KAAKG,MAAQS,EACbZ,KAAKD,MAAQS,GAUjB,SAASQ,EAASC,GAChB,IAAIC,EAAYD,EAAUC,UAE1B,IAAKA,IAAcA,EAAUC,iBAC3B,MAAM,IAAIC,MAAM,sCAGlB,GAAkD,oBAAvCH,EAAUf,0BAAwF,oBAAtCgB,EAAUH,wBAC/E,OAAOE,EAMT,IAAII,EAAqB,KACrBC,EAA4B,KAC5BC,EAAsB,KAoB1B,GAlB4C,oBAAjCL,EAAUpB,mBACnBuB,EAAqB,qBACmC,oBAAxCH,EAAUM,4BAC1BH,EAAqB,6BAG4B,oBAAxCH,EAAUZ,0BACnBgB,EAA4B,4BACmC,oBAA/CJ,EAAUO,mCAC1BH,EAA4B,oCAGe,oBAAlCJ,EAAUR,oBACnBa,EAAsB,sBACmC,oBAAzCL,EAAUQ,6BAC1BH,EAAsB,8BAGG,OAAvBF,GAA6D,OAA9BC,GAA8D,OAAxBC,EAA8B,CACrG,IAAII,EAAgBV,EAAUW,aAAeX,EAAUY,KACnDC,EAA2D,oBAAvCb,EAAUf,yBAA0C,6BAA+B,4BAC3G,MAAMkB,MAAM,2FAA6FO,EAAgB,SAAWG,EAAa,uDAAgF,OAAvBT,EAA8B,OAASA,EAAqB,KAAqC,OAA9BC,EAAqC,OAASA,EAA4B,KAA+B,OAAxBC,EAA+B,OAASA,EAAsB,IAAM,wIAcpa,GARkD,oBAAvCN,EAAUf,2BACnBgB,EAAUpB,mBAAqBA,EAC/BoB,EAAUZ,0BAA4BA,GAMS,oBAAtCY,EAAUH,wBAAwC,CAC3D,GAA4C,oBAAjCG,EAAUa,mBACnB,MAAM,IAAIX,MAAM,qHAGlBF,EAAUR,oBAAsBA,EAChC,IAAIqB,EAAqBb,EAAUa,mBAEnCb,EAAUa,mBAAqB,SAAoCnB,EAAWJ,EAAWwB,GASvF,IAAIC,EAAWjC,KAAKa,4BAA8Bb,KAAKc,wBAA0BkB,EACjFD,EAAmBrC,KAAKM,KAAMY,EAAWJ,EAAWyB,IAIxD,OAAOhB,EA1HT,gDA2CAnB,EAAmBoC,8BAA+B,EAClD5B,EAA0B4B,8BAA+B,EACzDxB,EAAoBwB,8BAA+B,G,oBC7CnDC,EAAOC,QAAU,CACf,QAAW,EAAQ,KACnBC,YAAY,I,oBCFd,EAAQ,KAERF,EAAOC,QAAU,EAAQ,GAAuBE,OAAOC,M,oBCDvD,IAAIC,EAAW,EAAQ,IAEnBC,EAAQ,EAAQ,IAEpB,EAAQ,IAAR,CAAyB,QAAQ,WAC/B,OAAO,SAAcC,GACnB,OAAOD,EAAMD,EAASE,S,iCCL1BN,EAAQC,YAAa,EAErBD,EAAQO,QAAU,SAAUC,EAAKL,GAC/B,IAAIM,EAAS,GAEb,IAAK,IAAIjD,KAAKgD,EACRL,EAAKO,QAAQlD,IAAM,GAClB0C,OAAOpB,UAAU6B,eAAerD,KAAKkD,EAAKhD,KAC/CiD,EAAOjD,GAAKgD,EAAIhD,IAGlB,OAAOiD,I,wECZM,SAASG,EAAyBC,GAC/C,IAAIC,EAAYD,EAAKC,UACjBC,EAAUF,EAAKE,QACfC,EAAQH,EAAKG,MACjB,OAAO,gBAAoB,MAAO,CAChCF,UAAWA,EACXG,KAAM,MACND,MAAOA,GACND,GAELH,EAAyBM,UAAoD,K,aCE9D,EAbK,CAKlBC,IAAK,MAMLC,KAAM,QCHO,SAASC,EAAcR,GACpC,IAAIS,EAAgBT,EAAKS,cACrBC,EAAa,YAAK,8CAA+C,CACnE,mDAAoDD,IAAkB,EAAcH,IACpF,oDAAqDG,IAAkB,EAAcF,OAEvF,OAAO,gBAAoB,MAAO,CAChCN,UAAWS,EACXC,MAAO,GACPC,OAAQ,GACRC,QAAS,aACRJ,IAAkB,EAAcH,IAAM,gBAAoB,OAAQ,CACnEQ,EAAG,mBACA,gBAAoB,OAAQ,CAC/BA,EAAG,mBACD,gBAAoB,OAAQ,CAC9BA,EAAG,gBACHC,KAAM,UCnBK,SAASC,EAAsBhB,GAC5C,IAAIiB,EAAUjB,EAAKiB,QACfC,EAAQlB,EAAKkB,MACbC,EAASnB,EAAKmB,OACdV,EAAgBT,EAAKS,cACrBW,EAAoBD,IAAWF,EAC/BI,EAAW,CAAC,gBAAoB,OAAQ,CAC1CpB,UAAW,+CACXqB,IAAK,QACLC,MAAwB,kBAAVL,EAAqBA,EAAQ,MAC1CA,IASH,OAPIE,GACFC,EAAS9E,KAAK,gBAAoBiE,EAAe,CAC/Cc,IAAK,gBACLb,cAAeA,KAIZY,EDGTb,EAAcH,UAEV,GCHJW,EAAsBX,UAAoD,K,qBCrB3D,SAASmB,EAAmBxB,GACzC,IAAIC,EAAYD,EAAKC,UACjBC,EAAUF,EAAKE,QACfuB,EAAQzB,EAAKyB,MACbH,EAAMtB,EAAKsB,IACXI,EAAa1B,EAAK0B,WAClBC,EAAmB3B,EAAK2B,iBACxBC,EAAgB5B,EAAK4B,cACrBC,EAAiB7B,EAAK6B,eACtBC,EAAkB9B,EAAK8B,gBACvBC,EAAU/B,EAAK+B,QACf5B,EAAQH,EAAKG,MACb6B,EAAY,CACd,gBAAiBP,EAAQ,GA0D3B,OAvDIC,GAAcC,GAAoBC,GAAiBC,GAAkBC,KACvEE,EAAU,cAAgB,MAC1BA,EAAUC,SAAW,EAEjBP,IACFM,EAAUE,QAAU,SAAUC,GAC5B,OAAOT,EAAW,CAChBS,MAAOA,EACPV,MAAOA,EACPM,QAASA,MAKXJ,IACFK,EAAUI,cAAgB,SAAUD,GAClC,OAAOR,EAAiB,CACtBQ,MAAOA,EACPV,MAAOA,EACPM,QAASA,MAKXH,IACFI,EAAUK,WAAa,SAAUF,GAC/B,OAAOP,EAAc,CACnBO,MAAOA,EACPV,MAAOA,EACPM,QAASA,MAKXF,IACFG,EAAUM,YAAc,SAAUH,GAChC,OAAON,EAAe,CACpBM,MAAOA,EACPV,MAAOA,EACPM,QAASA,MAKXD,IACFE,EAAUO,cAAgB,SAAUJ,GAClC,OAAOL,EAAgB,CACrBK,MAAOA,EACPV,MAAOA,EACPM,QAASA,OAMV,gBAAoB,MAAO,IAAS,GAAIC,EAAW,CACxD/B,UAAWA,EACXqB,IAAKA,EACLlB,KAAM,MACND,MAAOA,IACLD,GAENsB,EAAmBnB,UAAoD,K,wECtEnE,EAAS,SAAUmC,GAGrB,SAASC,IAGP,OAFA,IAAgB1F,KAAM0F,GAEf,IAA2B1F,MAAO0F,EAAOC,WAAa,IAAuBD,IAASE,MAAM5F,KAAMH,YAG3G,OARA,IAAU6F,EAAQD,GAQXC,EATI,CAUX,aAEF,EAAOG,aAAe,CACpBC,eCtBa,SAA+B7C,GAC5C,IAAIiB,EAAUjB,EAAKiB,QACfc,EAAU/B,EAAK+B,QAEnB,MAA2B,oBAAhBA,EAAQe,IACVf,EAAQe,IAAI7B,GAEZc,EAAQd,IDgBjB8B,aExBa,SAA6B/C,GAC1C,IAAIgD,EAAWhD,EAAKgD,SAEpB,OAAgB,MAAZA,EACK,GAEAC,OAAOD,IFmBhBE,qBAAsB,EAAc5C,IACpC6C,SAAU,EACVC,WAAY,EACZC,eAAgBrC,EAChBb,MAAO,IAEM,QACf,EAAOE,UAkEH,G,+CGtGW,SAASiD,EAAkDtD,GACxE,IAAIuD,EAAYvD,EAAKuD,UACjBC,EAAWxD,EAAKwD,SAChBC,EAA0BzD,EAAKyD,wBAC/BC,EAA+B1D,EAAK0D,6BACpCC,EAAiB3D,EAAK2D,eACtBC,EAAe5D,EAAK4D,aACpBC,EAAoB7D,EAAK6D,kBACzBC,EAAgB9D,EAAK8D,cACrBC,EAAqC/D,EAAK+D,mCAG1CR,IAAcI,IAAuC,kBAAbH,GAAiD,kBAAjBI,GAA8BJ,IAAaI,KACrHH,EAAwBC,GAGpBI,GAAiB,GAAKA,IAAkBD,GAC1CE,K,sBCgRS,EA3RkB,WAI/B,SAASC,EAA2BhE,GAClC,IAAIuD,EAAYvD,EAAKuD,UACjBU,EAAiBjE,EAAKiE,eACtBC,EAAoBlE,EAAKkE,kBAE7B,IAAgBnH,KAAMiH,GAEtBjH,KAAKoH,yBAA2B,GAChCpH,KAAKqH,oBAAsB,EAC3BrH,KAAKsH,mBAAqB,EAC1BtH,KAAKuH,gBAAkBL,EACvBlH,KAAKwH,WAAahB,EAClBxG,KAAKyH,mBAAqBN,EAwQ5B,OApQA,IAAaF,EAA4B,CAAC,CACxC1C,IAAK,qBACLmD,MAAO,WACL,OAAO,IAER,CACDnD,IAAK,YACLmD,MAAO,SAAmBC,GACxB,IAAInB,EAAYmB,EAAMnB,UAClBW,EAAoBQ,EAAMR,kBAC1BD,EAAiBS,EAAMT,eAC3BlH,KAAKwH,WAAahB,EAClBxG,KAAKyH,mBAAqBN,EAC1BnH,KAAKuH,gBAAkBL,IAExB,CACD3C,IAAK,eACLmD,MAAO,WACL,OAAO1H,KAAKwH,aAEb,CACDjD,IAAK,uBACLmD,MAAO,WACL,OAAO1H,KAAKyH,qBAEb,CACDlD,IAAK,uBACLmD,MAAO,WACL,OAAO1H,KAAKqH,qBAEb,CACD9C,IAAK,sBACLmD,MAAO,WACL,OAAO,IAOR,CACDnD,IAAK,2BACLmD,MAAO,SAAkChD,GACvC,GAAIA,EAAQ,GAAKA,GAAS1E,KAAKwH,WAC7B,MAAMpG,MAAM,mBAAqBsD,EAAQ,2BAA6B1E,KAAKwH,YAG7E,GAAI9C,EAAQ1E,KAAKqH,mBAKf,IAJA,IAAIO,EAAkC5H,KAAK6H,uCAEvCC,EAAUF,EAAgCG,OAASH,EAAgCI,KAE9EpI,EAAII,KAAKqH,mBAAqB,EAAGzH,GAAK8E,EAAO9E,IAAK,CACzD,IAAIqI,EAAQjI,KAAKuH,gBAAgB,CAC/B7C,MAAO9E,IAKT,QAAcQ,IAAV6H,GAAuBC,MAAMD,GAC/B,MAAM7G,MAAM,kCAAoCxB,EAAI,aAAeqI,GAChD,OAAVA,GACTjI,KAAKoH,yBAAyBxH,GAAK,CACjCmI,OAAQD,EACRE,KAAM,GAERhI,KAAKsH,kBAAoB5C,IAEzB1E,KAAKoH,yBAAyBxH,GAAK,CACjCmI,OAAQD,EACRE,KAAMC,GAERH,GAAWG,EACXjI,KAAKqH,mBAAqB3C,GAKhC,OAAO1E,KAAKoH,yBAAyB1C,KAEtC,CACDH,IAAK,uCACLmD,MAAO,WACL,OAAO1H,KAAKqH,oBAAsB,EAAIrH,KAAKoH,yBAAyBpH,KAAKqH,oBAAsB,CAC7FU,OAAQ,EACRC,KAAM,KAST,CACDzD,IAAK,eACLmD,MAAO,WACL,IAAIE,EAAkC5H,KAAK6H,uCAI3C,OAH+BD,EAAgCG,OAASH,EAAgCI,MAC/EhI,KAAKwH,WAAaxH,KAAKqH,mBAAqB,GACfrH,KAAKyH,qBAe5D,CACDlD,IAAK,2BACLmD,MAAO,SAAkCS,GACvC,IAAIC,EAAcD,EAAME,MACpBA,OAAwBjI,IAAhBgI,EAA4B,OAASA,EAC7CE,EAAgBH,EAAMG,cACtBC,EAAgBJ,EAAMI,cACtBC,EAAcL,EAAMK,YAExB,GAAIF,GAAiB,EACnB,OAAO,EAGT,IAAIG,EAAQzI,KAAK0I,yBAAyBF,GACtCG,EAAYF,EAAMV,OAClBa,EAAYD,EAAYL,EAAgBG,EAAMT,KAC9Ca,OAAc,EAElB,OAAQR,GACN,IAAK,QACHQ,EAAcF,EACd,MAEF,IAAK,MACHE,EAAcD,EACd,MAEF,IAAK,SACHC,EAAcF,GAAaL,EAAgBG,EAAMT,MAAQ,EACzD,MAEF,QACEa,EAAcC,KAAKC,IAAIH,EAAWE,KAAKE,IAAIL,EAAWJ,IAI1D,IAAIU,EAAYjJ,KAAKkJ,eACrB,OAAOJ,KAAKC,IAAI,EAAGD,KAAKE,IAAIC,EAAYX,EAAeO,MAExD,CACDtE,IAAK,sBACLmD,MAAO,SAA6ByB,GAClC,IAAIb,EAAgBa,EAAOb,cACvBP,EAASoB,EAAOpB,OAGpB,GAAkB,IAFF/H,KAAKkJ,eAGnB,MAAO,GAGT,IAAIP,EAAYZ,EAASO,EAErBc,EAAQpJ,KAAKqJ,iBAAiBtB,GAE9BU,EAAQzI,KAAK0I,yBAAyBU,GAC1CrB,EAASU,EAAMV,OAASU,EAAMT,KAG9B,IAFA,IAAIsB,EAAOF,EAEJrB,EAASY,GAAaW,EAAOtJ,KAAKwH,WAAa,GACpD8B,IACAvB,GAAU/H,KAAK0I,yBAAyBY,GAAMtB,KAGhD,MAAO,CACLoB,MAAOA,EACPE,KAAMA,KAST,CACD/E,IAAK,YACLmD,MAAO,SAAmBhD,GACxB1E,KAAKqH,mBAAqByB,KAAKE,IAAIhJ,KAAKqH,mBAAoB3C,EAAQ,KAErE,CACDH,IAAK,gBACLmD,MAAO,SAAuB6B,EAAMC,EAAKzB,GACvC,KAAOyB,GAAOD,GAAM,CAClB,IAAIE,EAASD,EAAMV,KAAKY,OAAOH,EAAOC,GAAO,GACzCG,EAAiB3J,KAAK0I,yBAAyBe,GAAQ1B,OAE3D,GAAI4B,IAAmB5B,EACrB,OAAO0B,EACEE,EAAiB5B,EAC1ByB,EAAMC,EAAS,EACNE,EAAiB5B,IAC1BwB,EAAOE,EAAS,GAIpB,OAAID,EAAM,EACDA,EAAM,EAEN,IAGV,CACDjF,IAAK,qBACLmD,MAAO,SAA4BhD,EAAOqD,GAGxC,IAFA,IAAI6B,EAAW,EAERlF,EAAQ1E,KAAKwH,YAAcxH,KAAK0I,yBAAyBhE,GAAOqD,OAASA,GAC9ErD,GAASkF,EACTA,GAAY,EAGd,OAAO5J,KAAK6J,cAAcf,KAAKE,IAAItE,EAAO1E,KAAKwH,WAAa,GAAIsB,KAAKY,MAAMhF,EAAQ,GAAIqD,KASxF,CACDxD,IAAK,mBACLmD,MAAO,SAA0BK,GAC/B,GAAIG,MAAMH,GACR,MAAM3G,MAAM,kBAAoB2G,EAAS,cAK3CA,EAASe,KAAKC,IAAI,EAAGhB,GACrB,IAAIH,EAAkC5H,KAAK6H,uCACvCiC,EAAoBhB,KAAKC,IAAI,EAAG/I,KAAKqH,oBAEzC,OAAIO,EAAgCG,QAAUA,EAErC/H,KAAK6J,cAAcC,EAAmB,EAAG/B,GAKzC/H,KAAK+J,mBAAmBD,EAAmB/B,OAKjDd,EAxRwB,GCKtB+C,EAAoB,WAC7B,MARyB,qBAAXC,QAILA,OAAOC,OAPY,SADC,MCsMhB,EAvLyB,WACtC,SAASC,EAAkClH,GACzC,IAAImH,EAAqBnH,EAAKoH,cAC1BA,OAAuCjK,IAAvBgK,EAAmCJ,IAAsBI,EACzEjB,EAAS,IAAyBlG,EAAM,CAAC,kBAE7C,IAAgBjD,KAAMmK,GAGtBnK,KAAKsK,4BAA8B,IAAI,EAA2BnB,GAClEnJ,KAAKuK,eAAiBF,EA0KxB,OAvKA,IAAaF,EAAmC,CAAC,CAC/C5F,IAAK,qBACLmD,MAAO,WACL,OAAO1H,KAAKsK,4BAA4BpB,eAAiBlJ,KAAKuK,iBAE/D,CACDhG,IAAK,YACLmD,MAAO,SAAmByB,GACxBnJ,KAAKsK,4BAA4BE,UAAUrB,KAE5C,CACD5E,IAAK,eACLmD,MAAO,WACL,OAAO1H,KAAKsK,4BAA4BG,iBAEzC,CACDlG,IAAK,uBACLmD,MAAO,WACL,OAAO1H,KAAKsK,4BAA4BI,yBAEzC,CACDnG,IAAK,uBACLmD,MAAO,WACL,OAAO1H,KAAKsK,4BAA4BK,yBAOzC,CACDpG,IAAK,sBACLmD,MAAO,SAA6BC,GAClC,IAAIW,EAAgBX,EAAMW,cACtBP,EAASJ,EAAMI,OAEfkB,EAAYjJ,KAAKsK,4BAA4BpB,eAE7C0B,EAAgB5K,KAAKkJ,eAErB2B,EAAmB7K,KAAK8K,qBAAqB,CAC/CxC,cAAeA,EACfP,OAAQA,EACRkB,UAAW2B,IAGb,OAAO9B,KAAKiC,MAAMF,GAAoBD,EAAgB3B,MAEvD,CACD1E,IAAK,2BACLmD,MAAO,SAAkChD,GACvC,OAAO1E,KAAKsK,4BAA4B5B,yBAAyBhE,KAElE,CACDH,IAAK,uCACLmD,MAAO,WACL,OAAO1H,KAAKsK,4BAA4BzC,yCAIzC,CACDtD,IAAK,eACLmD,MAAO,WACL,OAAOoB,KAAKE,IAAIhJ,KAAKuK,eAAgBvK,KAAKsK,4BAA4BpB,kBAIvE,CACD3E,IAAK,2BACLmD,MAAO,SAAkCS,GACvC,IAAIC,EAAcD,EAAME,MACpBA,OAAwBjI,IAAhBgI,EAA4B,OAASA,EAC7CE,EAAgBH,EAAMG,cACtBC,EAAgBJ,EAAMI,cACtBC,EAAcL,EAAMK,YACxBD,EAAgBvI,KAAKgL,oBAAoB,CACvC1C,cAAeA,EACfP,OAAQQ,IAGV,IAAIR,EAAS/H,KAAKsK,4BAA4BW,yBAAyB,CACrE5C,MAAOA,EACPC,cAAeA,EACfC,cAAeA,EACfC,YAAaA,IAGf,OAAOxI,KAAKkL,oBAAoB,CAC9B5C,cAAeA,EACfP,OAAQA,MAKX,CACDxD,IAAK,sBACLmD,MAAO,SAA6ByD,GAClC,IAAI7C,EAAgB6C,EAAM7C,cACtBP,EAASoD,EAAMpD,OAKnB,OAJAA,EAAS/H,KAAKgL,oBAAoB,CAChC1C,cAAeA,EACfP,OAAQA,IAEH/H,KAAKsK,4BAA4Bc,oBAAoB,CAC1D9C,cAAeA,EACfP,OAAQA,MAGX,CACDxD,IAAK,YACLmD,MAAO,SAAmBhD,GACxB1E,KAAKsK,4BAA4Be,UAAU3G,KAE5C,CACDH,IAAK,uBACLmD,MAAO,SAA8B4D,GACnC,IAAIhD,EAAgBgD,EAAMhD,cACtBP,EAASuD,EAAMvD,OACfkB,EAAYqC,EAAMrC,UACtB,OAAOA,GAAaX,EAAgB,EAAIP,GAAUkB,EAAYX,KAE/D,CACD/D,IAAK,sBACLmD,MAAO,SAA6B6D,GAClC,IAAIjD,EAAgBiD,EAAMjD,cACtBP,EAASwD,EAAMxD,OAEfkB,EAAYjJ,KAAKsK,4BAA4BpB,eAE7C0B,EAAgB5K,KAAKkJ,eAEzB,GAAID,IAAc2B,EAChB,OAAO7C,EAEP,IAAI8C,EAAmB7K,KAAK8K,qBAAqB,CAC/CxC,cAAeA,EACfP,OAAQA,EACRkB,UAAWA,IAGb,OAAOH,KAAKiC,MAAMF,GAAoBD,EAAgBtC,MAGzD,CACD/D,IAAK,sBACLmD,MAAO,SAA6B8D,GAClC,IAAIlD,EAAgBkD,EAAMlD,cACtBP,EAASyD,EAAMzD,OAEfkB,EAAYjJ,KAAKsK,4BAA4BpB,eAE7C0B,EAAgB5K,KAAKkJ,eAEzB,GAAID,IAAc2B,EAChB,OAAO7C,EAEP,IAAI8C,EAAmB7K,KAAK8K,qBAAqB,CAC/CxC,cAAeA,EACfP,OAAQA,EACRkB,UAAW2B,IAGb,OAAO9B,KAAKiC,MAAMF,GAAoB5B,EAAYX,QAKjD6B,EApL+B,GCVzB,SAASsB,IACtB,IAAIC,IAAiB7L,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,KAAmBA,UAAU,GAChF8L,EAAgB,GACpB,OAAO,SAAU1I,GACf,IAAI2I,EAAW3I,EAAK2I,SAChBC,EAAU5I,EAAK4I,QAEftJ,EAAO,IAAasJ,GAEpBC,GAAkBJ,GAAkBnJ,EAAKwJ,OAAM,SAAUxH,GAC3D,IAAImD,EAAQmE,EAAQtH,GACpB,OAAOyH,MAAMC,QAAQvE,GAASA,EAAMjI,OAAS,EAAIiI,GAAS,KAExDwE,EAAe3J,EAAK9C,SAAW,IAAakM,GAAelM,QAAU8C,EAAK4J,MAAK,SAAU5H,GAC3F,IAAI6H,EAAcT,EAAcpH,GAC5BmD,EAAQmE,EAAQtH,GACpB,OAAOyH,MAAMC,QAAQvE,GAAS0E,EAAYC,KAAK,OAAS3E,EAAM2E,KAAK,KAAOD,IAAgB1E,KAE5FiE,EAAgBE,EAEZC,GAAkBI,GACpBN,EAASC,IC1BR,IACIS,EAA2B,ECKvB,SAASC,EAAwBtJ,GAC9C,IAAIwD,EAAWxD,EAAKwD,SAChB+F,EAA6BvJ,EAAKuJ,2BAClCC,EAAqBxJ,EAAKwJ,mBAC1BC,EAAmBzJ,EAAKyJ,iBACxBC,EAA4B1J,EAAK0J,0BACjCC,EAAwB3J,EAAK2J,sBAC7BC,EAAe5J,EAAK4J,aACpBC,EAAe7J,EAAK6J,aACpBC,EAAoB9J,EAAK8J,kBACzBhG,EAAgB9D,EAAK8D,cACrBiB,EAAO/E,EAAK+E,KACZgF,EAA4B/J,EAAK+J,0BACjCC,EAA4BhK,EAAKgK,0BACjCzG,EAAYgG,EAA2B/B,eACvCyC,EAAmBnG,GAAiB,GAAKA,EAAgBP,EAIzD0G,IAHiBlF,IAAS6E,GAAgBG,IAA8BN,GAAwC,kBAAbjG,GAAyBA,IAAaiG,GAGlGK,IAAsBJ,GAA6B5F,IAAkB6F,GAC9GK,EAA0BlG,IAEhBmG,GAAoB1G,EAAY,IAAMwB,EAAO6E,GAAgBrG,EAAYiG,IAK/EK,EAAeN,EAA2BtD,eAAiBlB,GAC7DiF,EAA0BzG,EAAY,GClC7B,ICCXwB,EDDW,mF,qBE6BXmF,EACQ,WADRA,EAES,YAYT,EAAO,SAAUC,GAInB,SAASC,EAAKlN,GACZ,IAAgBH,KAAMqN,GAEtB,IAAIC,EAAQ,IAA2BtN,MAAOqN,EAAK1H,WAAa,IAAuB0H,IAAO3N,KAAKM,KAAMG,IAEzGmN,EAAMC,wBAA0B9B,IAChC6B,EAAME,kBAAoB/B,GAAuB,GACjD6B,EAAMG,+BAAiC,KACvCH,EAAMI,4BAA8B,KACpCJ,EAAMK,0BAA2B,EACjCL,EAAMM,yBAA0B,EAChCN,EAAMO,yBAA2B,EACjCP,EAAMQ,uBAAyB,EAC/BR,EAAMS,2BAA4B,EAClCT,EAAMU,0BAA4B,EAClCV,EAAMW,yBAA2B,EACjCX,EAAMY,uBAAyB,EAC/BZ,EAAMa,sBAAwB,EAC9Bb,EAAMc,YAAc,GACpBd,EAAMe,WAAa,GAEnBf,EAAMgB,6BAA+B,WACnChB,EAAMiB,+BAAiC,KAEvCjB,EAAMjN,SAAS,CACbmO,aAAa,EACbC,uBAAuB,KAI3BnB,EAAMoB,4BAA8B,WAClC,IAAIC,EAAoBrB,EAAMnN,MAAMwO,kBAEpCrB,EAAMC,wBAAwB,CAC5B3B,SAAU+C,EACV9C,QAAS,CACP+C,yBAA0BtB,EAAMuB,kBAChCC,wBAAyBxB,EAAMyB,iBAC/BC,iBAAkB1B,EAAMU,0BACxBiB,gBAAiB3B,EAAMW,yBACvBiB,sBAAuB5B,EAAM6B,eAC7BC,qBAAsB9B,EAAM+B,cAC5BC,cAAehC,EAAMY,uBACrBqB,aAAcjC,EAAMa,0BAK1Bb,EAAMkC,0BAA4B,SAAUC,GAC1CnC,EAAMoC,oBAAsBD,GAG9BnC,EAAMqC,UAAY,SAAUvK,GAItBA,EAAMvC,SAAWyK,EAAMoC,qBACzBpC,EAAMsC,kBAAkBxK,EAAMvC,SAIlC,IAAIgN,EAA+B,IAAI,EAAkC,CACvErJ,UAAWrG,EAAM2P,YACjB5I,eAAgB,SAAwBiC,GACtC,OAAOkE,EAAK0C,gBAAgB5P,EAAM6P,YAA3B3C,CAAwClE,IAEjDhC,kBAAmBkG,EAAK4C,wBAAwB9P,KAE9C+P,EAA4B,IAAI,EAAkC,CACpE1J,UAAWrG,EAAMgQ,SACjBjJ,eAAgB,SAAwBiC,GACtC,OAAOkE,EAAK0C,gBAAgB5P,EAAMiQ,UAA3B/C,CAAsClE,IAE/ChC,kBAAmBkG,EAAKgD,qBAAqBlQ,KAiC/C,OA/BAmN,EAAMvN,MAAQ,CACZuQ,cAAe,CACbT,6BAA8BA,EAC9BK,0BAA2BA,EAC3BK,gBAAiBpQ,EAAM6P,YACvBQ,cAAerQ,EAAMiQ,UACrBK,gBAAiBtQ,EAAM2P,YACvBY,aAAcvQ,EAAMgQ,SACpBQ,iBAAuC,IAAtBxQ,EAAMqO,YACvBoC,mBAAoBzQ,EAAM0Q,eAC1BC,gBAAiB3Q,EAAM4Q,YACvBC,cAAe,EACfC,uBAAuB,GAEzBzC,aAAa,EACb0C,0BAA2B5E,EAC3B6E,wBAAyB7E,EACzB8E,WAAY,EACZC,UAAW,EACXC,2BAA4B,KAC5B7C,uBAAuB,GAGrBtO,EAAM4Q,YAAc,IACtBzD,EAAMiE,kBAAoBjE,EAAMkE,wBAAwBrR,EAAOmN,EAAMvN,QAGnEI,EAAM0Q,eAAiB,IACzBvD,EAAMmE,mBAAqBnE,EAAMoE,yBAAyBvR,EAAOmN,EAAMvN,QAGlEuN,EA8iCT,OA3pCA,IAAUD,EAAMD,GAoHhB,IAAaC,EAAM,CAAC,CAClB9I,IAAK,mBACLmD,MAAO,WACL,IAAIzE,EAAOpD,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,GAC3E8R,EAAiB1O,EAAK2O,UACtBA,OAA+BxR,IAAnBuR,EAA+B3R,KAAKG,MAAM4M,kBAAoB4E,EAC1EE,EAAmB5O,EAAK6O,YACxBA,OAAmC1R,IAArByR,EAAiC7R,KAAKG,MAAM0Q,eAAiBgB,EAC3EE,EAAgB9O,EAAK+O,SACrBA,OAA6B5R,IAAlB2R,EAA8B/R,KAAKG,MAAM4Q,YAAcgB,EAElEE,EAAc,IAAS,GAAIjS,KAAKG,MAAO,CACzC4M,kBAAmB6E,EACnBf,eAAgBiB,EAChBf,YAAaiB,IAGf,MAAO,CACLZ,WAAYpR,KAAK0R,yBAAyBO,GAC1CZ,UAAWrR,KAAKwR,wBAAwBS,MAO3C,CACD1N,IAAK,qBACLmD,MAAO,WACL,OAAO1H,KAAKD,MAAMuQ,cAAcJ,0BAA0BhH,iBAM3D,CACD3E,IAAK,uBACLmD,MAAO,WACL,OAAO1H,KAAKD,MAAMuQ,cAAcT,6BAA6B3G,iBAO9D,CACD3E,IAAK,oBACLmD,MAAO,SAA2BC,GAChC,IAAIuK,EAAmBvK,EAAMyJ,WACzBe,OAAuC/R,IAArB8R,EAAiC,EAAIA,EACvDE,EAAkBzK,EAAM0J,UACxBgB,OAAqCjS,IAApBgS,EAAgC,EAAIA,EAGzD,KAAIC,EAAiB,GAArB,CAKArS,KAAKsS,uBAEL,IAAIC,EAASvS,KAAKG,MACdqS,EAAaD,EAAOC,WACpBC,EAAYF,EAAOE,UACnB5O,EAAS0O,EAAO1O,OAChBD,EAAQ2O,EAAO3O,MACf0M,EAAgBtQ,KAAKD,MAAMuQ,cAK3BU,EAAgBV,EAAcU,cAC9B0B,EAAkBpC,EAAcJ,0BAA0BhH,eAC1DyJ,EAAoBrC,EAAcT,6BAA6B3G,eAC/DkI,EAAatI,KAAKE,IAAIF,KAAKC,IAAI,EAAG4J,EAAoB/O,EAAQoN,GAAgBmB,GAC9Ed,EAAYvI,KAAKE,IAAIF,KAAKC,IAAI,EAAG2J,EAAkB7O,EAASmN,GAAgBqB,GAKhF,GAAIrS,KAAKD,MAAMqR,aAAeA,GAAcpR,KAAKD,MAAMsR,YAAcA,EAAW,CAG9E,IAIIuB,EAAW,CACbpE,aAAa,EACb0C,0BAN+BE,IAAepR,KAAKD,MAAMqR,WAAaA,EAAapR,KAAKD,MAAMqR,WAAa9E,GJnP9E,EImPqItM,KAAKD,MAAMmR,0BAO7KC,wBAL6BE,IAAcrR,KAAKD,MAAMsR,UAAYA,EAAYrR,KAAKD,MAAMsR,UAAY/E,GJrPxE,EIqP+HtM,KAAKD,MAAMoR,wBAMvKG,2BAA4BnE,GAGzBqF,IACHI,EAASvB,UAAYA,GAGlBoB,IACHG,EAASxB,WAAaA,GAGxBwB,EAASnE,uBAAwB,EACjCzO,KAAKK,SAASuS,GAGhB5S,KAAK6S,wBAAwB,CAC3BzB,WAAYA,EACZC,UAAWA,EACXsB,kBAAmBA,EACnBD,gBAAiBA,OAWpB,CACDnO,IAAK,gCACLmD,MAAO,SAAuCS,GAC5C,IAAI2J,EAAc3J,EAAM2J,YACpBE,EAAW7J,EAAM6J,SACrBhS,KAAKyN,+BAAgF,kBAAxCzN,KAAKyN,+BAA8C3E,KAAKE,IAAIhJ,KAAKyN,+BAAgCqE,GAAeA,EAC7J9R,KAAK0N,4BAA0E,kBAArC1N,KAAK0N,4BAA2C5E,KAAKE,IAAIhJ,KAAK0N,4BAA6BsE,GAAYA,IAQlJ,CACDzN,IAAK,kBACLmD,MAAO,WACL,IAAIoL,EAAU9S,KAAKG,MACf2P,EAAcgD,EAAQhD,YACtBK,EAAW2C,EAAQ3C,SACnBG,EAAgBtQ,KAAKD,MAAMuQ,cAC/BA,EAAcT,6BAA6BnH,yBAAyBoH,EAAc,GAClFQ,EAAcJ,0BAA0BxH,yBAAyByH,EAAW,KAQ7E,CACD5L,IAAK,oBACLmD,MAAO,WACL,IAAIyD,EAAQtL,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,GAC5EkT,EAAoB5H,EAAM2G,YAC1BA,OAAoC1R,IAAtB2S,EAAkC,EAAIA,EACpDC,EAAiB7H,EAAM6G,SACvBA,OAA8B5R,IAAnB4S,EAA+B,EAAIA,EAE9CC,EAAUjT,KAAKG,MACf0Q,EAAiBoC,EAAQpC,eACzBE,EAAckC,EAAQlC,YACtBT,EAAgBtQ,KAAKD,MAAMuQ,cAC/BA,EAAcT,6BAA6BxE,UAAUyG,GACrDxB,EAAcJ,0BAA0B7E,UAAU2G,GAIlDhS,KAAK2N,yBAA2BkD,GAAkB,IAAM7Q,KAAKD,MAAMmR,4BAA8B5E,EAA2BwF,GAAejB,EAAiBiB,GAAejB,GAC3K7Q,KAAK4N,wBAA0BmD,GAAe,IAAM/Q,KAAKD,MAAMoR,0BAA4B7E,EAA2B0F,GAAYjB,EAAciB,GAAYjB,GAG5J/Q,KAAKoO,YAAc,GACnBpO,KAAKqO,WAAa,GAClBrO,KAAKkT,gBAMN,CACD3O,IAAK,eACLmD,MAAO,SAAsB4D,GAC3B,IAAIwG,EAAcxG,EAAMwG,YACpBE,EAAW1G,EAAM0G,SACjBlC,EAAc9P,KAAKG,MAAM2P,YACzB3P,EAAQH,KAAKG,MAGb2P,EAAc,QAAqB1P,IAAhB0R,GACrB9R,KAAKmT,mCAAmC,IAAS,GAAIhT,EAAO,CAC1D0Q,eAAgBiB,UAIH1R,IAAb4R,GACFhS,KAAKoT,+BAA+B,IAAS,GAAIjT,EAAO,CACtD4Q,YAAaiB,OAIlB,CACDzN,IAAK,oBACLmD,MAAO,WACL,IAAI2L,EAAUrT,KAAKG,MACfmT,EAAmBD,EAAQC,iBAC3BzP,EAASwP,EAAQxP,OACjBuN,EAAaiC,EAAQjC,WACrBP,EAAiBwC,EAAQxC,eACzBQ,EAAYgC,EAAQhC,UACpBN,EAAcsC,EAAQtC,YACtBnN,EAAQyP,EAAQzP,MAChB0M,EAAgBtQ,KAAKD,MAAMuQ,cAsB/B,GApBAtQ,KAAKuR,kBAAoB,EACzBvR,KAAKyR,mBAAqB,EAG1BzR,KAAKuT,6BAIAjD,EAAcW,uBACjBjR,KAAKK,UAAS,SAAUG,GACtB,IAAIgT,EAAc,IAAS,GAAIhT,EAAW,CACxCiO,uBAAuB,IAKzB,OAFA+E,EAAYlD,cAAcU,cAAgBsC,IAC1CE,EAAYlD,cAAcW,uBAAwB,EAC3CuC,KAIe,kBAAfpC,GAA2BA,GAAc,GAA0B,kBAAdC,GAA0BA,GAAa,EAAG,CACxG,IAAImC,EAAcnG,EAAKoG,gCAAgC,CACrDjT,UAAWR,KAAKD,MAChBqR,WAAYA,EACZC,UAAWA,IAGTmC,IACFA,EAAY/E,uBAAwB,EACpCzO,KAAKK,SAASmT,IAKdxT,KAAK0P,sBAGH1P,KAAK0P,oBAAoB0B,aAAepR,KAAKD,MAAMqR,aACrDpR,KAAK0P,oBAAoB0B,WAAapR,KAAKD,MAAMqR,YAG/CpR,KAAK0P,oBAAoB2B,YAAcrR,KAAKD,MAAMsR,YACpDrR,KAAK0P,oBAAoB2B,UAAYrR,KAAKD,MAAMsR,YAMpD,IAAIqC,EAAuB7P,EAAS,GAAKD,EAAQ,EAE7CiN,GAAkB,GAAK6C,GACzB1T,KAAKmT,qCAGHpC,GAAe,GAAK2C,GACtB1T,KAAKoT,iCAIPpT,KAAK0O,8BAGL1O,KAAK6S,wBAAwB,CAC3BzB,WAAYA,GAAc,EAC1BC,UAAWA,GAAa,EACxBsB,kBAAmBrC,EAAcT,6BAA6B3G,eAC9DwJ,gBAAiBpC,EAAcJ,0BAA0BhH,iBAG3DlJ,KAAK2T,wCAQN,CACDpP,IAAK,qBACLmD,MAAO,SAA4B9G,EAAWJ,GAC5C,IAAIoT,EAAS5T,KAET6T,EAAU7T,KAAKG,MACfqS,EAAaqB,EAAQrB,WACrBC,EAAYoB,EAAQpB,UACpB3C,EAAc+D,EAAQ/D,YACtBjM,EAASgQ,EAAQhQ,OACjBsM,EAAW0D,EAAQ1D,SACnBpD,EAAoB8G,EAAQ9G,kBAC5B8D,EAAiBgD,EAAQhD,eACzBE,EAAc8C,EAAQ9C,YACtBnN,EAAQiQ,EAAQjQ,MAChBkQ,EAAS9T,KAAKD,MACdqR,EAAa0C,EAAO1C,WACpBE,EAA6BwC,EAAOxC,2BACpCD,EAAYyC,EAAOzC,UACnBf,EAAgBwD,EAAOxD,cAG3BtQ,KAAKuT,6BAKL,IAAIQ,EAAwCjE,EAAc,GAA+B,IAA1BlP,EAAUkP,aAAqBK,EAAW,GAA4B,IAAvBvP,EAAUuP,SAMpHmB,IAA+BnE,KAG5BsF,GAAarB,GAAc,IAAMA,IAAepR,KAAK0P,oBAAoB0B,YAAc2C,KAC1F/T,KAAK0P,oBAAoB0B,WAAaA,IAGnCoB,GAAcnB,GAAa,IAAMA,IAAcrR,KAAK0P,oBAAoB2B,WAAa0C,KACxF/T,KAAK0P,oBAAoB2B,UAAYA,IAOzC,IAAIrE,GAAiD,IAApBpM,EAAUgD,OAAoC,IAArBhD,EAAUiD,SAAiBA,EAAS,GAAKD,EAAQ,EAqD3G,GAlDI5D,KAAK2N,0BACP3N,KAAK2N,0BAA2B,EAEhC3N,KAAKmT,mCAAmCnT,KAAKG,QAE7CoM,EAAwB,CACtBC,2BAA4B8D,EAAcT,6BAC1CpD,mBAAoB7L,EAAUkP,YAC9BpD,iBAAkB9L,EAAUoP,YAC5BrD,0BAA2B/L,EAAUmM,kBACrCH,sBAAuBhM,EAAUiQ,eACjChE,aAAcjM,EAAUgD,MACxBkJ,aAAcsE,EACdrE,kBAAmBA,EACnBhG,cAAe8J,EACf7I,KAAMpE,EACNoJ,0BAA2BA,EAC3BC,0BAA2B,WACzB,OAAO2G,EAAOT,mCAAmCS,EAAOzT,UAK1DH,KAAK4N,yBACP5N,KAAK4N,yBAA0B,EAE/B5N,KAAKoT,+BAA+BpT,KAAKG,QAEzCoM,EAAwB,CACtBC,2BAA4B8D,EAAcJ,0BAC1CzD,mBAAoB7L,EAAUuP,SAC9BzD,iBAAkB9L,EAAUwP,UAC5BzD,0BAA2B/L,EAAUmM,kBACrCH,sBAAuBhM,EAAUmQ,YACjClE,aAAcjM,EAAUiD,OACxBiJ,aAAcuE,EACdtE,kBAAmBA,EACnBhG,cAAegK,EACf/I,KAAMnE,EACNmJ,0BAA2BA,EAC3BC,0BAA2B,WACzB,OAAO2G,EAAOR,+BAA+BQ,EAAOzT,UAM1DH,KAAK0O,8BAGD0C,IAAe5Q,EAAU4Q,YAAcC,IAAc7Q,EAAU6Q,UAAW,CAC5E,IAAIqB,EAAkBpC,EAAcJ,0BAA0BhH,eAC1DyJ,EAAoBrC,EAAcT,6BAA6B3G,eAEnElJ,KAAK6S,wBAAwB,CAC3BzB,WAAYA,EACZC,UAAWA,EACXsB,kBAAmBA,EACnBD,gBAAiBA,IAIrB1S,KAAK2T,wCAEN,CACDpP,IAAK,uBACLmD,MAAO,WACD1H,KAAKuO,gCACP,YAAuBvO,KAAKuO,kCAU/B,CACDhK,IAAK,SACLmD,MAAO,WACL,IAAIsM,EAAUhU,KAAKG,MACf8T,EAAqBD,EAAQC,mBAC7BzB,EAAawB,EAAQxB,WACrBC,EAAYuB,EAAQvB,UACpBvP,EAAY8Q,EAAQ9Q,UACpBgR,EAAiBF,EAAQE,eACzBC,EAAgBH,EAAQG,cACxBC,EAAiBJ,EAAQI,eACzBvQ,EAASmQ,EAAQnQ,OACjBwQ,EAAKL,EAAQK,GACbC,EAAoBN,EAAQM,kBAC5BjR,EAAO2Q,EAAQ3Q,KACfD,EAAQ4Q,EAAQ5Q,MAChB8B,EAAW8O,EAAQ9O,SACnBtB,EAAQoQ,EAAQpQ,MAChB2Q,EAAUvU,KAAKD,MACfuQ,EAAgBiE,EAAQjE,cACxB7B,EAAwB8F,EAAQ9F,sBAEhCD,EAAcxO,KAAKwU,eAEnBC,EAAY,CACdC,UAAW,aACXC,UAAW,MACX9Q,OAAQ2O,EAAa,OAAS3O,EAC9B+Q,SAAU,WACVhR,MAAO6O,EAAY,OAAS7O,EAC5BiR,wBAAyB,QACzBC,WAAY,aAGVrG,IACFzO,KAAKoO,YAAc,IAKhBpO,KAAKD,MAAMyO,aACdxO,KAAK+U,mBAIP/U,KAAKgV,2BAA2BhV,KAAKG,MAAOH,KAAKD,OAEjD,IAAI4S,EAAoBrC,EAAcT,6BAA6B3G,eAC/DwJ,EAAkBpC,EAAcJ,0BAA0BhH,eAI1D+L,EAAwBvC,EAAkB7O,EAASyM,EAAcU,cAAgB,EACjFkE,EAA0BvC,EAAoB/O,EAAQ0M,EAAcU,cAAgB,EAEpFkE,IAA4BlV,KAAK6N,0BAA4BoH,IAA0BjV,KAAK8N,yBAC9F9N,KAAK6N,yBAA2BqH,EAChClV,KAAK8N,uBAAyBmH,EAC9BjV,KAAK+N,2BAA4B,GAQnC0G,EAAUU,UAAYxC,EAAoBsC,GAAyBrR,EAAQ,SAAW,OACtF6Q,EAAUW,UAAY1C,EAAkBwC,GAA2BrR,EAAS,SAAW,OACvF,IAAIwR,EAAoBrV,KAAKsV,mBACzBC,EAAqD,IAA7BF,EAAkB5V,QAAgBoE,EAAS,GAAKD,EAAQ,EACpF,OAAO,gBAAoB,MAAO,IAAS,CACzC6L,IAAKzP,KAAKwP,2BACT0E,EAAgB,CACjB,aAAclU,KAAKG,MAAM,cACzB,gBAAiBH,KAAKG,MAAM,iBAC5B+C,UAAW,YAAK,yBAA0BA,GAC1CmR,GAAIA,EACJmB,SAAUxV,KAAK2P,UACftM,KAAMA,EACND,MAAO,IAAS,GAAIqR,EAAWrR,GAC/B8B,SAAUA,IACRmQ,EAAkB5V,OAAS,GAAK,gBAAoB,MAAO,CAC7DyD,UAAW,+CACXG,KAAM8Q,EACN/Q,MAAO,IAAS,CACdQ,MAAOqQ,EAAqB,OAAStB,EACrC9O,OAAQ6O,EACR+C,SAAU9C,EACV+C,UAAWhD,EACXiD,SAAU,SACVC,cAAepH,EAAc,OAAS,GACtCoG,SAAU,YACTR,IACFiB,GAAoBE,GAAyBjB,OAIjD,CACD/P,IAAK,6BACLmD,MAAO,WACL,IAAIvH,EAAQN,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKG,MACjFJ,EAAQF,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKD,MACjFiG,EAAe7F,EAAM6F,aACrB6P,EAAoB1V,EAAM0V,kBAC1B/F,EAAc3P,EAAM2P,YACpBgG,EAA2B3V,EAAM2V,yBACjCjS,EAAS1D,EAAM0D,OACfkS,EAAsB5V,EAAM4V,oBAC5BC,EAAwB7V,EAAM6V,sBAC9BC,EAAmB9V,EAAM8V,iBACzB9F,EAAWhQ,EAAMgQ,SACjBvM,EAAQzD,EAAMyD,MACdsS,EAAoB/V,EAAM+V,kBAC1BhF,EAA4BnR,EAAMmR,0BAClCC,EAA0BpR,EAAMoR,wBAChCb,EAAgBvQ,EAAMuQ,cACtBe,EAAYrR,KAAKuR,kBAAoB,EAAIvR,KAAKuR,kBAAoBxR,EAAMsR,UACxED,EAAapR,KAAKyR,mBAAqB,EAAIzR,KAAKyR,mBAAqB1R,EAAMqR,WAE3E5C,EAAcxO,KAAKwU,aAAarU,EAAOJ,GAI3C,GAFAC,KAAKsV,mBAAqB,GAEtBzR,EAAS,GAAKD,EAAQ,EAAG,CAC3B,IAAIuS,EAAuB7F,EAAcT,6BAA6BzE,oBAAoB,CACxF9C,cAAe1E,EACfmE,OAAQqJ,IAENgF,EAAoB9F,EAAcJ,0BAA0B9E,oBAAoB,CAClF9C,cAAezE,EACfkE,OAAQsJ,IAENgF,EAA6B/F,EAAcT,6BAA6ByG,oBAAoB,CAC9FhO,cAAe1E,EACfmE,OAAQqJ,IAENmF,EAA2BjG,EAAcJ,0BAA0BoG,oBAAoB,CACzFhO,cAAezE,EACfkE,OAAQsJ,IAGVrR,KAAKgO,0BAA4BmI,EAAqB/M,MACtDpJ,KAAKiO,yBAA2BkI,EAAqB7M,KACrDtJ,KAAKkO,uBAAyBkI,EAAkBhN,MAChDpJ,KAAKmO,sBAAwBiI,EAAkB9M,KAC/C,IAAIkN,EAAwBR,EAAsB,CAChDrB,UAAW,aACXnO,UAAWsJ,EACX2G,mBAAoBV,EACpBW,gBAAiBxF,EACjByF,WAAkD,kBAA/BR,EAAqB/M,MAAqB+M,EAAqB/M,MAAQ,EAC1FwN,UAAgD,kBAA9BT,EAAqB7M,KAAoB6M,EAAqB7M,MAAQ,IAEtFuN,EAAqBb,EAAsB,CAC7CrB,UAAW,WACXnO,UAAW2J,EACXsG,mBAAoBR,EACpBS,gBAAiBvF,EACjBwF,WAA+C,kBAA5BP,EAAkBhN,MAAqBgN,EAAkBhN,MAAQ,EACpFwN,UAA6C,kBAA3BR,EAAkB9M,KAAoB8M,EAAkB9M,MAAQ,IAGhF0F,EAAmBwH,EAAsBM,mBACzC7H,EAAkBuH,EAAsBO,kBACxCzH,EAAgBuH,EAAmBC,mBACnCvH,EAAesH,EAAmBE,kBAEtC,GAAIjB,EAA0B,CAK5B,IAAKA,EAAyBkB,iBAC5B,IAAK,IAAIhF,EAAW1C,EAAe0C,GAAYzC,EAAcyC,IAC3D,IAAK8D,EAAyBmB,IAAIjF,EAAU,GAAI,CAC9ChD,EAAmB,EACnBC,EAAkBa,EAAc,EAChC,MASN,IAAKgG,EAAyBoB,gBAC5B,IAAK,IAAIpF,EAAc9C,EAAkB8C,GAAe7C,EAAiB6C,IACvE,IAAKgE,EAAyBmB,IAAI,EAAGnF,GAAc,CACjDxC,EAAgB,EAChBC,EAAeY,EAAW,EAC1B,OAMRnQ,KAAKsV,mBAAqBO,EAAkB,CAC1CsB,UAAWnX,KAAKqO,WAChBrI,aAAcA,EACd6J,6BAA8BS,EAAcT,6BAC5Cb,iBAAkBA,EAClBC,gBAAiBA,EACjB6G,yBAA0BA,EAC1BO,2BAA4BA,EAC5B7H,YAAaA,EACb0H,kBAAmBA,EACnBkB,OAAQpX,KACRkQ,0BAA2BI,EAAcJ,0BACzCZ,cAAeA,EACfC,aAAcA,EACd6B,WAAYA,EACZC,UAAWA,EACXgG,WAAYrX,KAAKoO,YACjBmI,yBAA0BA,EAC1BJ,qBAAsBA,EACtBC,kBAAmBA,IAGrBpW,KAAK6O,kBAAoBG,EACzBhP,KAAK+O,iBAAmBE,EACxBjP,KAAKmP,eAAiBG,EACtBtP,KAAKqP,cAAgBE,KASxB,CACDhL,IAAK,uBACLmD,MAAO,WACL,IAAI4P,EAA6BtX,KAAKG,MAAMmX,2BAExCtX,KAAKuO,gCACP,YAAuBvO,KAAKuO,gCAG9BvO,KAAKuO,+BAAiC,OAAAgJ,EAAA,GAAwBvX,KAAKsO,6BAA8BgJ,KAElG,CACD/S,IAAK,6BAMLmD,MAAO,WACL,GAAmD,kBAAxC1H,KAAKyN,gCAA2F,kBAArCzN,KAAK0N,4BAA0C,CACnH,IAAIoE,EAAc9R,KAAKyN,+BACnBuE,EAAWhS,KAAK0N,4BACpB1N,KAAKyN,+BAAiC,KACtCzN,KAAK0N,4BAA8B,KACnC1N,KAAKwX,kBAAkB,CACrB1F,YAAaA,EACbE,SAAUA,OAIf,CACDzN,IAAK,0BACLmD,MAAO,SAAiC6D,GACtC,IAAIkM,EAASzX,KAEToR,EAAa7F,EAAM6F,WACnBC,EAAY9F,EAAM8F,UAClBsB,EAAoBpH,EAAMoH,kBAC1BD,EAAkBnH,EAAMmH,gBAE5B1S,KAAKwN,kBAAkB,CACrB5B,SAAU,SAAkBJ,GAC1B,IAAI4F,EAAa5F,EAAM4F,WACnBC,EAAY7F,EAAM6F,UAClBqG,EAAUD,EAAOtX,MACjB0D,EAAS6T,EAAQ7T,QAGrB2R,EAFekC,EAAQlC,UAEd,CACPmC,aAAc9T,EACd+T,YAHUF,EAAQ9T,MAIlBiU,aAAcnF,EACdtB,WAAYA,EACZC,UAAWA,EACXyG,YAAanF,KAGjB9G,QAAS,CACPuF,WAAYA,EACZC,UAAWA,OAIhB,CACD9M,IAAK,eACLmD,MAAO,WACL,IAAIvH,EAAQN,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKG,MACjFJ,EAAQF,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKD,MAGrF,OAAOuC,OAAOS,eAAerD,KAAKS,EAAO,eAAiB4X,QAAQ5X,EAAMqO,aAAeuJ,QAAQhY,EAAMyO,eAEtG,CACDjK,IAAK,sCACLmD,MAAO,WACL,GAAI1H,KAAK+N,0BAA2B,CAClC,IAAIiK,EAA6BhY,KAAKG,MAAM8X,0BAC5CjY,KAAK+N,2BAA4B,EAEjCiK,EAA2B,CACzBE,WAAYlY,KAAK6N,yBAA2B,EAC5C7F,KAAMhI,KAAKD,MAAMuQ,cAAcU,cAC/BmH,SAAUnY,KAAK8N,uBAAyB,OAI7C,CACDvJ,IAAK,mBAMLmD,MAAO,SAA0B0Q,GAC/B,IAAIhH,EAAagH,EAAMhH,WACnBC,EAAY+G,EAAM/G,UAElBmC,EAAcnG,EAAKoG,gCAAgC,CACrDjT,UAAWR,KAAKD,MAChBqR,WAAYA,EACZC,UAAWA,IAGTmC,IACFA,EAAY/E,uBAAwB,EACpCzO,KAAKK,SAASmT,MAGjB,CACDjP,IAAK,2BACLmD,MAAO,WACL,IAAIvH,EAAQN,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKG,MACjFJ,EAAQF,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKD,MACrF,OAAOsN,EAAKqE,yBAAyBvR,EAAOJ,KAE7C,CACDwE,IAAK,qCACLmD,MAAO,WACL,IAAIvH,EAAQN,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKG,MACjFJ,EAAQF,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKD,MAEjFyT,EAAcnG,EAAKgL,2CAA2ClY,EAAOJ,GAErEyT,IACFA,EAAY/E,uBAAwB,EACpCzO,KAAKK,SAASmT,MAGjB,CACDjP,IAAK,0BACLmD,MAAO,WACL,IAAIvH,EAAQN,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKG,MACjFJ,EAAQF,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKD,MACrF,OAAOsN,EAAKmE,wBAAwBrR,EAAOJ,KAE5C,CACDwE,IAAK,mBACLmD,MAAO,WACL,IAAI2P,EAAarX,KAAKoO,YAClB+I,EAAYnX,KAAKqO,WACjB6H,EAAoBlW,KAAKG,MAAM+V,kBAOnClW,KAAKqO,WAAa,GAClBrO,KAAKoO,YAAc,GAEnB,IAAK,IAAI4D,EAAWhS,KAAKmP,eAAgB6C,GAAYhS,KAAKqP,cAAe2C,IACvE,IAAK,IAAIF,EAAc9R,KAAK6O,kBAAmBiD,GAAe9R,KAAK+O,iBAAkB+C,IAAe,CAClG,IAAIvN,EAAMyN,EAAW,IAAMF,EAC3B9R,KAAKoO,YAAY7J,GAAO8S,EAAW9S,GAE/B2R,IACFlW,KAAKqO,WAAW9J,GAAO4S,EAAU5S,OAKxC,CACDA,IAAK,iCACLmD,MAAO,WACL,IAAIvH,EAAQN,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKG,MACjFJ,EAAQF,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAKG,KAAKD,MAEjFyT,EAAcnG,EAAKiL,uCAAuCnY,EAAOJ,GAEjEyT,IACFA,EAAY/E,uBAAwB,EACpCzO,KAAKK,SAASmT,OAGhB,CAAC,CACHjP,IAAK,2BACLmD,MAAO,SAAkCnH,EAAWC,GAClD,IAAIoS,EAAW,GAEe,IAA1BrS,EAAUuP,aAA8C,IAAzBtP,EAAU4Q,YAA2C,IAAvB7Q,EAAU4P,UAA0C,IAAxB3P,EAAU6Q,WACrGuB,EAASxB,WAAa,EACtBwB,EAASvB,UAAY,IAEZ9Q,EAAU6Q,aAAe5Q,EAAU4Q,YAAc7Q,EAAUsQ,eAAiB,GAAKtQ,EAAU8Q,YAAc7Q,EAAU6Q,WAAa9Q,EAAUwQ,YAAc,IACjK,IAAe6B,EAAUvF,EAAKoG,gCAAgC,CAC5DjT,UAAWA,EACX4Q,WAAY7Q,EAAU6Q,WACtBC,UAAW9Q,EAAU8Q,aAIzB,IAAIf,EAAgB9P,EAAU8P,cAE9BsC,EAASnE,uBAAwB,EAE7BlO,EAAUyP,cAAgBM,EAAcC,iBAAmBhQ,EAAU6P,YAAcE,EAAcE,gBAEnGoC,EAASnE,uBAAwB,GAGnC6B,EAAcT,6BAA6BrF,UAAU,CACnDhE,UAAWjG,EAAUuP,YACrB3I,kBAAmBkG,EAAK4C,wBAAwB1P,GAChD2G,eAAgBmG,EAAK0C,gBAAgBxP,EAAUyP,eAEjDM,EAAcJ,0BAA0B1F,UAAU,CAChDhE,UAAWjG,EAAU4P,SACrBhJ,kBAAmBkG,EAAKgD,qBAAqB9P,GAC7C2G,eAAgBmG,EAAK0C,gBAAgBxP,EAAU6P,aAGX,IAAlCE,EAAcG,iBAAwD,IAA/BH,EAAcI,eACvDJ,EAAcG,gBAAkB,EAChCH,EAAcI,aAAe,GAI3BnQ,EAAUiS,aAAwC,IAA1BjS,EAAUiO,cAA2D,IAAlC8B,EAAcK,iBAC3E,IAAeiC,EAAU,CACvBpE,aAAa,IAIjB,IAAI+J,OAAc,EACdC,OAAc,EAiDlB,OAhDAjS,EAAkD,CAChDC,UAAW8J,EAAcG,gBACzBhK,SAAmD,kBAAlC6J,EAAcC,gBAA+BD,EAAcC,gBAAkB,KAC9F7J,wBAAyB,WACvB,OAAO4J,EAAcT,6BAA6BxE,UAAU,IAE9D1E,6BAA8BpG,EAC9BqG,eAAgBrG,EAAUuP,YAC1BjJ,aAA+C,kBAA1BtG,EAAUyP,YAA2BzP,EAAUyP,YAAc,KAClFlJ,kBAAmBvG,EAAUsQ,eAC7B9J,cAAeuJ,EAAcM,mBAC7B5J,mCAAoC,WAClCuR,EAAclL,EAAKgL,2CAA2C9X,EAAWC,MAG7E+F,EAAkD,CAChDC,UAAW8J,EAAcI,aACzBjK,SAAiD,kBAAhC6J,EAAcE,cAA6BF,EAAcE,cAAgB,KAC1F9J,wBAAyB,WACvB,OAAO4J,EAAcJ,0BAA0B7E,UAAU,IAE3D1E,6BAA8BpG,EAC9BqG,eAAgBrG,EAAU4P,SAC1BtJ,aAA6C,kBAAxBtG,EAAU6P,UAAyB7P,EAAU6P,UAAY,KAC9EtJ,kBAAmBvG,EAAUwQ,YAC7BhK,cAAeuJ,EAAcQ,gBAC7B9J,mCAAoC,WAClCwR,EAAcnL,EAAKiL,uCAAuC/X,EAAWC,MAGzE8P,EAAcG,gBAAkBlQ,EAAUuP,YAC1CQ,EAAcC,gBAAkBhQ,EAAUyP,YAC1CM,EAAcK,iBAA4C,IAA1BpQ,EAAUiO,YAC1C8B,EAAcI,aAAenQ,EAAU4P,SACvCG,EAAcE,cAAgBjQ,EAAU6P,UACxCE,EAAcM,mBAAqBrQ,EAAUsQ,eAC7CP,EAAcQ,gBAAkBvQ,EAAUwQ,YAE1CT,EAAcU,cAAgBzQ,EAAU+S,wBAEJlT,IAAhCkQ,EAAcU,eAChBV,EAAcW,uBAAwB,EACtCX,EAAcU,cAAgB,GAE9BV,EAAcW,uBAAwB,EAGxC2B,EAAStC,cAAgBA,EAClB,IAAS,GAAIsC,EAAU2F,EAAaC,KAE5C,CACDjU,IAAK,0BACLmD,MAAO,SAAiCvH,GACtC,MAAoC,kBAAtBA,EAAM6P,YAA2B7P,EAAM6P,YAAc7P,EAAMsY,sBAE1E,CACDlU,IAAK,uBACLmD,MAAO,SAA8BvH,GACnC,MAAkC,kBAApBA,EAAMiQ,UAAyBjQ,EAAMiQ,UAAYjQ,EAAMuY,mBAEtE,CACDnU,IAAK,kCAMLmD,MAAO,SAAyCiR,GAC9C,IAAInY,EAAYmY,EAAMnY,UAClB4Q,EAAauH,EAAMvH,WACnBC,EAAYsH,EAAMtH,UAClBuB,EAAW,CACbtB,2BAA4BnE,GAa9B,MAV0B,kBAAfiE,GAA2BA,GAAc,IAClDwB,EAAS1B,0BAA4BE,EAAa5Q,EAAU4Q,WAAa9E,GJzlC1C,EI0lC/BsG,EAASxB,WAAaA,GAGC,kBAAdC,GAA0BA,GAAa,IAChDuB,EAASzB,wBAA0BE,EAAY7Q,EAAU6Q,UAAY/E,GJ9lCtC,EI+lC/BsG,EAASvB,UAAYA,GAGG,kBAAfD,GAA2BA,GAAc,GAAKA,IAAe5Q,EAAU4Q,YAAmC,kBAAdC,GAA0BA,GAAa,GAAKA,IAAc7Q,EAAU6Q,UAClKuB,EAGF,OAER,CACDrO,IAAK,kBACLmD,MAAO,SAAyBA,GAC9B,MAAwB,oBAAVA,EAAuBA,EAAQ,WAC3C,OAAOA,KAGV,CACDnD,IAAK,2BACLmD,MAAO,SAAkCnH,EAAWC,GAClD,IAAIsP,EAAcvP,EAAUuP,YACxBjM,EAAStD,EAAUsD,OACnBkJ,EAAoBxM,EAAUwM,kBAC9B8D,EAAiBtQ,EAAUsQ,eAC3BjN,EAAQrD,EAAUqD,MAClBwN,EAAa5Q,EAAU4Q,WACvBd,EAAgB9P,EAAU8P,cAE9B,GAAIR,EAAc,EAAG,CACnB,IAAI8I,EAAc9I,EAAc,EAC5BtH,EAAcqI,EAAiB,EAAI+H,EAAc9P,KAAKE,IAAI4P,EAAa/H,GACvE6B,EAAkBpC,EAAcJ,0BAA0BhH,eAC1D2P,EAAgBvI,EAAcW,uBAAyByB,EAAkB7O,EAASyM,EAAcU,cAAgB,EACpH,OAAOV,EAAcT,6BAA6B5E,yBAAyB,CACzE5C,MAAO0E,EACPzE,cAAe1E,EAAQiV,EACvBtQ,cAAe6I,EACf5I,YAAaA,IAIjB,OAAO,IAER,CACDjE,IAAK,6CACLmD,MAAO,SAAoDnH,EAAWC,GACpE,IAAI4Q,EAAa5Q,EAAU4Q,WAEvB0H,EAAuBzL,EAAKqE,yBAAyBnR,EAAWC,GAEpE,MAAoC,kBAAzBsY,GAAqCA,GAAwB,GAAK1H,IAAe0H,EACnFzL,EAAKoG,gCAAgC,CAC1CjT,UAAWA,EACX4Q,WAAY0H,EACZzH,WAAY,IAIT,OAER,CACD9M,IAAK,0BACLmD,MAAO,SAAiCnH,EAAWC,GACjD,IAAIqD,EAAStD,EAAUsD,OACnBsM,EAAW5P,EAAU4P,SACrBpD,EAAoBxM,EAAUwM,kBAC9BgE,EAAcxQ,EAAUwQ,YACxBnN,EAAQrD,EAAUqD,MAClByN,EAAY7Q,EAAU6Q,UACtBf,EAAgB9P,EAAU8P,cAE9B,GAAIH,EAAW,EAAG,CAChB,IAAI4I,EAAW5I,EAAW,EACtB3H,EAAcuI,EAAc,EAAIgI,EAAWjQ,KAAKE,IAAI+P,EAAUhI,GAC9D4B,EAAoBrC,EAAcT,6BAA6B3G,eAC/D2P,EAAgBvI,EAAcW,uBAAyB0B,EAAoB/O,EAAQ0M,EAAcU,cAAgB,EACrH,OAAOV,EAAcJ,0BAA0BjF,yBAAyB,CACtE5C,MAAO0E,EACPzE,cAAezE,EAASgV,EACxBtQ,cAAe8I,EACf7I,YAAaA,IAIjB,OAAO,IAER,CACDjE,IAAK,yCACLmD,MAAO,SAAgDnH,EAAWC,GAChE,IAAI6Q,EAAY7Q,EAAU6Q,UAEtB2H,EAAsB3L,EAAKmE,wBAAwBjR,EAAWC,GAElE,MAAmC,kBAAxBwY,GAAoCA,GAAuB,GAAK3H,IAAc2H,EAChF3L,EAAKoG,gCAAgC,CAC1CjT,UAAWA,EACX4Q,YAAa,EACbC,UAAW2H,IAIR,SAIJ3L,EA5pCE,CA6pCT,iBAEF,EAAKxH,aAAe,CAClB,aAAc,OACd,iBAAiB,EACjBoO,oBAAoB,EACpBzB,YAAY,EACZC,WAAW,EACXoD,kBC5sCa,SAAkC5S,GA2B/C,IA1BA,IAAIkU,EAAYlU,EAAKkU,UACjBnR,EAAe/C,EAAK+C,aACpB6J,EAA+B5M,EAAK4M,6BACpCb,EAAmB/L,EAAK+L,iBACxBC,EAAkBhM,EAAKgM,gBACvB6G,EAA2B7S,EAAK6S,yBAChCO,EAA6BpT,EAAKoT,2BAClC7H,EAAcvL,EAAKuL,YACnB0H,EAAoBjT,EAAKiT,kBACzBkB,EAASnU,EAAKmU,OACdlH,EAA4BjN,EAAKiN,0BACjCZ,EAAgBrM,EAAKqM,cACrBC,EAAetM,EAAKsM,aACpB8H,EAAapU,EAAKoU,WAClBd,EAA2BtT,EAAKsT,yBAChCJ,EAAuBlT,EAAKkT,qBAC5BC,EAAoBnT,EAAKmT,kBACzB6C,EAAgB,GAMhBC,EAAqBrJ,EAA6BqJ,sBAAwBhJ,EAA0BgJ,qBACpGC,GAAiB3K,IAAgB0K,EAE5BlH,EAAW1C,EAAe0C,GAAYzC,EAAcyC,IAG3D,IAFA,IAAIoH,EAAWlJ,EAA0BxH,yBAAyBsJ,GAEzDF,EAAc9C,EAAkB8C,GAAe7C,EAAiB6C,IAAe,CACtF,IAAIuH,EAAcxJ,EAA6BnH,yBAAyBoJ,GACpEwH,EAAYxH,GAAeqE,EAAqB/M,OAAS0I,GAAeqE,EAAqB7M,MAAQ0I,GAAYoE,EAAkBhN,OAAS4I,GAAYoE,EAAkB9M,KAC1K/E,EAAMyN,EAAW,IAAMF,EACvB1O,OAAQ,EAER+V,GAAiB9B,EAAW9S,GAC9BnB,EAAQiU,EAAW9S,GAIfuR,IAA6BA,EAAyBmB,IAAIjF,EAAUF,GAItE1O,EAAQ,CACNS,OAAQ,OACR0V,KAAM,EACN3E,SAAU,WACV4E,IAAK,EACL5V,MAAO,SAGTR,EAAQ,CACNS,OAAQuV,EAASpR,KACjBuR,KAAMF,EAAYtR,OAASsO,EAC3BzB,SAAU,WACV4E,IAAKJ,EAASrR,OAASwO,EACvB3S,MAAOyV,EAAYrR,MAErBqP,EAAW9S,GAAOnB,GAItB,IAAIqW,EAAqB,CACvB3H,YAAaA,EACbtD,YAAaA,EACb8K,UAAWA,EACX/U,IAAKA,EACL6S,OAAQA,EACRpF,SAAUA,EACV5O,MAAOA,GAELsW,OAAe,GAWdxD,IAAqB1H,GAAiB6H,GAA+BE,EAQxEmD,EAAe1T,EAAayT,IAPvBtC,EAAU5S,KACb4S,EAAU5S,GAAOyB,EAAayT,IAGhCC,EAAevC,EAAU5S,IAMP,MAAhBmV,IAAyC,IAAjBA,GAQ5BT,EAAczZ,KAAKka,GAIvB,OAAOT,GDkmCP9E,cAAe,WACfC,eAAgB,GAChBqE,oBAAqB,IACrBC,iBAAkB,GAClBpF,iBDntCa,SAAuBqG,GACpC,KAAK3R,GAAiB,IAATA,GAAc2R,IACrBC,EAAW,CACb,IAAIC,EAAYC,SAASC,cAAc,OACvCF,EAAUzW,MAAMwR,SAAW,WAC3BiF,EAAUzW,MAAMoW,IAAM,UACtBK,EAAUzW,MAAMQ,MAAQ,OACxBiW,EAAUzW,MAAMS,OAAS,OACzBgW,EAAUzW,MAAMuS,SAAW,SAC3BmE,SAASE,KAAKC,YAAYJ,GAC1B7R,EAAO6R,EAAUK,YAAcL,EAAUjC,YACzCkC,SAASE,KAAKG,YAAYN,GAI9B,OAAO7R,GCqsCPsM,kBAprCe,WACf,OAAO,MAorCPkB,SAAU,aACVyC,0BAA2B,aAC3BtJ,kBAAmB,aACnBoH,oBAAqB,EACrBC,sBJltCa,SAAsC/S,GACnD,IAAIuD,EAAYvD,EAAKuD,UACjBiQ,EAAqBxT,EAAKwT,mBAC1BC,EAAkBzT,EAAKyT,gBACvBC,EAAa1T,EAAK0T,WAClBC,EAAY3T,EAAK2T,UAErB,OAAIF,IAAoBpK,EACf,CACLwK,mBAAoBhO,KAAKC,IAAI,EAAG4N,GAChCI,kBAAmBjO,KAAKE,IAAIxC,EAAY,EAAGoQ,EAAYH,IAGlD,CACLK,mBAAoBhO,KAAKC,IAAI,EAAG4N,EAAaF,GAC7CM,kBAAmBjO,KAAKE,IAAIxC,EAAY,EAAGoQ,KIosC/CX,iBAAkB,GAClB5S,KAAM,OACNiU,2BAvsCiD,IAwsCjDvK,kBAAmB,OACnB8D,gBAAiB,EACjBE,aAAc,EACd3N,MAAO,GACP8B,SAAU,EACVgR,mBAAmB,GAErB,EAAK5S,UAAoD,KAmLzD,mBAAS,GACM,QEz5CJ,EAA2B,ECmBtC,IAAI,EAAQ,SAAU8J,GAGpB,SAASgN,EAAMja,GACb,IAAgBH,KAAMoa,GAEtB,IAAI9M,EAAQ,IAA2BtN,MAAOoa,EAAMzU,WAAa,IAAuByU,IAAQ1a,KAAKM,KAAMG,IAU3G,OARAmN,EAAMvN,MAAQ,CACZsa,eAAgB,GAElB/M,EAAMgN,cAAgBhN,EAAMgN,cAAc7Z,KAAK6M,GAC/CA,EAAMiN,WAAajN,EAAMiN,WAAW9Z,KAAK6M,GACzCA,EAAMqC,UAAYrC,EAAMqC,UAAUlP,KAAK6M,GACvCA,EAAMkN,mBAAqBlN,EAAMkN,mBAAmB/Z,KAAK6M,GACzDA,EAAMmN,QAAUnN,EAAMmN,QAAQha,KAAK6M,GAC5BA,EA6gBT,OA5hBA,IAAU8M,EAAOhN,GAkBjB,IAAagN,EAAO,CAAC,CACnB7V,IAAK,kBACLmD,MAAO,WACD1H,KAAKqN,MACPrN,KAAKqN,KAAK6F,gBAKb,CACD3O,IAAK,kBACLmD,MAAO,SAAyBzE,GAC9B,IAAI2O,EAAY3O,EAAK2O,UACjBlN,EAAQzB,EAAKyB,MAEjB,OAAI1E,KAAKqN,KACqBrN,KAAKqN,KAAKqN,iBAAiB,CACrD9I,UAAWA,EACXI,SAAUtN,IAE0B2M,UAKjC,IAIR,CACD9M,IAAK,gCACLmD,MAAO,SAAuCC,GAC5C,IAAImK,EAAcnK,EAAMmK,YACpBE,EAAWrK,EAAMqK,SAEjBhS,KAAKqN,MACPrN,KAAKqN,KAAKsN,8BAA8B,CACtC3I,SAAUA,EACVF,YAAaA,MAMlB,CACDvN,IAAK,iBACLmD,MAAO,WACD1H,KAAKqN,MACPrN,KAAKqN,KAAKuN,oBAKb,CACDrW,IAAK,oBACLmD,MAAO,WACL,IAAIS,EAAQtI,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,GAC5Egb,EAAoB1S,EAAM2J,YAC1BA,OAAoC1R,IAAtBya,EAAkC,EAAIA,EACpDC,EAAiB3S,EAAM6J,SACvBA,OAA8B5R,IAAnB0a,EAA+B,EAAIA,EAE9C9a,KAAKqN,MACPrN,KAAKqN,KAAKmK,kBAAkB,CAC1BxF,SAAUA,EACVF,YAAaA,MAMlB,CACDvN,IAAK,sBACLmD,MAAO,WACL,IAAIhD,EAAQ7E,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,EAE5EG,KAAKqN,MACPrN,KAAKqN,KAAKmK,kBAAkB,CAC1BxF,SAAUtN,MAMf,CACDH,IAAK,mBACLmD,MAAO,WACL,IAAI2J,EAAYxR,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,EAEhFG,KAAKqN,MACPrN,KAAKqN,KAAK0N,iBAAiB,CACzB1J,UAAWA,MAMhB,CACD9M,IAAK,cACLmD,MAAO,WACL,IAAIhD,EAAQ7E,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,EAE5EG,KAAKqN,MACPrN,KAAKqN,KAAK2N,aAAa,CACrBlJ,YAAa,EACbE,SAAUtN,MAIf,CACDH,IAAK,oBACLmD,MAAO,WACL,GAAI1H,KAAKqN,KAAM,CACb,IAAI4N,EAAQ,sBAAYjb,KAAKqN,MAEzBuK,EAAcqD,EAAMrD,aAAe,EAEvC,OADkBqD,EAAMf,aAAe,GAClBtC,EAGvB,OAAO,IAER,CACDrT,IAAK,oBACLmD,MAAO,WACL1H,KAAKkb,uBAEN,CACD3W,IAAK,qBACLmD,MAAO,WACL1H,KAAKkb,uBAEN,CACD3W,IAAK,SACLmD,MAAO,WACL,IAAIkM,EAAS5T,KAETuS,EAASvS,KAAKG,MACdmE,EAAWiO,EAAOjO,SAClBpB,EAAYqP,EAAOrP,UACnBiY,EAAgB5I,EAAO4I,cACvBC,EAAgB7I,EAAO6I,cACvB3G,EAAYlC,EAAOkC,UACnB4G,EAAe9I,EAAO8I,aACtBC,EAAoB/I,EAAO+I,kBAC3BzX,EAAS0O,EAAO1O,OAChBwQ,EAAK9B,EAAO8B,GACZkH,EAAiBhJ,EAAOgJ,eACxBC,EAAejJ,EAAOiJ,aACtBC,EAAWlJ,EAAOkJ,SAClB1U,EAAgBwL,EAAOxL,cACvB3D,EAAQmP,EAAOnP,MACfQ,EAAQ2O,EAAO3O,MACfyW,EAAiBra,KAAKD,MAAMsa,eAC5BqB,EAAsBP,EAAgBtX,EAASA,EAASwX,EACxDM,EAAmC,oBAAjBH,EAA8BA,EAAa,CAC/D9W,OAAQ,IACL8W,EACDI,EAAqC,oBAAbH,EAA0BA,EAAS,CAC7D/W,OAAQ,IACL+W,EAaL,OAXAzb,KAAK6b,oBAAsB,GAC3B,WAAeC,QAAQxX,GAAUyX,SAAQ,SAAUC,EAAQtX,GACzD,IAAIuX,EAAarI,EAAOsI,uBAAuBF,EAAQA,EAAO7b,MAAMiD,OAEpEwQ,EAAOiI,oBAAoBnX,GAAS,IAAS,CAC3CiR,SAAU,UACTsG,MAKE,gBAAoB,MAAO,CAChC,aAAcjc,KAAKG,MAAM,cACzB,kBAAmBH,KAAKG,MAAM,mBAC9B,gBAAiB,WAAe2b,QAAQxX,GAAU7E,OAClD,gBAAiBO,KAAKG,MAAMgQ,SAC5BjN,UAAW,YAAK,0BAA2BA,GAC3CmR,GAAIA,EACJhR,KAAM,OACND,MAAOA,IACL+X,GAAiBG,EAAkB,CACrCpY,UAAW,YAAK,qCAAsCyY,GACtDxY,QAASnD,KAAKmc,oBACd/Y,MAAO,IAAS,CACdS,OAAQwX,EACR1F,SAAU,SACVyG,aAAc/B,EACdzW,MAAOA,GACNgY,KACD,gBAAoB,EAAM,IAAS,GAAI5b,KAAKG,MAAO,CACrD,gBAAiB,KACjB8T,oBAAoB,EACpB/Q,UAAW,YAAK,gCAAiCkY,GACjDpV,aAAchG,KAAKua,WACnBvK,YAAapM,EACbkM,YAAa,EACbjM,OAAQ6X,EACRrH,QAAIjU,EACJkU,kBAAmBiH,EACnB/F,SAAUxV,KAAK2P,UACfhB,kBAAmB3O,KAAKwa,mBACxB/K,IAAKzP,KAAKya,QACVpX,KAAM,WACNgX,eAAgBA,EAChBtJ,YAAahK,EACb3D,MAAO,IAAS,GAAIqR,EAAW,CAC7BU,UAAW,iBAIhB,CACD5Q,IAAK,gBACLmD,MAAO,SAAuByD,GAC5B,IAAI6Q,EAAS7Q,EAAM6Q,OACflK,EAAc3G,EAAM2G,YACpBtD,EAAcrD,EAAMqD,YACpB4I,EAASjM,EAAMiM,OACfpS,EAAUmG,EAAMnG,QAChBgN,EAAW7G,EAAM6G,SACjBqK,EAAgBrc,KAAKG,MAAMkc,cAC3BC,EAAgBN,EAAO7b,MACvB2F,EAAiBwW,EAAcxW,eAC/BE,EAAesW,EAActW,aAC7B9C,EAAYoZ,EAAcpZ,UAC1BqZ,EAAaD,EAAcC,WAC3BrY,EAAUoY,EAAcpY,QACxBmQ,EAAKiI,EAAcjI,GAMnBqF,EAAe1T,EAAa,CAC9BC,SANaH,EAAe,CAC5ByW,WAAYA,EACZrY,QAASA,EACTc,QAASA,IAITuX,WAAYA,EACZzK,YAAaA,EACb5N,QAASA,EACTsK,YAAaA,EACb4I,OAAQA,EACRpS,QAASA,EACTgN,SAAUA,IAWR5O,EAAQpD,KAAK6b,oBAAoB/J,GACjCtN,EAAgC,kBAAjBkV,EAA4BA,EAAe,KAI9D,OAAO,gBAAoB,MAAO,CAChC,gBAAiB5H,EAAc,EAC/B,mBAAoBuC,EACpBnR,UAAW,YAAK,qCAAsCA,GACtDqB,IAAK,MAAQyN,EAAW,OAAcF,EACtC3M,QAlBY,SAAiBC,GAC7BiX,GAAiBA,EAAc,CAC7BE,WAAYA,EACZrY,QAASA,EACTkB,MAAOA,KAeT/B,KAAM,WACND,MAAOA,EACPoB,MAAOA,GACNkV,KAEJ,CACDnV,IAAK,gBACLmD,MAAO,SAAuB4D,GAC5B,IAAI0Q,EAAS1Q,EAAM0Q,OACftX,EAAQ4G,EAAM5G,MACdoO,EAAU9S,KAAKG,MACfqc,EAAkB1J,EAAQ0J,gBAC1BC,EAAc3J,EAAQ2J,YACtBC,EAAgB5J,EAAQ4J,cACxBC,EAAO7J,EAAQ6J,KACfvY,EAAS0O,EAAQ1O,OACjBV,EAAgBoP,EAAQpP,cACxBkZ,EAAiBZ,EAAO7b,MACxBoc,EAAaK,EAAeL,WAC5BrY,EAAU0Y,EAAe1Y,QACzBiC,EAAuByW,EAAezW,qBACtC0W,EAAcD,EAAeC,YAC7BvW,EAAiBsW,EAAetW,eAChC+N,EAAKuI,EAAevI,GACpBlQ,EAAQyY,EAAezY,MACvB2Y,GAAeD,GAAeF,EAC9BhZ,EAAa,YAAK,wCAAyC6Y,EAAiBR,EAAO7b,MAAMqc,gBAAiB,CAC5GO,8CAA+CD,IAG7C1Z,EAAQpD,KAAKkc,uBAAuBF,EAAQ,IAAS,GAAIS,EAAaT,EAAO7b,MAAMsc,cAEnFO,EAAiB1W,EAAe,CAClCiW,WAAYA,EACZrY,QAASA,EACT2Y,YAAaA,EACb1Y,MAAOA,EACPC,OAAQA,EACRV,cAAeA,IAEbuZ,OAAgB,EAChBC,OAAkB,EAClBC,OAAiB,EACjBC,OAAiB,EACjBC,OAAkB,EAEtB,GAAIP,GAAeJ,EAAe,CAEhC,IAGIY,EAHkBlZ,IAAWF,EAGQiC,EAAuBzC,IAAkB,EAAcF,KAAO,EAAcD,IAAM,EAAcC,KAErI2B,EAAU,SAAiBC,GAC7B0X,GAAeH,EAAK,CAClBxW,qBAAsBA,EACtBf,MAAOA,EACPhB,OAAQF,EACRR,cAAe4Z,IAEjBZ,GAAiBA,EAAc,CAC7BH,WAAYA,EACZrY,QAASA,EACTkB,MAAOA,KAUXiY,EAAkBrB,EAAO7b,MAAM,eAAiBgE,GAASD,EACzDkZ,EAAiB,OACjBD,EAAiB,EACjBF,EAAgB9X,EAChB+X,EAVgB,SAAmB9X,GACf,UAAdA,EAAMb,KAAiC,MAAda,EAAMb,KACjCY,EAAQC,IAkBd,OAPIhB,IAAWF,IACbkZ,EAAiB1Z,IAAkB,EAAcH,IAAM,YAAc,cAMhE,gBAAoB,MAAO,CAChC,aAAc8Z,EACd,YAAaD,EACbla,UAAWS,EACX0Q,GAAIA,EACJ9P,IAAK,aAAeG,EACpBS,QAAS8X,EACTM,UAAWL,EACX7Z,KAAM,eACND,MAAOA,EACP8B,SAAUiY,GACTH,KAEJ,CACDzY,IAAK,aACLmD,MAAO,SAAoB6D,GACzB,IAAIkM,EAASzX,KAET0E,EAAQ6G,EAAMyG,SACdxD,EAAcjD,EAAMiD,YACpBjK,EAAMgH,EAAMhH,IACZ6S,EAAS7L,EAAM6L,OACfhU,EAAQmI,EAAMnI,MACd6P,EAAUjT,KAAKG,MACfmE,EAAW2O,EAAQ3O,SACnBK,EAAasO,EAAQtO,WACrBC,EAAmBqO,EAAQrO,iBAC3BG,EAAkBkO,EAAQlO,gBAC1BD,EAAiBmO,EAAQnO,eACzBD,EAAgBoO,EAAQpO,cACxB2W,EAAevI,EAAQuI,aACvBgC,EAAYvK,EAAQuK,UACpBC,EAAcxK,EAAQwK,YACtBhC,EAAWxI,EAAQwI,SACnBpB,EAAiBra,KAAKD,MAAMsa,eAC5BsB,EAAmC,oBAAjBH,EAA8BA,EAAa,CAC/D9W,MAAOA,IACJ8W,EACDI,EAAqC,oBAAbH,EAA0BA,EAAS,CAC7D/W,MAAOA,IACJ+W,EACDzW,EAAUwY,EAAU,CACtB9Y,MAAOA,IAELvB,EAAU,WAAe2Y,QAAQxX,GAAUoZ,KAAI,SAAU1B,EAAQlK,GACnE,OAAO2F,EAAO6C,cAAc,CAC1B0B,OAAQA,EACRlK,YAAaA,EACbtD,YAAaA,EACb4I,OAAQA,EACRpS,QAASA,EACTgN,SAAUtN,EACV2V,eAAgBA,OAGhBnX,EAAY,YAAK,+BAAgCyY,GAEjDgC,EAAiB,IAAS,GAAIva,EAAO,CACvCS,OAAQ7D,KAAK4d,cAAclZ,GAC3BiR,SAAU,SACVyG,aAAc/B,GACbuB,GAEH,OAAO6B,EAAY,CACjBva,UAAWA,EACXC,QAASA,EACTuB,MAAOA,EACP8J,YAAaA,EACbjK,IAAKA,EACLI,WAAYA,EACZC,iBAAkBA,EAClBG,gBAAiBA,EACjBD,eAAgBA,EAChBD,cAAeA,EACfG,QAASA,EACT5B,MAAOua,MAOV,CACDpZ,IAAK,yBACLmD,MAAO,SAAgCsU,GACrC,IAAI6B,EAAche,UAAUJ,OAAS,QAAsBW,IAAjBP,UAAU,GAAmBA,UAAU,GAAK,GAClFie,EAAY9B,EAAO7b,MAAMiG,SAAW,IAAM4V,EAAO7b,MAAMkG,WAAa,IAAM2V,EAAO7b,MAAMyD,MAAQ,KAE/FR,EAAQ,IAAS,GAAIya,EAAa,CACpCE,KAAMD,EACNE,OAAQF,EACRG,WAAYH,IAWd,OARI9B,EAAO7b,MAAMsV,WACfrS,EAAMqS,SAAWuG,EAAO7b,MAAMsV,UAG5BuG,EAAO7b,MAAM+d,WACf9a,EAAM8a,SAAWlC,EAAO7b,MAAM+d,UAGzB9a,IAER,CACDmB,IAAK,oBACLmD,MAAO,WACL,IAAIyW,EAASne,KAETqT,EAAUrT,KAAKG,MACfmE,EAAW+O,EAAQ/O,SAGvB,OAFoB+O,EAAQ8H,cACA,GAAK,WAAeW,QAAQxX,IAC3CoZ,KAAI,SAAU1B,EAAQtX,GACjC,OAAOyZ,EAAOC,cAAc,CAC1BpC,OAAQA,EACRtX,MAAOA,SAIZ,CACDH,IAAK,gBACLmD,MAAO,SAAuBsK,GAC5B,IAAI5B,EAAYpQ,KAAKG,MAAMiQ,UAC3B,MAA4B,oBAAdA,EAA2BA,EAAU,CACjD1L,MAAOsN,IACJ5B,IAEN,CACD7L,IAAK,YACLmD,MAAO,SAAmB8D,GACxB,IAAImM,EAAenM,EAAMmM,aACrBE,EAAerM,EAAMqM,aACrBxG,EAAY7F,EAAM6F,WAEtBmE,EADexV,KAAKG,MAAMqV,UACjB,CACPmC,aAAcA,EACdE,aAAcA,EACdxG,UAAWA,MAGd,CACD9M,IAAK,qBACLmD,MAAO,SAA4B0Q,GACjC,IAAIlJ,EAAwBkJ,EAAMlJ,sBAC9BE,EAAuBgJ,EAAMhJ,qBAC7BE,EAAgB8I,EAAM9I,cACtBC,EAAe6I,EAAM7I,cAEzB8O,EADqBre,KAAKG,MAAMke,gBACjB,CACbvH,mBAAoB5H,EACpB6H,kBAAmB3H,EACnBuH,WAAYrH,EACZsH,UAAWrH,MAGd,CACDhL,IAAK,UACLmD,MAAO,SAAiB+H,GACtBzP,KAAKqN,KAAOoC,IAEb,CACDlL,IAAK,qBACLmD,MAAO,WACL,IAAI2S,EAAiBra,KAAKse,oBAC1Bte,KAAKK,SAAS,CACZga,eAAgBA,QAKfD,EA7hBG,CA8hBV,iBAEF,EAAMvU,aAAe,CACnBsV,eAAe,EACfzC,iBAAkB,GAClB2C,aAAc,EACdoB,YAAa,GACblB,eAAgB,WACd,OAAO,MAET8C,eAAgB,WACd,OAAO,MAET7I,SAAU,WACR,OAAO,MAETQ,sBDzjBa,SAAsC/S,GACnD,IAAIuD,EAAYvD,EAAKuD,UACjBiQ,EAAqBxT,EAAKwT,mBAC1BC,EAAkBzT,EAAKyT,gBACvBC,EAAa1T,EAAK0T,WAClBC,EAAY3T,EAAK2T,UAMrB,OAFAH,EAAqB3N,KAAKC,IAAI,EAAG0N,GAE7BC,IAAoB,EACf,CACLI,mBAAoBhO,KAAKC,IAAI,EAAG4N,EAAa,GAC7CI,kBAAmBjO,KAAKE,IAAIxC,EAAY,EAAGoQ,EAAYH,IAGlD,CACLK,mBAAoBhO,KAAKC,IAAI,EAAG4N,EAAaF,GAC7CM,kBAAmBjO,KAAKE,IAAIxC,EAAY,EAAGoQ,EAAY,KCuiB3DX,iBAAkB,GAClBwH,YAAahZ,EACb6W,kBAAmBtY,EACnByY,SAAU,GACV1O,kBAAmB,OACnBhG,eAAgB,EAChB3D,MAAO,IAEM,QACf,EAAME,UAoNF,GChyBJ,qE,2JCSI,G,MAAY,SAAU8J,GAGxB,SAASmR,IACP,IAAItb,EAEAub,EAAOlR,EAAOmR,EAElB,IAAgBze,KAAMue,GAEtB,IAAK,IAAIG,EAAO7e,UAAUJ,OAAQkf,EAAO3S,MAAM0S,GAAOE,EAAO,EAAGA,EAAOF,EAAME,IAC3ED,EAAKC,GAAQ/e,UAAU+e,GAGzB,OAAeJ,EAASlR,EAAQ,IAA2BtN,MAAOiD,EAAOsb,EAAU5Y,WAAa,IAAuB4Y,IAAY7e,KAAKkG,MAAM3C,EAAM,CAACjD,MAAM6e,OAAOF,KAAiBrR,EAAMvN,MAAQ,CAC/L8D,OAAQyJ,EAAMnN,MAAM2e,eAAiB,EACrClb,MAAO0J,EAAMnN,MAAM4e,cAAgB,GAClCzR,EAAM0R,UAAY,WACnB,IAAIC,EAAc3R,EAAMnN,MACpB+e,EAAgBD,EAAYC,cAC5BC,EAAeF,EAAYE,aAC3BC,EAAWH,EAAYG,SAE3B,GAAI9R,EAAM+R,YAAa,CAIrB,IAAIC,EAAUhS,EAAM+R,YAAYE,cAAgB,EAE5CC,EAASlS,EAAM+R,YAAYnF,aAAe,EAI1CuF,GAFMnS,EAAMoS,SAAWzV,QAEV0V,iBAAiBrS,EAAM+R,cAAgB,GAEpDO,EAAcC,SAASJ,EAAOG,YAAa,KAAO,EAClDxD,EAAeyD,SAASJ,EAAOrD,aAAc,KAAO,EACpD0D,EAAaD,SAASJ,EAAOK,WAAY,KAAO,EAChDC,EAAgBF,SAASJ,EAAOM,cAAe,KAAO,EACtDC,EAAYV,EAAUQ,EAAaC,EACnCE,EAAWT,EAASI,EAAcxD,IAEjC8C,GAAiB5R,EAAMvN,MAAM8D,SAAWmc,IAAcb,GAAgB7R,EAAMvN,MAAM6D,QAAUqc,KAC/F3S,EAAMjN,SAAS,CACbwD,OAAQyb,EAAUQ,EAAaC,EAC/Bnc,MAAO4b,EAASI,EAAcxD,IAGhCgD,EAAS,CACPvb,OAAQyb,EACR1b,MAAO4b,OAIZlS,EAAMmN,QAAU,SAAUyF,GAC3B5S,EAAM6S,WAAaD,GAzCdzB,EA0CJD,EAAQ,IAA2BlR,EAAOmR,GAkF/C,OAzIA,IAAUF,EAAWnR,GA2DrB,IAAamR,EAAW,CAAC,CACvBha,IAAK,oBACLmD,MAAO,WACL,IAAI0Y,EAAQpgB,KAAKG,MAAMigB,MAEnBpgB,KAAKmgB,YAAcngB,KAAKmgB,WAAWE,YAAcrgB,KAAKmgB,WAAWE,WAAWC,eAAiBtgB,KAAKmgB,WAAWE,WAAWC,cAAcC,aAAevgB,KAAKmgB,WAAWE,sBAAsBrgB,KAAKmgB,WAAWE,WAAWC,cAAcC,YAAYC,cAIlPxgB,KAAKqf,YAAcrf,KAAKmgB,WAAWE,WACnCrgB,KAAK0f,QAAU1f,KAAKmgB,WAAWE,WAAWC,cAAcC,YAGxDvgB,KAAKygB,qBAAuB,YAA0BL,EAAOpgB,KAAK0f,SAElE1f,KAAKygB,qBAAqBC,kBAAkB1gB,KAAKqf,YAAarf,KAAKgf,WAEnEhf,KAAKgf,eAGR,CACDza,IAAK,uBACLmD,MAAO,WACD1H,KAAKygB,sBAAwBzgB,KAAKqf,aACpCrf,KAAKygB,qBAAqBE,qBAAqB3gB,KAAKqf,YAAarf,KAAKgf,aAGzE,CACDza,IAAK,SACLmD,MAAO,WACL,IAAI6K,EAASvS,KAAKG,MACdmE,EAAWiO,EAAOjO,SAClBpB,EAAYqP,EAAOrP,UACnBgc,EAAgB3M,EAAO2M,cACvBC,EAAe5M,EAAO4M,aACtB/b,EAAQmP,EAAOnP,MACf0Q,EAAS9T,KAAKD,MACd8D,EAASiQ,EAAOjQ,OAChBD,EAAQkQ,EAAOlQ,MAIfgd,EAAa,CACfjL,SAAU,WAERkL,EAAc,GAyBlB,OAvBK3B,IACH0B,EAAW/c,OAAS,EACpBgd,EAAYhd,OAASA,GAGlBsb,IACHyB,EAAWhd,MAAQ,EACnBid,EAAYjd,MAAQA,GAgBf,gBAAoB,MAAO,CAChCV,UAAWA,EACXuM,IAAKzP,KAAKya,QACVrX,MAAO,IAAS,GAAIwd,EAAYxd,IAC/BkB,EAASuc,QAITtC,EA1IO,CA2Id,kBAEF,EAAU1Y,aAAe,CACvBuZ,SAAU,aACVF,eAAe,EACfC,cAAc,EACd/b,MAAO,IAET,EAAUE,UAAoD,KA4B/C,QCxLf","file":"static/js/6.a85aad64.chunk.js","sourcesContent":["function toVal(mix) {\n  var k,\n      y,\n      str = '';\n\n  if (mix) {\n    if (typeof mix === 'object') {\n      if (!!mix.push) {\n        for (k = 0; k < mix.length; k++) {\n          if (mix[k] && (y = toVal(mix[k]))) {\n            str && (str += ' ');\n            str += y;\n          }\n        }\n      } else {\n        for (k in mix) {\n          if (mix[k] && (y = toVal(k))) {\n            str && (str += ' ');\n            str += y;\n          }\n        }\n      }\n    } else if (typeof mix !== 'boolean' && !mix.call) {\n      str && (str += ' ');\n      str += mix;\n    }\n  }\n\n  return str;\n}\n\nexport default function () {\n  var i = 0,\n      x,\n      str = '';\n\n  while (i < arguments.length) {\n    if (x = toVal(arguments[i++])) {\n      str && (str += ' ');\n      str += x;\n    }\n  }\n\n  return str;\n}","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\nfunction componentWillMount() {\n  // Call this.constructor.gDSFP to support sub-classes.\n  var state = this.constructor.getDerivedStateFromProps(this.props, this.state);\n\n  if (state !== null && state !== undefined) {\n    this.setState(state);\n  }\n}\n\nfunction componentWillReceiveProps(nextProps) {\n  // Call this.constructor.gDSFP to support sub-classes.\n  // Use the setState() updater to ensure state isn't stale in certain edge cases.\n  function updater(prevState) {\n    var state = this.constructor.getDerivedStateFromProps(nextProps, prevState);\n    return state !== null && state !== undefined ? state : null;\n  } // Binding \"this\" is important for shallow renderer support.\n\n\n  this.setState(updater.bind(this));\n}\n\nfunction componentWillUpdate(nextProps, nextState) {\n  try {\n    var prevProps = this.props;\n    var prevState = this.state;\n    this.props = nextProps;\n    this.state = nextState;\n    this.__reactInternalSnapshotFlag = true;\n    this.__reactInternalSnapshot = this.getSnapshotBeforeUpdate(prevProps, prevState);\n  } finally {\n    this.props = prevProps;\n    this.state = prevState;\n  }\n} // React may warn about cWM/cWRP/cWU methods being deprecated.\n// Add a flag to suppress these warnings for this special case.\n\n\ncomponentWillMount.__suppressDeprecationWarning = true;\ncomponentWillReceiveProps.__suppressDeprecationWarning = true;\ncomponentWillUpdate.__suppressDeprecationWarning = true;\n\nfunction polyfill(Component) {\n  var prototype = Component.prototype;\n\n  if (!prototype || !prototype.isReactComponent) {\n    throw new Error('Can only polyfill class components');\n  }\n\n  if (typeof Component.getDerivedStateFromProps !== 'function' && typeof prototype.getSnapshotBeforeUpdate !== 'function') {\n    return Component;\n  } // If new component APIs are defined, \"unsafe\" lifecycles won't be called.\n  // Error if any of these lifecycles are present,\n  // Because they would work differently between older and newer (16.3+) versions of React.\n\n\n  var foundWillMountName = null;\n  var foundWillReceivePropsName = null;\n  var foundWillUpdateName = null;\n\n  if (typeof prototype.componentWillMount === 'function') {\n    foundWillMountName = 'componentWillMount';\n  } else if (typeof prototype.UNSAFE_componentWillMount === 'function') {\n    foundWillMountName = 'UNSAFE_componentWillMount';\n  }\n\n  if (typeof prototype.componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'componentWillReceiveProps';\n  } else if (typeof prototype.UNSAFE_componentWillReceiveProps === 'function') {\n    foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';\n  }\n\n  if (typeof prototype.componentWillUpdate === 'function') {\n    foundWillUpdateName = 'componentWillUpdate';\n  } else if (typeof prototype.UNSAFE_componentWillUpdate === 'function') {\n    foundWillUpdateName = 'UNSAFE_componentWillUpdate';\n  }\n\n  if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {\n    var componentName = Component.displayName || Component.name;\n    var newApiName = typeof Component.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';\n    throw Error('Unsafe legacy lifecycles will not be called for components using new component APIs.\\n\\n' + componentName + ' uses ' + newApiName + ' but also contains the following legacy lifecycles:' + (foundWillMountName !== null ? '\\n  ' + foundWillMountName : '') + (foundWillReceivePropsName !== null ? '\\n  ' + foundWillReceivePropsName : '') + (foundWillUpdateName !== null ? '\\n  ' + foundWillUpdateName : '') + '\\n\\nThe above lifecycles should be removed. Learn more about this warning here:\\n' + 'https://fb.me/react-async-component-lifecycle-hooks');\n  } // React <= 16.2 does not support static getDerivedStateFromProps.\n  // As a workaround, use cWM and cWRP to invoke the new static lifecycle.\n  // Newer versions of React will ignore these lifecycles if gDSFP exists.\n\n\n  if (typeof Component.getDerivedStateFromProps === 'function') {\n    prototype.componentWillMount = componentWillMount;\n    prototype.componentWillReceiveProps = componentWillReceiveProps;\n  } // React <= 16.2 does not support getSnapshotBeforeUpdate.\n  // As a workaround, use cWU to invoke the new lifecycle.\n  // Newer versions of React will ignore that lifecycle if gSBU exists.\n\n\n  if (typeof prototype.getSnapshotBeforeUpdate === 'function') {\n    if (typeof prototype.componentDidUpdate !== 'function') {\n      throw new Error('Cannot polyfill getSnapshotBeforeUpdate() for components that do not define componentDidUpdate() on the prototype');\n    }\n\n    prototype.componentWillUpdate = componentWillUpdate;\n    var componentDidUpdate = prototype.componentDidUpdate;\n\n    prototype.componentDidUpdate = function componentDidUpdatePolyfill(prevProps, prevState, maybeSnapshot) {\n      // 16.3+ will not execute our will-update method;\n      // It will pass a snapshot value to did-update though.\n      // Older versions will require our polyfilled will-update value.\n      // We need to handle both cases, but can't just check for the presence of \"maybeSnapshot\",\n      // Because for <= 15.x versions this might be a \"prevContext\" object.\n      // We also can't just check \"__reactInternalSnapshot\",\n      // Because get-snapshot might return a falsy value.\n      // So check for the explicit __reactInternalSnapshotFlag flag to determine behavior.\n      var snapshot = this.__reactInternalSnapshotFlag ? this.__reactInternalSnapshot : maybeSnapshot;\n      componentDidUpdate.call(this, prevProps, prevState, snapshot);\n    };\n  }\n\n  return Component;\n}\n\nexport { polyfill };","module.exports = {\n  \"default\": require(\"core-js/library/fn/object/keys\"),\n  __esModule: true\n};","require('../../modules/es6.object.keys');\n\nmodule.exports = require('../../modules/_core').Object.keys;","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\n\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});","\"use strict\";\n\nexports.__esModule = true;\n\nexports.default = function (obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n};","import * as React from 'react';\nexport default function defaultHeaderRowRenderer(_ref) {\n  var className = _ref.className,\n      columns = _ref.columns,\n      style = _ref.style;\n  return React.createElement('div', {\n    className: className,\n    role: 'row',\n    style: style\n  }, columns);\n}\ndefaultHeaderRowRenderer.propTypes = process.env.NODE_ENV === 'production' ? null : bpfrpt_proptype_HeaderRowRendererParams === PropTypes.any ? {} : bpfrpt_proptype_HeaderRowRendererParams;\nimport { bpfrpt_proptype_HeaderRowRendererParams } from './types';\nimport PropTypes from 'prop-types';","var SortDirection = {\n  /**\n   * Sort items in ascending order.\n   * This means arranging from the lowest value to the highest (e.g. a-z, 0-9).\n   */\n  ASC: 'ASC',\n\n  /**\n   * Sort items in descending order.\n   * This means arranging from the highest value to the lowest (e.g. z-a, 9-0).\n   */\n  DESC: 'DESC'\n};\nexport default SortDirection;","import clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport SortDirection from './SortDirection';\n/**\n * Displayed beside a header to indicate that a Table is currently sorted by this column.\n */\n\nexport default function SortIndicator(_ref) {\n  var sortDirection = _ref.sortDirection;\n  var classNames = clsx('ReactVirtualized__Table__sortableHeaderIcon', {\n    'ReactVirtualized__Table__sortableHeaderIcon--ASC': sortDirection === SortDirection.ASC,\n    'ReactVirtualized__Table__sortableHeaderIcon--DESC': sortDirection === SortDirection.DESC\n  });\n  return React.createElement('svg', {\n    className: classNames,\n    width: 18,\n    height: 18,\n    viewBox: '0 0 24 24'\n  }, sortDirection === SortDirection.ASC ? React.createElement('path', {\n    d: 'M7 14l5-5 5 5z'\n  }) : React.createElement('path', {\n    d: 'M7 10l5 5 5-5z'\n  }), React.createElement('path', {\n    d: 'M0 0h24v24H0z',\n    fill: 'none'\n  }));\n}\nSortIndicator.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  sortDirection: PropTypes.oneOf([SortDirection.ASC, SortDirection.DESC])\n} : {};","import * as React from 'react';\nimport SortIndicator from './SortIndicator';\n/**\n * Default table header renderer.\n */\n\nexport default function defaultHeaderRenderer(_ref) {\n  var dataKey = _ref.dataKey,\n      label = _ref.label,\n      sortBy = _ref.sortBy,\n      sortDirection = _ref.sortDirection;\n  var showSortIndicator = sortBy === dataKey;\n  var children = [React.createElement('span', {\n    className: 'ReactVirtualized__Table__headerTruncatedText',\n    key: 'label',\n    title: typeof label === 'string' ? label : null\n  }, label)];\n\n  if (showSortIndicator) {\n    children.push(React.createElement(SortIndicator, {\n      key: 'SortIndicator',\n      sortDirection: sortDirection\n    }));\n  }\n\n  return children;\n}\ndefaultHeaderRenderer.propTypes = process.env.NODE_ENV === 'production' ? null : bpfrpt_proptype_HeaderRendererParams === PropTypes.any ? {} : bpfrpt_proptype_HeaderRendererParams;\nimport { bpfrpt_proptype_HeaderRendererParams } from './types';\nimport PropTypes from 'prop-types';","import _extends from 'babel-runtime/helpers/extends';\nimport * as React from 'react';\n/**\n * Default row renderer for Table.\n */\n\nexport default function defaultRowRenderer(_ref) {\n  var className = _ref.className,\n      columns = _ref.columns,\n      index = _ref.index,\n      key = _ref.key,\n      onRowClick = _ref.onRowClick,\n      onRowDoubleClick = _ref.onRowDoubleClick,\n      onRowMouseOut = _ref.onRowMouseOut,\n      onRowMouseOver = _ref.onRowMouseOver,\n      onRowRightClick = _ref.onRowRightClick,\n      rowData = _ref.rowData,\n      style = _ref.style;\n  var a11yProps = {\n    'aria-rowindex': index + 1\n  };\n\n  if (onRowClick || onRowDoubleClick || onRowMouseOut || onRowMouseOver || onRowRightClick) {\n    a11yProps['aria-label'] = 'row';\n    a11yProps.tabIndex = 0;\n\n    if (onRowClick) {\n      a11yProps.onClick = function (event) {\n        return onRowClick({\n          event: event,\n          index: index,\n          rowData: rowData\n        });\n      };\n    }\n\n    if (onRowDoubleClick) {\n      a11yProps.onDoubleClick = function (event) {\n        return onRowDoubleClick({\n          event: event,\n          index: index,\n          rowData: rowData\n        });\n      };\n    }\n\n    if (onRowMouseOut) {\n      a11yProps.onMouseOut = function (event) {\n        return onRowMouseOut({\n          event: event,\n          index: index,\n          rowData: rowData\n        });\n      };\n    }\n\n    if (onRowMouseOver) {\n      a11yProps.onMouseOver = function (event) {\n        return onRowMouseOver({\n          event: event,\n          index: index,\n          rowData: rowData\n        });\n      };\n    }\n\n    if (onRowRightClick) {\n      a11yProps.onContextMenu = function (event) {\n        return onRowRightClick({\n          event: event,\n          index: index,\n          rowData: rowData\n        });\n      };\n    }\n  }\n\n  return React.createElement('div', _extends({}, a11yProps, {\n    className: className,\n    key: key,\n    role: 'row',\n    style: style\n  }), columns);\n}\ndefaultRowRenderer.propTypes = process.env.NODE_ENV === 'production' ? null : bpfrpt_proptype_RowRendererParams === PropTypes.any ? {} : bpfrpt_proptype_RowRendererParams;\nimport { bpfrpt_proptype_RowRendererParams } from './types';\nimport PropTypes from 'prop-types';","import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport defaultHeaderRenderer from './defaultHeaderRenderer';\nimport defaultCellRenderer from './defaultCellRenderer';\nimport defaultCellDataGetter from './defaultCellDataGetter';\nimport SortDirection from './SortDirection';\n/**\n * Describes the header and cell contents of a table column.\n */\n\nvar Column = function (_React$Component) {\n  _inherits(Column, _React$Component);\n\n  function Column() {\n    _classCallCheck(this, Column);\n\n    return _possibleConstructorReturn(this, (Column.__proto__ || _Object$getPrototypeOf(Column)).apply(this, arguments));\n  }\n\n  return Column;\n}(React.Component);\n\nColumn.defaultProps = {\n  cellDataGetter: defaultCellDataGetter,\n  cellRenderer: defaultCellRenderer,\n  defaultSortDirection: SortDirection.ASC,\n  flexGrow: 0,\n  flexShrink: 1,\n  headerRenderer: defaultHeaderRenderer,\n  style: {}\n};\nexport default Column;\nColumn.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** Optional aria-label value to set on the column header */\n  'aria-label': PropTypes.string,\n\n  /**\n   * Callback responsible for returning a cell's data, given its :dataKey\n   * ({ columnData: any, dataKey: string, rowData: any }): any\n   */\n  cellDataGetter: PropTypes.func,\n\n  /**\n   * Callback responsible for rendering a cell's contents.\n   * ({ cellData: any, columnData: any, dataKey: string, rowData: any, rowIndex: number }): node\n   */\n  cellRenderer: PropTypes.func,\n\n  /** Optional CSS class to apply to cell */\n  className: PropTypes.string,\n\n  /** Optional additional data passed to this column's :cellDataGetter */\n  columnData: PropTypes.object,\n\n  /** Uniquely identifies the row-data attribute corresponding to this cell */\n  dataKey: PropTypes.any.isRequired,\n\n  /** Optional direction to be used when clicked the first time */\n  defaultSortDirection: PropTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),\n\n  /** If sort is enabled for the table at large, disable it for this column */\n  disableSort: PropTypes.bool,\n\n  /** Flex grow style; defaults to 0 */\n  flexGrow: PropTypes.number,\n\n  /** Flex shrink style; defaults to 1 */\n  flexShrink: PropTypes.number,\n\n  /** Optional CSS class to apply to this column's header */\n  headerClassName: PropTypes.string,\n\n  /**\n   * Optional callback responsible for rendering a column header contents.\n   * ({ columnData: object, dataKey: string, disableSort: boolean, label: node, sortBy: string, sortDirection: string }): PropTypes.node\n   */\n  headerRenderer: PropTypes.func.isRequired,\n\n  /** Optional inline style to apply to this column's header */\n  headerStyle: PropTypes.object,\n\n  /** Optional id to set on the column header */\n  id: PropTypes.string,\n\n  /** Header label for this column */\n  label: PropTypes.node,\n\n  /** Maximum width of column; this property will only be used if :flexGrow is > 0. */\n  maxWidth: PropTypes.number,\n\n  /** Minimum width of column. */\n  minWidth: PropTypes.number,\n\n  /** Optional inline style to apply to cell */\n  style: PropTypes.object,\n\n  /** Flex basis (width) for this column; This value can grow or shrink based on :flexGrow and :flexShrink properties. */\n  width: PropTypes.number.isRequired\n} : {};","/**\n * Default accessor for returning a cell value for a given attribute.\n * This function expects to operate on either a vanilla Object or an Immutable Map.\n * You should override the column's cellDataGetter if your data is some other type of object.\n */\nexport default function defaultCellDataGetter(_ref) {\n  var dataKey = _ref.dataKey,\n      rowData = _ref.rowData;\n\n  if (typeof rowData.get === 'function') {\n    return rowData.get(dataKey);\n  } else {\n    return rowData[dataKey];\n  }\n}\nimport { bpfrpt_proptype_CellDataGetterParams } from './types';","/**\n * Default cell renderer that displays an attribute as a simple string\n * You should override the column's cellRenderer if your data is some other type of object.\n */\nexport default function defaultCellRenderer(_ref) {\n  var cellData = _ref.cellData;\n\n  if (cellData == null) {\n    return '';\n  } else {\n    return String(cellData);\n  }\n}\nimport { bpfrpt_proptype_CellRendererParams } from './types';","export default function calculateSizeAndPositionDataAndUpdateScrollOffset(_ref) {\n  var cellCount = _ref.cellCount,\n      cellSize = _ref.cellSize,\n      computeMetadataCallback = _ref.computeMetadataCallback,\n      computeMetadataCallbackProps = _ref.computeMetadataCallbackProps,\n      nextCellsCount = _ref.nextCellsCount,\n      nextCellSize = _ref.nextCellSize,\n      nextScrollToIndex = _ref.nextScrollToIndex,\n      scrollToIndex = _ref.scrollToIndex,\n      updateScrollOffsetForScrollToIndex = _ref.updateScrollOffsetForScrollToIndex; // Don't compare cell sizes if they are functions because inline functions would cause infinite loops.\n  // In that event users should use the manual recompute methods to inform of changes.\n\n  if (cellCount !== nextCellsCount || (typeof cellSize === 'number' || typeof nextCellSize === 'number') && cellSize !== nextCellSize) {\n    computeMetadataCallback(computeMetadataCallbackProps); // Updated cell metadata may have hidden the previous scrolled-to item.\n    // In this case we should also update the scrollTop to ensure it stays visible.\n\n    if (scrollToIndex >= 0 && scrollToIndex === nextScrollToIndex) {\n      updateScrollOffsetForScrollToIndex();\n    }\n  }\n}\n/**\n * Helper method that determines when to recalculate row or column metadata.\n */","import _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\n/**\n * Just-in-time calculates and caches size and position information for a collection of cells.\n */\n\nvar CellSizeAndPositionManager = function () {\n  // Used in deferred mode to track which cells have been queued for measurement.\n  // Cache of size and position data for cells, mapped by cell index.\n  // Note that invalid values may exist in this map so only rely on cells up to this._lastMeasuredIndex\n  function CellSizeAndPositionManager(_ref) {\n    var cellCount = _ref.cellCount,\n        cellSizeGetter = _ref.cellSizeGetter,\n        estimatedCellSize = _ref.estimatedCellSize;\n\n    _classCallCheck(this, CellSizeAndPositionManager);\n\n    this._cellSizeAndPositionData = {};\n    this._lastMeasuredIndex = -1;\n    this._lastBatchedIndex = -1;\n    this._cellSizeGetter = cellSizeGetter;\n    this._cellCount = cellCount;\n    this._estimatedCellSize = estimatedCellSize;\n  } // Measurements for cells up to this index can be trusted; cells afterward should be estimated.\n\n\n  _createClass(CellSizeAndPositionManager, [{\n    key: 'areOffsetsAdjusted',\n    value: function areOffsetsAdjusted() {\n      return false;\n    }\n  }, {\n    key: 'configure',\n    value: function configure(_ref2) {\n      var cellCount = _ref2.cellCount,\n          estimatedCellSize = _ref2.estimatedCellSize,\n          cellSizeGetter = _ref2.cellSizeGetter;\n      this._cellCount = cellCount;\n      this._estimatedCellSize = estimatedCellSize;\n      this._cellSizeGetter = cellSizeGetter;\n    }\n  }, {\n    key: 'getCellCount',\n    value: function getCellCount() {\n      return this._cellCount;\n    }\n  }, {\n    key: 'getEstimatedCellSize',\n    value: function getEstimatedCellSize() {\n      return this._estimatedCellSize;\n    }\n  }, {\n    key: 'getLastMeasuredIndex',\n    value: function getLastMeasuredIndex() {\n      return this._lastMeasuredIndex;\n    }\n  }, {\n    key: 'getOffsetAdjustment',\n    value: function getOffsetAdjustment() {\n      return 0;\n    }\n    /**\n     * This method returns the size and position for the cell at the specified index.\n     * It just-in-time calculates (or used cached values) for cells leading up to the index.\n     */\n\n  }, {\n    key: 'getSizeAndPositionOfCell',\n    value: function getSizeAndPositionOfCell(index) {\n      if (index < 0 || index >= this._cellCount) {\n        throw Error('Requested index ' + index + ' is outside of range 0..' + this._cellCount);\n      }\n\n      if (index > this._lastMeasuredIndex) {\n        var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n\n        var _offset = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n\n        for (var i = this._lastMeasuredIndex + 1; i <= index; i++) {\n          var _size = this._cellSizeGetter({\n            index: i\n          }); // undefined or NaN probably means a logic error in the size getter.\n          // null means we're using CellMeasurer and haven't yet measured a given index.\n\n\n          if (_size === undefined || isNaN(_size)) {\n            throw Error('Invalid size returned for cell ' + i + ' of value ' + _size);\n          } else if (_size === null) {\n            this._cellSizeAndPositionData[i] = {\n              offset: _offset,\n              size: 0\n            };\n            this._lastBatchedIndex = index;\n          } else {\n            this._cellSizeAndPositionData[i] = {\n              offset: _offset,\n              size: _size\n            };\n            _offset += _size;\n            this._lastMeasuredIndex = index;\n          }\n        }\n      }\n\n      return this._cellSizeAndPositionData[index];\n    }\n  }, {\n    key: 'getSizeAndPositionOfLastMeasuredCell',\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._lastMeasuredIndex >= 0 ? this._cellSizeAndPositionData[this._lastMeasuredIndex] : {\n        offset: 0,\n        size: 0\n      };\n    }\n    /**\n     * Total size of all cells being measured.\n     * This value will be completely estimated initially.\n     * As cells are measured, the estimate will be updated.\n     */\n\n  }, {\n    key: 'getTotalSize',\n    value: function getTotalSize() {\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var totalSizeOfMeasuredCells = lastMeasuredCellSizeAndPosition.offset + lastMeasuredCellSizeAndPosition.size;\n      var numUnmeasuredCells = this._cellCount - this._lastMeasuredIndex - 1;\n      var totalSizeOfUnmeasuredCells = numUnmeasuredCells * this._estimatedCellSize;\n      return totalSizeOfMeasuredCells + totalSizeOfUnmeasuredCells;\n    }\n    /**\n     * Determines a new offset that ensures a certain cell is visible, given the current offset.\n     * If the cell is already visible then the current offset will be returned.\n     * If the current offset is too great or small, it will be adjusted just enough to ensure the specified index is visible.\n     *\n     * @param align Desired alignment within container; one of \"auto\" (default), \"start\", or \"end\"\n     * @param containerSize Size (width or height) of the container viewport\n     * @param currentOffset Container's current (x or y) offset\n     * @param totalSize Total size (width or height) of all cells\n     * @return Offset to use to ensure the specified cell is visible\n     */\n\n  }, {\n    key: 'getUpdatedOffsetForIndex',\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n\n      if (containerSize <= 0) {\n        return 0;\n      }\n\n      var datum = this.getSizeAndPositionOfCell(targetIndex);\n      var maxOffset = datum.offset;\n      var minOffset = maxOffset - containerSize + datum.size;\n      var idealOffset = void 0;\n\n      switch (align) {\n        case 'start':\n          idealOffset = maxOffset;\n          break;\n\n        case 'end':\n          idealOffset = minOffset;\n          break;\n\n        case 'center':\n          idealOffset = maxOffset - (containerSize - datum.size) / 2;\n          break;\n\n        default:\n          idealOffset = Math.max(minOffset, Math.min(maxOffset, currentOffset));\n          break;\n      }\n\n      var totalSize = this.getTotalSize();\n      return Math.max(0, Math.min(totalSize - containerSize, idealOffset));\n    }\n  }, {\n    key: 'getVisibleCellRange',\n    value: function getVisibleCellRange(params) {\n      var containerSize = params.containerSize,\n          offset = params.offset;\n      var totalSize = this.getTotalSize();\n\n      if (totalSize === 0) {\n        return {};\n      }\n\n      var maxOffset = offset + containerSize;\n\n      var start = this._findNearestCell(offset);\n\n      var datum = this.getSizeAndPositionOfCell(start);\n      offset = datum.offset + datum.size;\n      var stop = start;\n\n      while (offset < maxOffset && stop < this._cellCount - 1) {\n        stop++;\n        offset += this.getSizeAndPositionOfCell(stop).size;\n      }\n\n      return {\n        start: start,\n        stop: stop\n      };\n    }\n    /**\n     * Clear all cached values for cells after the specified index.\n     * This method should be called for any cell that has changed its size.\n     * It will not immediately perform any calculations; they'll be performed the next time getSizeAndPositionOfCell() is called.\n     */\n\n  }, {\n    key: 'resetCell',\n    value: function resetCell(index) {\n      this._lastMeasuredIndex = Math.min(this._lastMeasuredIndex, index - 1);\n    }\n  }, {\n    key: '_binarySearch',\n    value: function _binarySearch(high, low, offset) {\n      while (low <= high) {\n        var middle = low + Math.floor((high - low) / 2);\n        var _currentOffset = this.getSizeAndPositionOfCell(middle).offset;\n\n        if (_currentOffset === offset) {\n          return middle;\n        } else if (_currentOffset < offset) {\n          low = middle + 1;\n        } else if (_currentOffset > offset) {\n          high = middle - 1;\n        }\n      }\n\n      if (low > 0) {\n        return low - 1;\n      } else {\n        return 0;\n      }\n    }\n  }, {\n    key: '_exponentialSearch',\n    value: function _exponentialSearch(index, offset) {\n      var interval = 1;\n\n      while (index < this._cellCount && this.getSizeAndPositionOfCell(index).offset < offset) {\n        index += interval;\n        interval *= 2;\n      }\n\n      return this._binarySearch(Math.min(index, this._cellCount - 1), Math.floor(index / 2), offset);\n    }\n    /**\n     * Searches for the cell (index) nearest the specified offset.\n     *\n     * If no exact match is found the next lowest cell index will be returned.\n     * This allows partially visible cells (with offsets just before/above the fold) to be visible.\n     */\n\n  }, {\n    key: '_findNearestCell',\n    value: function _findNearestCell(offset) {\n      if (isNaN(offset)) {\n        throw Error('Invalid offset ' + offset + ' specified');\n      } // Our search algorithms find the nearest match at or below the specified offset.\n      // So make sure the offset is at least 0 or no match will be found.\n\n\n      offset = Math.max(0, offset);\n      var lastMeasuredCellSizeAndPosition = this.getSizeAndPositionOfLastMeasuredCell();\n      var lastMeasuredIndex = Math.max(0, this._lastMeasuredIndex);\n\n      if (lastMeasuredCellSizeAndPosition.offset >= offset) {\n        // If we've already measured cells within this range just use a binary search as it's faster.\n        return this._binarySearch(lastMeasuredIndex, 0, offset);\n      } else {\n        // If we haven't yet measured this high, fallback to an exponential search with an inner binary search.\n        // The exponential search avoids pre-computing sizes for the full set of cells as a binary search would.\n        // The overall complexity for this approach is O(log n).\n        return this._exponentialSearch(lastMeasuredIndex, offset);\n      }\n    }\n  }]);\n\n  return CellSizeAndPositionManager;\n}();\n\nexport default CellSizeAndPositionManager;\nimport { bpfrpt_proptype_Alignment } from '../types';\nimport { bpfrpt_proptype_CellSizeGetter } from '../types';\nimport { bpfrpt_proptype_VisibleCellRange } from '../types';","var DEFAULT_MAX_ELEMENT_SIZE = 1500000;\nvar CHROME_MAX_ELEMENT_SIZE = 1.67771e7;\n\nvar isBrowser = function isBrowser() {\n  return typeof window !== 'undefined';\n};\n\nvar isChrome = function isChrome() {\n  return !!window.chrome;\n};\n\nexport var getMaxElementSize = function getMaxElementSize() {\n  if (isBrowser()) {\n    if (isChrome()) {\n      return CHROME_MAX_ELEMENT_SIZE;\n    }\n  }\n\n  return DEFAULT_MAX_ELEMENT_SIZE;\n};","import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport CellSizeAndPositionManager from './CellSizeAndPositionManager';\nimport { getMaxElementSize } from './maxElementSize.js';\n/**\n * Browsers have scroll offset limitations (eg Chrome stops scrolling at ~33.5M pixels where as Edge tops out at ~1.5M pixels).\n * After a certain position, the browser won't allow the user to scroll further (even via JavaScript scroll offset adjustments).\n * This util picks a lower ceiling for max size and artificially adjusts positions within to make it transparent for users.\n */\n\n/**\n * Extends CellSizeAndPositionManager and adds scaling behavior for lists that are too large to fit within a browser's native limits.\n */\n\nvar ScalingCellSizeAndPositionManager = function () {\n  function ScalingCellSizeAndPositionManager(_ref) {\n    var _ref$maxScrollSize = _ref.maxScrollSize,\n        maxScrollSize = _ref$maxScrollSize === undefined ? getMaxElementSize() : _ref$maxScrollSize,\n        params = _objectWithoutProperties(_ref, ['maxScrollSize']);\n\n    _classCallCheck(this, ScalingCellSizeAndPositionManager); // Favor composition over inheritance to simplify IE10 support\n\n\n    this._cellSizeAndPositionManager = new CellSizeAndPositionManager(params);\n    this._maxScrollSize = maxScrollSize;\n  }\n\n  _createClass(ScalingCellSizeAndPositionManager, [{\n    key: 'areOffsetsAdjusted',\n    value: function areOffsetsAdjusted() {\n      return this._cellSizeAndPositionManager.getTotalSize() > this._maxScrollSize;\n    }\n  }, {\n    key: 'configure',\n    value: function configure(params) {\n      this._cellSizeAndPositionManager.configure(params);\n    }\n  }, {\n    key: 'getCellCount',\n    value: function getCellCount() {\n      return this._cellSizeAndPositionManager.getCellCount();\n    }\n  }, {\n    key: 'getEstimatedCellSize',\n    value: function getEstimatedCellSize() {\n      return this._cellSizeAndPositionManager.getEstimatedCellSize();\n    }\n  }, {\n    key: 'getLastMeasuredIndex',\n    value: function getLastMeasuredIndex() {\n      return this._cellSizeAndPositionManager.getLastMeasuredIndex();\n    }\n    /**\n     * Number of pixels a cell at the given position (offset) should be shifted in order to fit within the scaled container.\n     * The offset passed to this function is scaled (safe) as well.\n     */\n\n  }, {\n    key: 'getOffsetAdjustment',\n    value: function getOffsetAdjustment(_ref2) {\n      var containerSize = _ref2.containerSize,\n          offset = _ref2.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      var offsetPercentage = this._getOffsetPercentage({\n        containerSize: containerSize,\n        offset: offset,\n        totalSize: safeTotalSize\n      });\n\n      return Math.round(offsetPercentage * (safeTotalSize - totalSize));\n    }\n  }, {\n    key: 'getSizeAndPositionOfCell',\n    value: function getSizeAndPositionOfCell(index) {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfCell(index);\n    }\n  }, {\n    key: 'getSizeAndPositionOfLastMeasuredCell',\n    value: function getSizeAndPositionOfLastMeasuredCell() {\n      return this._cellSizeAndPositionManager.getSizeAndPositionOfLastMeasuredCell();\n    }\n    /** See CellSizeAndPositionManager#getTotalSize */\n\n  }, {\n    key: 'getTotalSize',\n    value: function getTotalSize() {\n      return Math.min(this._maxScrollSize, this._cellSizeAndPositionManager.getTotalSize());\n    }\n    /** See CellSizeAndPositionManager#getUpdatedOffsetForIndex */\n\n  }, {\n    key: 'getUpdatedOffsetForIndex',\n    value: function getUpdatedOffsetForIndex(_ref3) {\n      var _ref3$align = _ref3.align,\n          align = _ref3$align === undefined ? 'auto' : _ref3$align,\n          containerSize = _ref3.containerSize,\n          currentOffset = _ref3.currentOffset,\n          targetIndex = _ref3.targetIndex;\n      currentOffset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: currentOffset\n      });\n\n      var offset = this._cellSizeAndPositionManager.getUpdatedOffsetForIndex({\n        align: align,\n        containerSize: containerSize,\n        currentOffset: currentOffset,\n        targetIndex: targetIndex\n      });\n\n      return this._offsetToSafeOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n    /** See CellSizeAndPositionManager#getVisibleCellRange */\n\n  }, {\n    key: 'getVisibleCellRange',\n    value: function getVisibleCellRange(_ref4) {\n      var containerSize = _ref4.containerSize,\n          offset = _ref4.offset;\n      offset = this._safeOffsetToOffset({\n        containerSize: containerSize,\n        offset: offset\n      });\n      return this._cellSizeAndPositionManager.getVisibleCellRange({\n        containerSize: containerSize,\n        offset: offset\n      });\n    }\n  }, {\n    key: 'resetCell',\n    value: function resetCell(index) {\n      this._cellSizeAndPositionManager.resetCell(index);\n    }\n  }, {\n    key: '_getOffsetPercentage',\n    value: function _getOffsetPercentage(_ref5) {\n      var containerSize = _ref5.containerSize,\n          offset = _ref5.offset,\n          totalSize = _ref5.totalSize;\n      return totalSize <= containerSize ? 0 : offset / (totalSize - containerSize);\n    }\n  }, {\n    key: '_offsetToSafeOffset',\n    value: function _offsetToSafeOffset(_ref6) {\n      var containerSize = _ref6.containerSize,\n          offset = _ref6.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: totalSize\n        });\n\n        return Math.round(offsetPercentage * (safeTotalSize - containerSize));\n      }\n    }\n  }, {\n    key: '_safeOffsetToOffset',\n    value: function _safeOffsetToOffset(_ref7) {\n      var containerSize = _ref7.containerSize,\n          offset = _ref7.offset;\n\n      var totalSize = this._cellSizeAndPositionManager.getTotalSize();\n\n      var safeTotalSize = this.getTotalSize();\n\n      if (totalSize === safeTotalSize) {\n        return offset;\n      } else {\n        var offsetPercentage = this._getOffsetPercentage({\n          containerSize: containerSize,\n          offset: offset,\n          totalSize: safeTotalSize\n        });\n\n        return Math.round(offsetPercentage * (totalSize - containerSize));\n      }\n    }\n  }]);\n\n  return ScalingCellSizeAndPositionManager;\n}();\n\nexport default ScalingCellSizeAndPositionManager;\nimport { bpfrpt_proptype_Alignment } from '../types';\nimport { bpfrpt_proptype_CellSizeGetter } from '../types';\nimport { bpfrpt_proptype_VisibleCellRange } from '../types';","import _Object$keys from 'babel-runtime/core-js/object/keys';\n/**\n * Helper utility that updates the specified callback whenever any of the specified indices have changed.\n */\n\nexport default function createCallbackMemoizer() {\n  var requireAllKeys = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n  var cachedIndices = {};\n  return function (_ref) {\n    var callback = _ref.callback,\n        indices = _ref.indices;\n\n    var keys = _Object$keys(indices);\n\n    var allInitialized = !requireAllKeys || keys.every(function (key) {\n      var value = indices[key];\n      return Array.isArray(value) ? value.length > 0 : value >= 0;\n    });\n    var indexChanged = keys.length !== _Object$keys(cachedIndices).length || keys.some(function (key) {\n      var cachedValue = cachedIndices[key];\n      var value = indices[key];\n      return Array.isArray(value) ? cachedValue.join(',') !== value.join(',') : cachedValue !== value;\n    });\n    cachedIndices = indices;\n\n    if (allInitialized && indexChanged) {\n      callback(indices);\n    }\n  };\n}","export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex;\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from './types';\nimport { bpfrpt_proptype_OverscanIndices } from './types';","import ScalingCellSizeAndPositionManager from './ScalingCellSizeAndPositionManager.js';\n/**\n * Helper function that determines when to update scroll offsets to ensure that a scroll-to-index remains visible.\n * This function also ensures that the scroll ofset isn't past the last column/row of cells.\n */\n\nexport default function updateScrollIndexHelper(_ref) {\n  var cellSize = _ref.cellSize,\n      cellSizeAndPositionManager = _ref.cellSizeAndPositionManager,\n      previousCellsCount = _ref.previousCellsCount,\n      previousCellSize = _ref.previousCellSize,\n      previousScrollToAlignment = _ref.previousScrollToAlignment,\n      previousScrollToIndex = _ref.previousScrollToIndex,\n      previousSize = _ref.previousSize,\n      scrollOffset = _ref.scrollOffset,\n      scrollToAlignment = _ref.scrollToAlignment,\n      scrollToIndex = _ref.scrollToIndex,\n      size = _ref.size,\n      sizeJustIncreasedFromZero = _ref.sizeJustIncreasedFromZero,\n      updateScrollIndexCallback = _ref.updateScrollIndexCallback;\n  var cellCount = cellSizeAndPositionManager.getCellCount();\n  var hasScrollToIndex = scrollToIndex >= 0 && scrollToIndex < cellCount;\n  var sizeHasChanged = size !== previousSize || sizeJustIncreasedFromZero || !previousCellSize || typeof cellSize === 'number' && cellSize !== previousCellSize; // If we have a new scroll target OR if height/row-height has changed,\n  // We should ensure that the scroll target is visible.\n\n  if (hasScrollToIndex && (sizeHasChanged || scrollToAlignment !== previousScrollToAlignment || scrollToIndex !== previousScrollToIndex)) {\n    updateScrollIndexCallback(scrollToIndex); // If we don't have a selected item but list size or number of children have decreased,\n    // Make sure we aren't scrolled too far past the current content.\n  } else if (!hasScrollToIndex && cellCount > 0 && (size < previousSize || cellCount < previousCellsCount)) {\n    // We need to ensure that the current scroll offset is still within the collection's range.\n    // To do this, we don't need to measure everything; CellMeasurer would perform poorly.\n    // Just check to make sure we're still okay.\n    // Only adjust the scroll position if we've scrolled below the last set of rows.\n    if (scrollOffset > cellSizeAndPositionManager.getTotalSize() - size) {\n      updateScrollIndexCallback(cellCount - 1);\n    }\n  }\n}\nimport { bpfrpt_proptype_Alignment } from '../types';\nimport { bpfrpt_proptype_CellSize } from '../types';","export default !!(typeof window !== 'undefined' && window.document && window.document.createElement);","import canUseDOM from './canUseDOM';\nvar size;\nexport default function scrollbarSize(recalc) {\n  if (!size && size !== 0 || recalc) {\n    if (canUseDOM) {\n      var scrollDiv = document.createElement('div');\n      scrollDiv.style.position = 'absolute';\n      scrollDiv.style.top = '-9999px';\n      scrollDiv.style.width = '50px';\n      scrollDiv.style.height = '50px';\n      scrollDiv.style.overflow = 'scroll';\n      document.body.appendChild(scrollDiv);\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth;\n      document.body.removeChild(scrollDiv);\n    }\n  }\n\n  return size;\n}","import _Object$assign from 'babel-runtime/core-js/object/assign';\nimport _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport clsx from 'clsx';\nimport calculateSizeAndPositionDataAndUpdateScrollOffset from './utils/calculateSizeAndPositionDataAndUpdateScrollOffset';\nimport ScalingCellSizeAndPositionManager from './utils/ScalingCellSizeAndPositionManager';\nimport createCallbackMemoizer from '../utils/createCallbackMemoizer';\nimport defaultOverscanIndicesGetter, { SCROLL_DIRECTION_BACKWARD, SCROLL_DIRECTION_FORWARD } from './defaultOverscanIndicesGetter';\nimport updateScrollIndexHelper from './utils/updateScrollIndexHelper';\nimport defaultCellRangeRenderer from './defaultCellRangeRenderer';\nimport scrollbarSize from 'dom-helpers/scrollbarSize';\nimport { polyfill } from 'react-lifecycles-compat';\nimport { requestAnimationTimeout, cancelAnimationTimeout } from '../utils/requestAnimationTimeout';\n/**\n * Specifies the number of milliseconds during which to disable pointer events while a scroll is in progress.\n * This improves performance and makes scrolling smoother.\n */\n\nexport var DEFAULT_SCROLLING_RESET_TIME_INTERVAL = 150;\n/**\n * Controls whether the Grid updates the DOM element's scrollLeft/scrollTop based on the current state or just observes it.\n * This prevents Grid from interrupting mouse-wheel animations (see issue #2).\n */\n\nvar SCROLL_POSITION_CHANGE_REASONS = {\n  OBSERVED: 'observed',\n  REQUESTED: 'requested'\n};\n\nvar renderNull = function renderNull() {\n  return null;\n};\n/**\n * Renders tabular data with virtualization along the vertical and horizontal axes.\n * Row heights and column widths must be known ahead of time and specified as properties.\n */\n\n\nvar Grid = function (_React$PureComponent) {\n  _inherits(Grid, _React$PureComponent); // Invokes onSectionRendered callback only when start/stop row or column indices change\n\n\n  function Grid(props) {\n    _classCallCheck(this, Grid);\n\n    var _this = _possibleConstructorReturn(this, (Grid.__proto__ || _Object$getPrototypeOf(Grid)).call(this, props));\n\n    _this._onGridRenderedMemoizer = createCallbackMemoizer();\n    _this._onScrollMemoizer = createCallbackMemoizer(false);\n    _this._deferredInvalidateColumnIndex = null;\n    _this._deferredInvalidateRowIndex = null;\n    _this._recomputeScrollLeftFlag = false;\n    _this._recomputeScrollTopFlag = false;\n    _this._horizontalScrollBarSize = 0;\n    _this._verticalScrollBarSize = 0;\n    _this._scrollbarPresenceChanged = false;\n    _this._renderedColumnStartIndex = 0;\n    _this._renderedColumnStopIndex = 0;\n    _this._renderedRowStartIndex = 0;\n    _this._renderedRowStopIndex = 0;\n    _this._styleCache = {};\n    _this._cellCache = {};\n\n    _this._debounceScrollEndedCallback = function () {\n      _this._disablePointerEventsTimeoutId = null; // isScrolling is used to determine if we reset styleCache\n\n      _this.setState({\n        isScrolling: false,\n        needToResetStyleCache: false\n      });\n    };\n\n    _this._invokeOnGridRenderedHelper = function () {\n      var onSectionRendered = _this.props.onSectionRendered;\n\n      _this._onGridRenderedMemoizer({\n        callback: onSectionRendered,\n        indices: {\n          columnOverscanStartIndex: _this._columnStartIndex,\n          columnOverscanStopIndex: _this._columnStopIndex,\n          columnStartIndex: _this._renderedColumnStartIndex,\n          columnStopIndex: _this._renderedColumnStopIndex,\n          rowOverscanStartIndex: _this._rowStartIndex,\n          rowOverscanStopIndex: _this._rowStopIndex,\n          rowStartIndex: _this._renderedRowStartIndex,\n          rowStopIndex: _this._renderedRowStopIndex\n        }\n      });\n    };\n\n    _this._setScrollingContainerRef = function (ref) {\n      _this._scrollingContainer = ref;\n    };\n\n    _this._onScroll = function (event) {\n      // In certain edge-cases React dispatches an onScroll event with an invalid target.scrollLeft / target.scrollTop.\n      // This invalid event can be detected by comparing event.target to this component's scrollable DOM element.\n      // See issue #404 for more information.\n      if (event.target === _this._scrollingContainer) {\n        _this.handleScrollEvent(event.target);\n      }\n    };\n\n    var columnSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.columnCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.columnWidth)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedColumnSize(props)\n    });\n    var rowSizeAndPositionManager = new ScalingCellSizeAndPositionManager({\n      cellCount: props.rowCount,\n      cellSizeGetter: function cellSizeGetter(params) {\n        return Grid._wrapSizeGetter(props.rowHeight)(params);\n      },\n      estimatedCellSize: Grid._getEstimatedRowSize(props)\n    });\n    _this.state = {\n      instanceProps: {\n        columnSizeAndPositionManager: columnSizeAndPositionManager,\n        rowSizeAndPositionManager: rowSizeAndPositionManager,\n        prevColumnWidth: props.columnWidth,\n        prevRowHeight: props.rowHeight,\n        prevColumnCount: props.columnCount,\n        prevRowCount: props.rowCount,\n        prevIsScrolling: props.isScrolling === true,\n        prevScrollToColumn: props.scrollToColumn,\n        prevScrollToRow: props.scrollToRow,\n        scrollbarSize: 0,\n        scrollbarSizeMeasured: false\n      },\n      isScrolling: false,\n      scrollDirectionHorizontal: SCROLL_DIRECTION_FORWARD,\n      scrollDirectionVertical: SCROLL_DIRECTION_FORWARD,\n      scrollLeft: 0,\n      scrollTop: 0,\n      scrollPositionChangeReason: null,\n      needToResetStyleCache: false\n    };\n\n    if (props.scrollToRow > 0) {\n      _this._initialScrollTop = _this._getCalculatedScrollTop(props, _this.state);\n    }\n\n    if (props.scrollToColumn > 0) {\n      _this._initialScrollLeft = _this._getCalculatedScrollLeft(props, _this.state);\n    }\n\n    return _this;\n  }\n  /**\n   * Gets offsets for a given cell and alignment.\n   */\n\n\n  _createClass(Grid, [{\n    key: 'getOffsetForCell',\n    value: function getOffsetForCell() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref$alignment = _ref.alignment,\n          alignment = _ref$alignment === undefined ? this.props.scrollToAlignment : _ref$alignment,\n          _ref$columnIndex = _ref.columnIndex,\n          columnIndex = _ref$columnIndex === undefined ? this.props.scrollToColumn : _ref$columnIndex,\n          _ref$rowIndex = _ref.rowIndex,\n          rowIndex = _ref$rowIndex === undefined ? this.props.scrollToRow : _ref$rowIndex;\n\n      var offsetProps = _extends({}, this.props, {\n        scrollToAlignment: alignment,\n        scrollToColumn: columnIndex,\n        scrollToRow: rowIndex\n      });\n\n      return {\n        scrollLeft: this._getCalculatedScrollLeft(offsetProps),\n        scrollTop: this._getCalculatedScrollTop(offsetProps)\n      };\n    }\n    /**\n     * Gets estimated total rows' height.\n     */\n\n  }, {\n    key: 'getTotalRowsHeight',\n    value: function getTotalRowsHeight() {\n      return this.state.instanceProps.rowSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * Gets estimated total columns' width.\n     */\n\n  }, {\n    key: 'getTotalColumnsWidth',\n    value: function getTotalColumnsWidth() {\n      return this.state.instanceProps.columnSizeAndPositionManager.getTotalSize();\n    }\n    /**\n     * This method handles a scroll event originating from an external scroll control.\n     * It's an advanced method and should probably not be used unless you're implementing a custom scroll-bar solution.\n     */\n\n  }, {\n    key: 'handleScrollEvent',\n    value: function handleScrollEvent(_ref2) {\n      var _ref2$scrollLeft = _ref2.scrollLeft,\n          scrollLeftParam = _ref2$scrollLeft === undefined ? 0 : _ref2$scrollLeft,\n          _ref2$scrollTop = _ref2.scrollTop,\n          scrollTopParam = _ref2$scrollTop === undefined ? 0 : _ref2$scrollTop; // On iOS, we can arrive at negative offsets by swiping past the start.\n      // To prevent flicker here, we make playing in the negative offset zone cause nothing to happen.\n\n      if (scrollTopParam < 0) {\n        return;\n      } // Prevent pointer events from interrupting a smooth scroll\n\n\n      this._debounceScrollEnded();\n\n      var _props = this.props,\n          autoHeight = _props.autoHeight,\n          autoWidth = _props.autoWidth,\n          height = _props.height,\n          width = _props.width;\n      var instanceProps = this.state.instanceProps; // When this component is shrunk drastically, React dispatches a series of back-to-back scroll events,\n      // Gradually converging on a scrollTop that is within the bounds of the new, smaller height.\n      // This causes a series of rapid renders that is slow for long lists.\n      // We can avoid that by doing some simple bounds checking to ensure that scroll offsets never exceed their bounds.\n\n      var scrollbarSize = instanceProps.scrollbarSize;\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var scrollLeft = Math.min(Math.max(0, totalColumnsWidth - width + scrollbarSize), scrollLeftParam);\n      var scrollTop = Math.min(Math.max(0, totalRowsHeight - height + scrollbarSize), scrollTopParam); // Certain devices (like Apple touchpad) rapid-fire duplicate events.\n      // Don't force a re-render if this is the case.\n      // The mouse may move faster then the animation frame does.\n      // Use requestAnimationFrame to avoid over-updating.\n\n      if (this.state.scrollLeft !== scrollLeft || this.state.scrollTop !== scrollTop) {\n        // Track scrolling direction so we can more efficiently overscan rows to reduce empty space around the edges while scrolling.\n        // Don't change direction for an axis unless scroll offset has changed.\n        var _scrollDirectionHorizontal = scrollLeft !== this.state.scrollLeft ? scrollLeft > this.state.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionHorizontal;\n\n        var _scrollDirectionVertical = scrollTop !== this.state.scrollTop ? scrollTop > this.state.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD : this.state.scrollDirectionVertical;\n\n        var newState = {\n          isScrolling: true,\n          scrollDirectionHorizontal: _scrollDirectionHorizontal,\n          scrollDirectionVertical: _scrollDirectionVertical,\n          scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.OBSERVED\n        };\n\n        if (!autoHeight) {\n          newState.scrollTop = scrollTop;\n        }\n\n        if (!autoWidth) {\n          newState.scrollLeft = scrollLeft;\n        }\n\n        newState.needToResetStyleCache = false;\n        this.setState(newState);\n      }\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop,\n        totalColumnsWidth: totalColumnsWidth,\n        totalRowsHeight: totalRowsHeight\n      });\n    }\n    /**\n     * Invalidate Grid size and recompute visible cells.\n     * This is a deferred wrapper for recomputeGridSize().\n     * It sets a flag to be evaluated on cDM/cDU to avoid unnecessary renders.\n     * This method is intended for advanced use-cases like CellMeasurer.\n     */\n    // @TODO (bvaughn) Add automated test coverage for this.\n\n  }, {\n    key: 'invalidateCellSizeAfterRender',\n    value: function invalidateCellSizeAfterRender(_ref3) {\n      var columnIndex = _ref3.columnIndex,\n          rowIndex = _ref3.rowIndex;\n      this._deferredInvalidateColumnIndex = typeof this._deferredInvalidateColumnIndex === 'number' ? Math.min(this._deferredInvalidateColumnIndex, columnIndex) : columnIndex;\n      this._deferredInvalidateRowIndex = typeof this._deferredInvalidateRowIndex === 'number' ? Math.min(this._deferredInvalidateRowIndex, rowIndex) : rowIndex;\n    }\n    /**\n     * Pre-measure all columns and rows in a Grid.\n     * Typically cells are only measured as needed and estimated sizes are used for cells that have not yet been measured.\n     * This method ensures that the next call to getTotalSize() returns an exact size (as opposed to just an estimated one).\n     */\n\n  }, {\n    key: 'measureAllCells',\n    value: function measureAllCells() {\n      var _props2 = this.props,\n          columnCount = _props2.columnCount,\n          rowCount = _props2.rowCount;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.getSizeAndPositionOfCell(columnCount - 1);\n      instanceProps.rowSizeAndPositionManager.getSizeAndPositionOfCell(rowCount - 1);\n    }\n    /**\n     * Forced recompute of row heights and column widths.\n     * This function should be called if dynamic column or row sizes have changed but nothing else has.\n     * Since Grid only receives :columnCount and :rowCount it has no way of detecting when the underlying data changes.\n     */\n\n  }, {\n    key: 'recomputeGridSize',\n    value: function recomputeGridSize() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref4$columnIndex = _ref4.columnIndex,\n          columnIndex = _ref4$columnIndex === undefined ? 0 : _ref4$columnIndex,\n          _ref4$rowIndex = _ref4.rowIndex,\n          rowIndex = _ref4$rowIndex === undefined ? 0 : _ref4$rowIndex;\n\n      var _props3 = this.props,\n          scrollToColumn = _props3.scrollToColumn,\n          scrollToRow = _props3.scrollToRow;\n      var instanceProps = this.state.instanceProps;\n      instanceProps.columnSizeAndPositionManager.resetCell(columnIndex);\n      instanceProps.rowSizeAndPositionManager.resetCell(rowIndex); // Cell sizes may be determined by a function property.\n      // In this case the cDU handler can't know if they changed.\n      // Store this flag to let the next cDU pass know it needs to recompute the scroll offset.\n\n      this._recomputeScrollLeftFlag = scrollToColumn >= 0 && (this.state.scrollDirectionHorizontal === SCROLL_DIRECTION_FORWARD ? columnIndex <= scrollToColumn : columnIndex >= scrollToColumn);\n      this._recomputeScrollTopFlag = scrollToRow >= 0 && (this.state.scrollDirectionVertical === SCROLL_DIRECTION_FORWARD ? rowIndex <= scrollToRow : rowIndex >= scrollToRow); // Clear cell cache in case we are scrolling;\n      // Invalid row heights likely mean invalid cached content as well.\n\n      this._styleCache = {};\n      this._cellCache = {};\n      this.forceUpdate();\n    }\n    /**\n     * Ensure column and row are visible.\n     */\n\n  }, {\n    key: 'scrollToCell',\n    value: function scrollToCell(_ref5) {\n      var columnIndex = _ref5.columnIndex,\n          rowIndex = _ref5.rowIndex;\n      var columnCount = this.props.columnCount;\n      var props = this.props; // Don't adjust scroll offset for single-column grids (eg List, Table).\n      // This can cause a funky scroll offset because of the vertical scrollbar width.\n\n      if (columnCount > 1 && columnIndex !== undefined) {\n        this._updateScrollLeftForScrollToColumn(_extends({}, props, {\n          scrollToColumn: columnIndex\n        }));\n      }\n\n      if (rowIndex !== undefined) {\n        this._updateScrollTopForScrollToRow(_extends({}, props, {\n          scrollToRow: rowIndex\n        }));\n      }\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var _props4 = this.props,\n          getScrollbarSize = _props4.getScrollbarSize,\n          height = _props4.height,\n          scrollLeft = _props4.scrollLeft,\n          scrollToColumn = _props4.scrollToColumn,\n          scrollTop = _props4.scrollTop,\n          scrollToRow = _props4.scrollToRow,\n          width = _props4.width;\n      var instanceProps = this.state.instanceProps; // Reset initial offsets to be ignored in browser\n\n      this._initialScrollTop = 0;\n      this._initialScrollLeft = 0; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // If this component was first rendered server-side, scrollbar size will be undefined.\n      // In that event we need to remeasure.\n\n\n      if (!instanceProps.scrollbarSizeMeasured) {\n        this.setState(function (prevState) {\n          var stateUpdate = _extends({}, prevState, {\n            needToResetStyleCache: false\n          });\n\n          stateUpdate.instanceProps.scrollbarSize = getScrollbarSize();\n          stateUpdate.instanceProps.scrollbarSizeMeasured = true;\n          return stateUpdate;\n        });\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 || typeof scrollTop === 'number' && scrollTop >= 0) {\n        var stateUpdate = Grid._getScrollToPositionStateUpdate({\n          prevState: this.state,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        });\n\n        if (stateUpdate) {\n          stateUpdate.needToResetStyleCache = false;\n          this.setState(stateUpdate);\n        }\n      } // refs don't work in `react-test-renderer`\n\n\n      if (this._scrollingContainer) {\n        // setting the ref's scrollLeft and scrollTop.\n        // Somehow in MultiGrid the main grid doesn't trigger a update on mount.\n        if (this._scrollingContainer.scrollLeft !== this.state.scrollLeft) {\n          this._scrollingContainer.scrollLeft = this.state.scrollLeft;\n        }\n\n        if (this._scrollingContainer.scrollTop !== this.state.scrollTop) {\n          this._scrollingContainer.scrollTop = this.state.scrollTop;\n        }\n      } // Don't update scroll offset if the size is 0; we don't render any cells in this case.\n      // Setting a state may cause us to later thing we've updated the offce when we haven't.\n\n\n      var sizeIsBiggerThanZero = height > 0 && width > 0;\n\n      if (scrollToColumn >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollLeftForScrollToColumn();\n      }\n\n      if (scrollToRow >= 0 && sizeIsBiggerThanZero) {\n        this._updateScrollTopForScrollToRow();\n      } // Update onRowsRendered callback\n\n\n      this._invokeOnGridRenderedHelper(); // Initialize onScroll callback\n\n\n      this._invokeOnScrollMemoizer({\n        scrollLeft: scrollLeft || 0,\n        scrollTop: scrollTop || 0,\n        totalColumnsWidth: instanceProps.columnSizeAndPositionManager.getTotalSize(),\n        totalRowsHeight: instanceProps.rowSizeAndPositionManager.getTotalSize()\n      });\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n    /**\n     * @private\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) New scroll-to-cell props have been set\n     */\n\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(prevProps, prevState) {\n      var _this2 = this;\n\n      var _props5 = this.props,\n          autoHeight = _props5.autoHeight,\n          autoWidth = _props5.autoWidth,\n          columnCount = _props5.columnCount,\n          height = _props5.height,\n          rowCount = _props5.rowCount,\n          scrollToAlignment = _props5.scrollToAlignment,\n          scrollToColumn = _props5.scrollToColumn,\n          scrollToRow = _props5.scrollToRow,\n          width = _props5.width;\n      var _state = this.state,\n          scrollLeft = _state.scrollLeft,\n          scrollPositionChangeReason = _state.scrollPositionChangeReason,\n          scrollTop = _state.scrollTop,\n          instanceProps = _state.instanceProps; // If cell sizes have been invalidated (eg we are using CellMeasurer) then reset cached positions.\n      // We must do this at the start of the method as we may calculate and update scroll position below.\n\n      this._handleInvalidatedGridSize(); // Handle edge case where column or row count has only just increased over 0.\n      // In this case we may have to restore a previously-specified scroll offset.\n      // For more info see bvaughn/react-virtualized/issues/218\n\n\n      var columnOrRowCountJustIncreasedFromZero = columnCount > 0 && prevProps.columnCount === 0 || rowCount > 0 && prevProps.rowCount === 0; // Make sure requested changes to :scrollLeft or :scrollTop get applied.\n      // Assigning to scrollLeft/scrollTop tells the browser to interrupt any running scroll animations,\n      // And to discard any pending async changes to the scroll position that may have happened in the meantime (e.g. on a separate scrolling thread).\n      // So we only set these when we require an adjustment of the scroll position.\n      // See issue #2 for more information.\n\n      if (scrollPositionChangeReason === SCROLL_POSITION_CHANGE_REASONS.REQUESTED) {\n        // @TRICKY :autoHeight and :autoWidth properties instructs Grid to leave :scrollTop and :scrollLeft management to an external HOC (eg WindowScroller).\n        // In this case we should avoid checking scrollingContainer.scrollTop and scrollingContainer.scrollLeft since it forces layout/flow.\n        if (!autoWidth && scrollLeft >= 0 && (scrollLeft !== this._scrollingContainer.scrollLeft || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollLeft = scrollLeft;\n        }\n\n        if (!autoHeight && scrollTop >= 0 && (scrollTop !== this._scrollingContainer.scrollTop || columnOrRowCountJustIncreasedFromZero)) {\n          this._scrollingContainer.scrollTop = scrollTop;\n        }\n      } // Special case where the previous size was 0:\n      // In this case we don't show any windowed cells at all.\n      // So we should always recalculate offset afterwards.\n\n\n      var sizeJustIncreasedFromZero = (prevProps.width === 0 || prevProps.height === 0) && height > 0 && width > 0; // Update scroll offsets if the current :scrollToColumn or :scrollToRow values requires it\n      // @TODO Do we also need this check or can the one in componentWillUpdate() suffice?\n\n      if (this._recomputeScrollLeftFlag) {\n        this._recomputeScrollLeftFlag = false;\n\n        this._updateScrollLeftForScrollToColumn(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          previousCellsCount: prevProps.columnCount,\n          previousCellSize: prevProps.columnWidth,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToColumn,\n          previousSize: prevProps.width,\n          scrollOffset: scrollLeft,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToColumn,\n          size: width,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollLeftForScrollToColumn(_this2.props);\n          }\n        });\n      }\n\n      if (this._recomputeScrollTopFlag) {\n        this._recomputeScrollTopFlag = false;\n\n        this._updateScrollTopForScrollToRow(this.props);\n      } else {\n        updateScrollIndexHelper({\n          cellSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          previousCellsCount: prevProps.rowCount,\n          previousCellSize: prevProps.rowHeight,\n          previousScrollToAlignment: prevProps.scrollToAlignment,\n          previousScrollToIndex: prevProps.scrollToRow,\n          previousSize: prevProps.height,\n          scrollOffset: scrollTop,\n          scrollToAlignment: scrollToAlignment,\n          scrollToIndex: scrollToRow,\n          size: height,\n          sizeJustIncreasedFromZero: sizeJustIncreasedFromZero,\n          updateScrollIndexCallback: function updateScrollIndexCallback() {\n            return _this2._updateScrollTopForScrollToRow(_this2.props);\n          }\n        });\n      } // Update onRowsRendered callback if start/stop indices have changed\n\n\n      this._invokeOnGridRenderedHelper(); // Changes to :scrollLeft or :scrollTop should also notify :onScroll listeners\n\n\n      if (scrollLeft !== prevState.scrollLeft || scrollTop !== prevState.scrollTop) {\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n\n        this._invokeOnScrollMemoizer({\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          totalColumnsWidth: totalColumnsWidth,\n          totalRowsHeight: totalRowsHeight\n        });\n      }\n\n      this._maybeCallOnScrollbarPresenceChange();\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n    }\n    /**\n     * This method updates scrollLeft/scrollTop in state for the following conditions:\n     * 1) Empty content (0 rows or columns)\n     * 2) New scroll props overriding the current state\n     * 3) Cells-count or cells-size has changed, making previous scroll offsets invalid\n     */\n\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props6 = this.props,\n          autoContainerWidth = _props6.autoContainerWidth,\n          autoHeight = _props6.autoHeight,\n          autoWidth = _props6.autoWidth,\n          className = _props6.className,\n          containerProps = _props6.containerProps,\n          containerRole = _props6.containerRole,\n          containerStyle = _props6.containerStyle,\n          height = _props6.height,\n          id = _props6.id,\n          noContentRenderer = _props6.noContentRenderer,\n          role = _props6.role,\n          style = _props6.style,\n          tabIndex = _props6.tabIndex,\n          width = _props6.width;\n      var _state2 = this.state,\n          instanceProps = _state2.instanceProps,\n          needToResetStyleCache = _state2.needToResetStyleCache;\n\n      var isScrolling = this._isScrolling();\n\n      var gridStyle = {\n        boxSizing: 'border-box',\n        direction: 'ltr',\n        height: autoHeight ? 'auto' : height,\n        position: 'relative',\n        width: autoWidth ? 'auto' : width,\n        WebkitOverflowScrolling: 'touch',\n        willChange: 'transform'\n      };\n\n      if (needToResetStyleCache) {\n        this._styleCache = {};\n      } // calculate _styleCache here\n      // if state.isScrolling (not from _isScrolling) then reset\n\n\n      if (!this.state.isScrolling) {\n        this._resetStyleCache();\n      } // calculate children to render here\n\n\n      this._calculateChildrenToRender(this.props, this.state);\n\n      var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n      var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize(); // Force browser to hide scrollbars when we know they aren't necessary.\n      // Otherwise once scrollbars appear they may not disappear again.\n      // For more info see issue #116\n\n      var verticalScrollBarSize = totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n      var horizontalScrollBarSize = totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n\n      if (horizontalScrollBarSize !== this._horizontalScrollBarSize || verticalScrollBarSize !== this._verticalScrollBarSize) {\n        this._horizontalScrollBarSize = horizontalScrollBarSize;\n        this._verticalScrollBarSize = verticalScrollBarSize;\n        this._scrollbarPresenceChanged = true;\n      } // Also explicitly init styles to 'auto' if scrollbars are required.\n      // This works around an obscure edge case where external CSS styles have not yet been loaded,\n      // But an initial scroll index of offset is set as an external prop.\n      // Without this style, Grid would render the correct range of cells but would NOT update its internal offset.\n      // This was originally reported via clauderic/react-infinite-calendar/issues/23\n\n\n      gridStyle.overflowX = totalColumnsWidth + verticalScrollBarSize <= width ? 'hidden' : 'auto';\n      gridStyle.overflowY = totalRowsHeight + horizontalScrollBarSize <= height ? 'hidden' : 'auto';\n      var childrenToDisplay = this._childrenToDisplay;\n      var showNoContentRenderer = childrenToDisplay.length === 0 && height > 0 && width > 0;\n      return React.createElement('div', _extends({\n        ref: this._setScrollingContainerRef\n      }, containerProps, {\n        'aria-label': this.props['aria-label'],\n        'aria-readonly': this.props['aria-readonly'],\n        className: clsx('ReactVirtualized__Grid', className),\n        id: id,\n        onScroll: this._onScroll,\n        role: role,\n        style: _extends({}, gridStyle, style),\n        tabIndex: tabIndex\n      }), childrenToDisplay.length > 0 && React.createElement('div', {\n        className: 'ReactVirtualized__Grid__innerScrollContainer',\n        role: containerRole,\n        style: _extends({\n          width: autoContainerWidth ? 'auto' : totalColumnsWidth,\n          height: totalRowsHeight,\n          maxWidth: totalColumnsWidth,\n          maxHeight: totalRowsHeight,\n          overflow: 'hidden',\n          pointerEvents: isScrolling ? 'none' : '',\n          position: 'relative'\n        }, containerStyle)\n      }, childrenToDisplay), showNoContentRenderer && noContentRenderer());\n    }\n    /* ---------------------------- Helper methods ---------------------------- */\n\n  }, {\n    key: '_calculateChildrenToRender',\n    value: function _calculateChildrenToRender() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      var cellRenderer = props.cellRenderer,\n          cellRangeRenderer = props.cellRangeRenderer,\n          columnCount = props.columnCount,\n          deferredMeasurementCache = props.deferredMeasurementCache,\n          height = props.height,\n          overscanColumnCount = props.overscanColumnCount,\n          overscanIndicesGetter = props.overscanIndicesGetter,\n          overscanRowCount = props.overscanRowCount,\n          rowCount = props.rowCount,\n          width = props.width,\n          isScrollingOptOut = props.isScrollingOptOut;\n      var scrollDirectionHorizontal = state.scrollDirectionHorizontal,\n          scrollDirectionVertical = state.scrollDirectionVertical,\n          instanceProps = state.instanceProps;\n      var scrollTop = this._initialScrollTop > 0 ? this._initialScrollTop : state.scrollTop;\n      var scrollLeft = this._initialScrollLeft > 0 ? this._initialScrollLeft : state.scrollLeft;\n\n      var isScrolling = this._isScrolling(props, state);\n\n      this._childrenToDisplay = []; // Render only enough columns and rows to cover the visible area of the grid.\n\n      if (height > 0 && width > 0) {\n        var visibleColumnIndices = instanceProps.columnSizeAndPositionManager.getVisibleCellRange({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var visibleRowIndices = instanceProps.rowSizeAndPositionManager.getVisibleCellRange({\n          containerSize: height,\n          offset: scrollTop\n        });\n        var horizontalOffsetAdjustment = instanceProps.columnSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: width,\n          offset: scrollLeft\n        });\n        var verticalOffsetAdjustment = instanceProps.rowSizeAndPositionManager.getOffsetAdjustment({\n          containerSize: height,\n          offset: scrollTop\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        this._renderedColumnStartIndex = visibleColumnIndices.start;\n        this._renderedColumnStopIndex = visibleColumnIndices.stop;\n        this._renderedRowStartIndex = visibleRowIndices.start;\n        this._renderedRowStopIndex = visibleRowIndices.stop;\n        var overscanColumnIndices = overscanIndicesGetter({\n          direction: 'horizontal',\n          cellCount: columnCount,\n          overscanCellsCount: overscanColumnCount,\n          scrollDirection: scrollDirectionHorizontal,\n          startIndex: typeof visibleColumnIndices.start === 'number' ? visibleColumnIndices.start : 0,\n          stopIndex: typeof visibleColumnIndices.stop === 'number' ? visibleColumnIndices.stop : -1\n        });\n        var overscanRowIndices = overscanIndicesGetter({\n          direction: 'vertical',\n          cellCount: rowCount,\n          overscanCellsCount: overscanRowCount,\n          scrollDirection: scrollDirectionVertical,\n          startIndex: typeof visibleRowIndices.start === 'number' ? visibleRowIndices.start : 0,\n          stopIndex: typeof visibleRowIndices.stop === 'number' ? visibleRowIndices.stop : -1\n        }); // Store for _invokeOnGridRenderedHelper()\n\n        var columnStartIndex = overscanColumnIndices.overscanStartIndex;\n        var columnStopIndex = overscanColumnIndices.overscanStopIndex;\n        var rowStartIndex = overscanRowIndices.overscanStartIndex;\n        var rowStopIndex = overscanRowIndices.overscanStopIndex; // Advanced use-cases (eg CellMeasurer) require batched measurements to determine accurate sizes.\n\n        if (deferredMeasurementCache) {\n          // If rows have a dynamic height, scan the rows we are about to render.\n          // If any have not yet been measured, then we need to render all columns initially,\n          // Because the height of the row is equal to the tallest cell within that row,\n          // (And so we can't know the height without measuring all column-cells first).\n          if (!deferredMeasurementCache.hasFixedHeight()) {\n            for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n              if (!deferredMeasurementCache.has(rowIndex, 0)) {\n                columnStartIndex = 0;\n                columnStopIndex = columnCount - 1;\n                break;\n              }\n            }\n          } // If columns have a dynamic width, scan the columns we are about to render.\n          // If any have not yet been measured, then we need to render all rows initially,\n          // Because the width of the column is equal to the widest cell within that column,\n          // (And so we can't know the width without measuring all row-cells first).\n\n\n          if (!deferredMeasurementCache.hasFixedWidth()) {\n            for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n              if (!deferredMeasurementCache.has(0, columnIndex)) {\n                rowStartIndex = 0;\n                rowStopIndex = rowCount - 1;\n                break;\n              }\n            }\n          }\n        }\n\n        this._childrenToDisplay = cellRangeRenderer({\n          cellCache: this._cellCache,\n          cellRenderer: cellRenderer,\n          columnSizeAndPositionManager: instanceProps.columnSizeAndPositionManager,\n          columnStartIndex: columnStartIndex,\n          columnStopIndex: columnStopIndex,\n          deferredMeasurementCache: deferredMeasurementCache,\n          horizontalOffsetAdjustment: horizontalOffsetAdjustment,\n          isScrolling: isScrolling,\n          isScrollingOptOut: isScrollingOptOut,\n          parent: this,\n          rowSizeAndPositionManager: instanceProps.rowSizeAndPositionManager,\n          rowStartIndex: rowStartIndex,\n          rowStopIndex: rowStopIndex,\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop,\n          styleCache: this._styleCache,\n          verticalOffsetAdjustment: verticalOffsetAdjustment,\n          visibleColumnIndices: visibleColumnIndices,\n          visibleRowIndices: visibleRowIndices\n        }); // update the indices\n\n        this._columnStartIndex = columnStartIndex;\n        this._columnStopIndex = columnStopIndex;\n        this._rowStartIndex = rowStartIndex;\n        this._rowStopIndex = rowStopIndex;\n      }\n    }\n    /**\n     * Sets an :isScrolling flag for a small window of time.\n     * This flag is used to disable pointer events on the scrollable portion of the Grid.\n     * This prevents jerky/stuttery mouse-wheel scrolling.\n     */\n\n  }, {\n    key: '_debounceScrollEnded',\n    value: function _debounceScrollEnded() {\n      var scrollingResetTimeInterval = this.props.scrollingResetTimeInterval;\n\n      if (this._disablePointerEventsTimeoutId) {\n        cancelAnimationTimeout(this._disablePointerEventsTimeoutId);\n      }\n\n      this._disablePointerEventsTimeoutId = requestAnimationTimeout(this._debounceScrollEndedCallback, scrollingResetTimeInterval);\n    }\n  }, {\n    key: '_handleInvalidatedGridSize',\n\n    /**\n     * Check for batched CellMeasurer size invalidations.\n     * This will occur the first time one or more previously unmeasured cells are rendered.\n     */\n    value: function _handleInvalidatedGridSize() {\n      if (typeof this._deferredInvalidateColumnIndex === 'number' && typeof this._deferredInvalidateRowIndex === 'number') {\n        var columnIndex = this._deferredInvalidateColumnIndex;\n        var rowIndex = this._deferredInvalidateRowIndex;\n        this._deferredInvalidateColumnIndex = null;\n        this._deferredInvalidateRowIndex = null;\n        this.recomputeGridSize({\n          columnIndex: columnIndex,\n          rowIndex: rowIndex\n        });\n      }\n    }\n  }, {\n    key: '_invokeOnScrollMemoizer',\n    value: function _invokeOnScrollMemoizer(_ref6) {\n      var _this3 = this;\n\n      var scrollLeft = _ref6.scrollLeft,\n          scrollTop = _ref6.scrollTop,\n          totalColumnsWidth = _ref6.totalColumnsWidth,\n          totalRowsHeight = _ref6.totalRowsHeight;\n\n      this._onScrollMemoizer({\n        callback: function callback(_ref7) {\n          var scrollLeft = _ref7.scrollLeft,\n              scrollTop = _ref7.scrollTop;\n          var _props7 = _this3.props,\n              height = _props7.height,\n              onScroll = _props7.onScroll,\n              width = _props7.width;\n          onScroll({\n            clientHeight: height,\n            clientWidth: width,\n            scrollHeight: totalRowsHeight,\n            scrollLeft: scrollLeft,\n            scrollTop: scrollTop,\n            scrollWidth: totalColumnsWidth\n          });\n        },\n        indices: {\n          scrollLeft: scrollLeft,\n          scrollTop: scrollTop\n        }\n      });\n    }\n  }, {\n    key: '_isScrolling',\n    value: function _isScrolling() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state; // If isScrolling is defined in props, use it to override the value in state\n      // This is a performance optimization for WindowScroller + Grid\n\n      return Object.hasOwnProperty.call(props, 'isScrolling') ? Boolean(props.isScrolling) : Boolean(state.isScrolling);\n    }\n  }, {\n    key: '_maybeCallOnScrollbarPresenceChange',\n    value: function _maybeCallOnScrollbarPresenceChange() {\n      if (this._scrollbarPresenceChanged) {\n        var _onScrollbarPresenceChange = this.props.onScrollbarPresenceChange;\n        this._scrollbarPresenceChanged = false;\n\n        _onScrollbarPresenceChange({\n          horizontal: this._horizontalScrollBarSize > 0,\n          size: this.state.instanceProps.scrollbarSize,\n          vertical: this._verticalScrollBarSize > 0\n        });\n      }\n    }\n  }, {\n    key: 'scrollToPosition',\n\n    /**\n     * Scroll to the specified offset(s).\n     * Useful for animating position changes.\n     */\n    value: function scrollToPosition(_ref8) {\n      var scrollLeft = _ref8.scrollLeft,\n          scrollTop = _ref8.scrollTop;\n\n      var stateUpdate = Grid._getScrollToPositionStateUpdate({\n        prevState: this.state,\n        scrollLeft: scrollLeft,\n        scrollTop: scrollTop\n      });\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: '_getCalculatedScrollLeft',\n    value: function _getCalculatedScrollLeft() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollLeft(props, state);\n    }\n  }, {\n    key: '_updateScrollLeftForScrollToColumn',\n    value: function _updateScrollLeftForScrollToColumn() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollLeftForScrollToColumnStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }, {\n    key: '_getCalculatedScrollTop',\n    value: function _getCalculatedScrollTop() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n      return Grid._getCalculatedScrollTop(props, state);\n    }\n  }, {\n    key: '_resetStyleCache',\n    value: function _resetStyleCache() {\n      var styleCache = this._styleCache;\n      var cellCache = this._cellCache;\n      var isScrollingOptOut = this.props.isScrollingOptOut; // Reset cell and style caches once scrolling stops.\n      // This makes Grid simpler to use (since cells commonly change).\n      // And it keeps the caches from growing too large.\n      // Performance is most sensitive when a user is scrolling.\n      // Don't clear visible cells from cellCache if isScrollingOptOut is specified.\n      // This keeps the cellCache to a resonable size.\n\n      this._cellCache = {};\n      this._styleCache = {}; // Copy over the visible cell styles so avoid unnecessary re-render.\n\n      for (var rowIndex = this._rowStartIndex; rowIndex <= this._rowStopIndex; rowIndex++) {\n        for (var columnIndex = this._columnStartIndex; columnIndex <= this._columnStopIndex; columnIndex++) {\n          var key = rowIndex + '-' + columnIndex;\n          this._styleCache[key] = styleCache[key];\n\n          if (isScrollingOptOut) {\n            this._cellCache[key] = cellCache[key];\n          }\n        }\n      }\n    }\n  }, {\n    key: '_updateScrollTopForScrollToRow',\n    value: function _updateScrollTopForScrollToRow() {\n      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props;\n      var state = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state;\n\n      var stateUpdate = Grid._getScrollTopForScrollToRowStateUpdate(props, state);\n\n      if (stateUpdate) {\n        stateUpdate.needToResetStyleCache = false;\n        this.setState(stateUpdate);\n      }\n    }\n  }], [{\n    key: 'getDerivedStateFromProps',\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      var newState = {};\n\n      if (nextProps.columnCount === 0 && prevState.scrollLeft !== 0 || nextProps.rowCount === 0 && prevState.scrollTop !== 0) {\n        newState.scrollLeft = 0;\n        newState.scrollTop = 0; // only use scroll{Left,Top} from props if scrollTo{Column,Row} isn't specified\n        // scrollTo{Column,Row} should override scroll{Left,Top}\n      } else if (nextProps.scrollLeft !== prevState.scrollLeft && nextProps.scrollToColumn < 0 || nextProps.scrollTop !== prevState.scrollTop && nextProps.scrollToRow < 0) {\n        _Object$assign(newState, Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: nextProps.scrollLeft,\n          scrollTop: nextProps.scrollTop\n        }));\n      }\n\n      var instanceProps = prevState.instanceProps; // Initially we should not clearStyleCache\n\n      newState.needToResetStyleCache = false;\n\n      if (nextProps.columnWidth !== instanceProps.prevColumnWidth || nextProps.rowHeight !== instanceProps.prevRowHeight) {\n        // Reset cache. set it to {} in render\n        newState.needToResetStyleCache = true;\n      }\n\n      instanceProps.columnSizeAndPositionManager.configure({\n        cellCount: nextProps.columnCount,\n        estimatedCellSize: Grid._getEstimatedColumnSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.columnWidth)\n      });\n      instanceProps.rowSizeAndPositionManager.configure({\n        cellCount: nextProps.rowCount,\n        estimatedCellSize: Grid._getEstimatedRowSize(nextProps),\n        cellSizeGetter: Grid._wrapSizeGetter(nextProps.rowHeight)\n      });\n\n      if (instanceProps.prevColumnCount === 0 || instanceProps.prevRowCount === 0) {\n        instanceProps.prevColumnCount = 0;\n        instanceProps.prevRowCount = 0;\n      } // If scrolling is controlled outside this component, clear cache when scrolling stops\n\n\n      if (nextProps.autoHeight && nextProps.isScrolling === false && instanceProps.prevIsScrolling === true) {\n        _Object$assign(newState, {\n          isScrolling: false\n        });\n      }\n\n      var maybeStateA = void 0;\n      var maybeStateB = void 0;\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevColumnCount,\n        cellSize: typeof instanceProps.prevColumnWidth === 'number' ? instanceProps.prevColumnWidth : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.columnSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.columnCount,\n        nextCellSize: typeof nextProps.columnWidth === 'number' ? nextProps.columnWidth : null,\n        nextScrollToIndex: nextProps.scrollToColumn,\n        scrollToIndex: instanceProps.prevScrollToColumn,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateA = Grid._getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState);\n        }\n      });\n      calculateSizeAndPositionDataAndUpdateScrollOffset({\n        cellCount: instanceProps.prevRowCount,\n        cellSize: typeof instanceProps.prevRowHeight === 'number' ? instanceProps.prevRowHeight : null,\n        computeMetadataCallback: function computeMetadataCallback() {\n          return instanceProps.rowSizeAndPositionManager.resetCell(0);\n        },\n        computeMetadataCallbackProps: nextProps,\n        nextCellsCount: nextProps.rowCount,\n        nextCellSize: typeof nextProps.rowHeight === 'number' ? nextProps.rowHeight : null,\n        nextScrollToIndex: nextProps.scrollToRow,\n        scrollToIndex: instanceProps.prevScrollToRow,\n        updateScrollOffsetForScrollToIndex: function updateScrollOffsetForScrollToIndex() {\n          maybeStateB = Grid._getScrollTopForScrollToRowStateUpdate(nextProps, prevState);\n        }\n      });\n      instanceProps.prevColumnCount = nextProps.columnCount;\n      instanceProps.prevColumnWidth = nextProps.columnWidth;\n      instanceProps.prevIsScrolling = nextProps.isScrolling === true;\n      instanceProps.prevRowCount = nextProps.rowCount;\n      instanceProps.prevRowHeight = nextProps.rowHeight;\n      instanceProps.prevScrollToColumn = nextProps.scrollToColumn;\n      instanceProps.prevScrollToRow = nextProps.scrollToRow; // getting scrollBarSize (moved from componentWillMount)\n\n      instanceProps.scrollbarSize = nextProps.getScrollbarSize();\n\n      if (instanceProps.scrollbarSize === undefined) {\n        instanceProps.scrollbarSizeMeasured = false;\n        instanceProps.scrollbarSize = 0;\n      } else {\n        instanceProps.scrollbarSizeMeasured = true;\n      }\n\n      newState.instanceProps = instanceProps;\n      return _extends({}, newState, maybeStateA, maybeStateB);\n    }\n  }, {\n    key: '_getEstimatedColumnSize',\n    value: function _getEstimatedColumnSize(props) {\n      return typeof props.columnWidth === 'number' ? props.columnWidth : props.estimatedColumnSize;\n    }\n  }, {\n    key: '_getEstimatedRowSize',\n    value: function _getEstimatedRowSize(props) {\n      return typeof props.rowHeight === 'number' ? props.rowHeight : props.estimatedRowSize;\n    }\n  }, {\n    key: '_getScrollToPositionStateUpdate',\n\n    /**\n     * Get the updated state after scrolling to\n     * scrollLeft and scrollTop\n     */\n    value: function _getScrollToPositionStateUpdate(_ref9) {\n      var prevState = _ref9.prevState,\n          scrollLeft = _ref9.scrollLeft,\n          scrollTop = _ref9.scrollTop;\n      var newState = {\n        scrollPositionChangeReason: SCROLL_POSITION_CHANGE_REASONS.REQUESTED\n      };\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0) {\n        newState.scrollDirectionHorizontal = scrollLeft > prevState.scrollLeft ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollLeft = scrollLeft;\n      }\n\n      if (typeof scrollTop === 'number' && scrollTop >= 0) {\n        newState.scrollDirectionVertical = scrollTop > prevState.scrollTop ? SCROLL_DIRECTION_FORWARD : SCROLL_DIRECTION_BACKWARD;\n        newState.scrollTop = scrollTop;\n      }\n\n      if (typeof scrollLeft === 'number' && scrollLeft >= 0 && scrollLeft !== prevState.scrollLeft || typeof scrollTop === 'number' && scrollTop >= 0 && scrollTop !== prevState.scrollTop) {\n        return newState;\n      }\n\n      return null;\n    }\n  }, {\n    key: '_wrapSizeGetter',\n    value: function _wrapSizeGetter(value) {\n      return typeof value === 'function' ? value : function () {\n        return value;\n      };\n    }\n  }, {\n    key: '_getCalculatedScrollLeft',\n    value: function _getCalculatedScrollLeft(nextProps, prevState) {\n      var columnCount = nextProps.columnCount,\n          height = nextProps.height,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToColumn = nextProps.scrollToColumn,\n          width = nextProps.width;\n      var scrollLeft = prevState.scrollLeft,\n          instanceProps = prevState.instanceProps;\n\n      if (columnCount > 0) {\n        var finalColumn = columnCount - 1;\n        var targetIndex = scrollToColumn < 0 ? finalColumn : Math.min(finalColumn, scrollToColumn);\n        var totalRowsHeight = instanceProps.rowSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalRowsHeight > height ? instanceProps.scrollbarSize : 0;\n        return instanceProps.columnSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: width - scrollBarSize,\n          currentOffset: scrollLeft,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: '_getScrollLeftForScrollToColumnStateUpdate',\n    value: function _getScrollLeftForScrollToColumnStateUpdate(nextProps, prevState) {\n      var scrollLeft = prevState.scrollLeft;\n\n      var calculatedScrollLeft = Grid._getCalculatedScrollLeft(nextProps, prevState);\n\n      if (typeof calculatedScrollLeft === 'number' && calculatedScrollLeft >= 0 && scrollLeft !== calculatedScrollLeft) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: calculatedScrollLeft,\n          scrollTop: -1\n        });\n      }\n\n      return null;\n    }\n  }, {\n    key: '_getCalculatedScrollTop',\n    value: function _getCalculatedScrollTop(nextProps, prevState) {\n      var height = nextProps.height,\n          rowCount = nextProps.rowCount,\n          scrollToAlignment = nextProps.scrollToAlignment,\n          scrollToRow = nextProps.scrollToRow,\n          width = nextProps.width;\n      var scrollTop = prevState.scrollTop,\n          instanceProps = prevState.instanceProps;\n\n      if (rowCount > 0) {\n        var finalRow = rowCount - 1;\n        var targetIndex = scrollToRow < 0 ? finalRow : Math.min(finalRow, scrollToRow);\n        var totalColumnsWidth = instanceProps.columnSizeAndPositionManager.getTotalSize();\n        var scrollBarSize = instanceProps.scrollbarSizeMeasured && totalColumnsWidth > width ? instanceProps.scrollbarSize : 0;\n        return instanceProps.rowSizeAndPositionManager.getUpdatedOffsetForIndex({\n          align: scrollToAlignment,\n          containerSize: height - scrollBarSize,\n          currentOffset: scrollTop,\n          targetIndex: targetIndex\n        });\n      }\n\n      return 0;\n    }\n  }, {\n    key: '_getScrollTopForScrollToRowStateUpdate',\n    value: function _getScrollTopForScrollToRowStateUpdate(nextProps, prevState) {\n      var scrollTop = prevState.scrollTop;\n\n      var calculatedScrollTop = Grid._getCalculatedScrollTop(nextProps, prevState);\n\n      if (typeof calculatedScrollTop === 'number' && calculatedScrollTop >= 0 && scrollTop !== calculatedScrollTop) {\n        return Grid._getScrollToPositionStateUpdate({\n          prevState: prevState,\n          scrollLeft: -1,\n          scrollTop: calculatedScrollTop\n        });\n      }\n\n      return null;\n    }\n  }]);\n\n  return Grid;\n}(React.PureComponent);\n\nGrid.defaultProps = {\n  'aria-label': 'grid',\n  'aria-readonly': true,\n  autoContainerWidth: false,\n  autoHeight: false,\n  autoWidth: false,\n  cellRangeRenderer: defaultCellRangeRenderer,\n  containerRole: 'rowgroup',\n  containerStyle: {},\n  estimatedColumnSize: 100,\n  estimatedRowSize: 30,\n  getScrollbarSize: scrollbarSize,\n  noContentRenderer: renderNull,\n  onScroll: function onScroll() {},\n  onScrollbarPresenceChange: function onScrollbarPresenceChange() {},\n  onSectionRendered: function onSectionRendered() {},\n  overscanColumnCount: 0,\n  overscanIndicesGetter: defaultOverscanIndicesGetter,\n  overscanRowCount: 10,\n  role: 'grid',\n  scrollingResetTimeInterval: DEFAULT_SCROLLING_RESET_TIME_INTERVAL,\n  scrollToAlignment: 'auto',\n  scrollToColumn: -1,\n  scrollToRow: -1,\n  style: {},\n  tabIndex: 0,\n  isScrollingOptOut: false\n};\nGrid.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  \"aria-label\": PropTypes.string.isRequired,\n  \"aria-readonly\": PropTypes.bool,\n\n  /**\n   * Set the width of the inner scrollable container to 'auto'.\n   * This is useful for single-column Grids to ensure that the column doesn't extend below a vertical scrollbar.\n   */\n  autoContainerWidth: PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoHeight: PropTypes.bool.isRequired,\n\n  /**\n   * Removes fixed width from the scrollingContainer so that the total width of rows can stretch the window.\n   * Intended for use with WindowScroller\n   */\n  autoWidth: PropTypes.bool.isRequired,\n\n  /** Responsible for rendering a cell given an row and column index.  */\n  cellRenderer: function cellRenderer() {\n    return (typeof bpfrpt_proptype_CellRenderer === 'function' ? bpfrpt_proptype_CellRenderer.isRequired ? bpfrpt_proptype_CellRenderer.isRequired : bpfrpt_proptype_CellRenderer : PropTypes.shape(bpfrpt_proptype_CellRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Responsible for rendering a group of cells given their index ranges.  */\n  cellRangeRenderer: function cellRangeRenderer() {\n    return (typeof bpfrpt_proptype_CellRangeRenderer === 'function' ? bpfrpt_proptype_CellRangeRenderer.isRequired ? bpfrpt_proptype_CellRangeRenderer.isRequired : bpfrpt_proptype_CellRangeRenderer : PropTypes.shape(bpfrpt_proptype_CellRangeRenderer).isRequired).apply(this, arguments);\n  },\n\n  /** Optional custom CSS class name to attach to root Grid element.  */\n  className: PropTypes.string,\n\n  /** Number of columns in grid.  */\n  columnCount: PropTypes.number.isRequired,\n\n  /** Either a fixed column width (number) or a function that returns the width of a column given its index.  */\n  columnWidth: function columnWidth() {\n    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Unfiltered props for the Grid container. */\n  containerProps: PropTypes.object,\n\n  /** ARIA role for the cell-container.  */\n  containerRole: PropTypes.string.isRequired,\n\n  /** Optional inline style applied to inner cell-container */\n  containerStyle: PropTypes.object.isRequired,\n\n  /**\n   * If CellMeasurer is used to measure this Grid's children, this should be a pointer to its CellMeasurerCache.\n   * A shared CellMeasurerCache reference enables Grid and CellMeasurer to share measurement data.\n   */\n  deferredMeasurementCache: PropTypes.object,\n\n  /**\n   * Used to estimate the total width of a Grid before all of its columns have actually been measured.\n   * The estimated total width is adjusted as columns are rendered.\n   */\n  estimatedColumnSize: PropTypes.number.isRequired,\n\n  /**\n   * Used to estimate the total height of a Grid before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: PropTypes.number.isRequired,\n\n  /** Exposed for testing purposes only.  */\n  getScrollbarSize: PropTypes.func.isRequired,\n\n  /** Height of Grid; this property determines the number of visible (vs virtualized) rows.  */\n  height: PropTypes.number.isRequired,\n\n  /** Optional custom id to attach to root Grid element.  */\n  id: PropTypes.string,\n\n  /**\n   * Override internal is-scrolling state tracking.\n   * This property is primarily intended for use with the WindowScroller component.\n   */\n  isScrolling: PropTypes.bool,\n\n  /**\n   * Opt-out of isScrolling param passed to cellRangeRenderer.\n   * To avoid the extra render when scroll stops.\n   */\n  isScrollingOptOut: PropTypes.bool.isRequired,\n\n  /** Optional renderer to be used in place of rows when either :rowCount or :columnCount is 0.  */\n  noContentRenderer: function noContentRenderer() {\n    return (typeof bpfrpt_proptype_NoContentRenderer === 'function' ? bpfrpt_proptype_NoContentRenderer.isRequired ? bpfrpt_proptype_NoContentRenderer.isRequired : bpfrpt_proptype_NoContentRenderer : PropTypes.shape(bpfrpt_proptype_NoContentRenderer).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   */\n  onScroll: PropTypes.func.isRequired,\n\n  /**\n   * Called whenever a horizontal or vertical scrollbar is added or removed.\n   * This prop is not intended for end-user use;\n   * It is used by MultiGrid to support fixed-row/fixed-column scroll syncing.\n   */\n  onScrollbarPresenceChange: PropTypes.func.isRequired,\n\n  /** Callback invoked with information about the section of the Grid that was just rendered.  */\n  onSectionRendered: PropTypes.func.isRequired,\n\n  /**\n   * Number of columns to render before/after the visible section of the grid.\n   * These columns can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanColumnCount: PropTypes.number.isRequired,\n\n  /**\n   * Calculates the number of cells to overscan before and after a specified range.\n   * This function ensures that overscanning doesn't exceed the available cells.\n   */\n  overscanIndicesGetter: function overscanIndicesGetter() {\n    return (typeof bpfrpt_proptype_OverscanIndicesGetter === 'function' ? bpfrpt_proptype_OverscanIndicesGetter.isRequired ? bpfrpt_proptype_OverscanIndicesGetter.isRequired : bpfrpt_proptype_OverscanIndicesGetter : PropTypes.shape(bpfrpt_proptype_OverscanIndicesGetter).isRequired).apply(this, arguments);\n  },\n\n  /**\n   * Number of rows to render above/below the visible section of the grid.\n   * These rows can help for smoother scrolling on touch devices or browsers that send scroll events infrequently.\n   */\n  overscanRowCount: PropTypes.number.isRequired,\n\n  /** ARIA role for the grid element.  */\n  role: PropTypes.string.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * Should implement the following interface: ({ index: number }): number\n   */\n  rowHeight: function rowHeight() {\n    return (typeof bpfrpt_proptype_CellSize === 'function' ? bpfrpt_proptype_CellSize.isRequired ? bpfrpt_proptype_CellSize.isRequired : bpfrpt_proptype_CellSize : PropTypes.shape(bpfrpt_proptype_CellSize).isRequired).apply(this, arguments);\n  },\n\n  /** Number of rows in grid.  */\n  rowCount: PropTypes.number.isRequired,\n\n  /** Wait this amount of time after the last scroll event before resetting Grid `pointer-events`. */\n  scrollingResetTimeInterval: PropTypes.number.isRequired,\n\n  /** Horizontal offset. */\n  scrollLeft: PropTypes.number,\n\n  /**\n   * Controls scroll-to-cell behavior of the Grid.\n   * The default (\"auto\") scrolls the least amount possible to ensure that the specified cell is fully visible.\n   * Use \"start\" to align cells to the top/left of the Grid and \"end\" to align bottom/right.\n   */\n  scrollToAlignment: function scrollToAlignment() {\n    return (typeof bpfrpt_proptype_Alignment === 'function' ? bpfrpt_proptype_Alignment.isRequired ? bpfrpt_proptype_Alignment.isRequired : bpfrpt_proptype_Alignment : PropTypes.shape(bpfrpt_proptype_Alignment).isRequired).apply(this, arguments);\n  },\n\n  /** Column index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToColumn: PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  scrollTop: PropTypes.number,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToRow: PropTypes.number.isRequired,\n\n  /** Optional inline style */\n  style: PropTypes.object.isRequired,\n\n  /** Tab index for focus */\n  tabIndex: PropTypes.number,\n\n  /** Width of Grid; this property determines the number of visible (vs virtualized) columns.  */\n  width: PropTypes.number.isRequired\n};\npolyfill(Grid);\nexport default Grid;\nimport { bpfrpt_proptype_CellRenderer } from './types';\nimport { bpfrpt_proptype_CellRangeRenderer } from './types';\nimport { bpfrpt_proptype_CellPosition } from './types';\nimport { bpfrpt_proptype_CellSize } from './types';\nimport { bpfrpt_proptype_CellSizeGetter } from './types';\nimport { bpfrpt_proptype_NoContentRenderer } from './types';\nimport { bpfrpt_proptype_Scroll } from './types';\nimport { bpfrpt_proptype_ScrollbarPresenceChange } from './types';\nimport { bpfrpt_proptype_RenderedSection } from './types';\nimport { bpfrpt_proptype_OverscanIndicesGetter } from './types';\nimport { bpfrpt_proptype_Alignment } from './types';\nimport { bpfrpt_proptype_CellCache } from './types';\nimport { bpfrpt_proptype_StyleCache } from './types';\nimport { bpfrpt_proptype_AnimationTimeoutId } from '../utils/requestAnimationTimeout';\nimport PropTypes from 'prop-types';","/**\n * Default implementation of cellRangeRenderer used by Grid.\n * This renderer supports cell-caching while the user is scrolling.\n */\nexport default function defaultCellRangeRenderer(_ref) {\n  var cellCache = _ref.cellCache,\n      cellRenderer = _ref.cellRenderer,\n      columnSizeAndPositionManager = _ref.columnSizeAndPositionManager,\n      columnStartIndex = _ref.columnStartIndex,\n      columnStopIndex = _ref.columnStopIndex,\n      deferredMeasurementCache = _ref.deferredMeasurementCache,\n      horizontalOffsetAdjustment = _ref.horizontalOffsetAdjustment,\n      isScrolling = _ref.isScrolling,\n      isScrollingOptOut = _ref.isScrollingOptOut,\n      parent = _ref.parent,\n      rowSizeAndPositionManager = _ref.rowSizeAndPositionManager,\n      rowStartIndex = _ref.rowStartIndex,\n      rowStopIndex = _ref.rowStopIndex,\n      styleCache = _ref.styleCache,\n      verticalOffsetAdjustment = _ref.verticalOffsetAdjustment,\n      visibleColumnIndices = _ref.visibleColumnIndices,\n      visibleRowIndices = _ref.visibleRowIndices;\n  var renderedCells = []; // Browsers have native size limits for elements (eg Chrome 33M pixels, IE 1.5M pixes).\n  // User cannot scroll beyond these size limitations.\n  // In order to work around this, ScalingCellSizeAndPositionManager compresses offsets.\n  // We should never cache styles for compressed offsets though as this can lead to bugs.\n  // See issue #576 for more.\n\n  var areOffsetsAdjusted = columnSizeAndPositionManager.areOffsetsAdjusted() || rowSizeAndPositionManager.areOffsetsAdjusted();\n  var canCacheStyle = !isScrolling && !areOffsetsAdjusted;\n\n  for (var rowIndex = rowStartIndex; rowIndex <= rowStopIndex; rowIndex++) {\n    var rowDatum = rowSizeAndPositionManager.getSizeAndPositionOfCell(rowIndex);\n\n    for (var columnIndex = columnStartIndex; columnIndex <= columnStopIndex; columnIndex++) {\n      var columnDatum = columnSizeAndPositionManager.getSizeAndPositionOfCell(columnIndex);\n      var isVisible = columnIndex >= visibleColumnIndices.start && columnIndex <= visibleColumnIndices.stop && rowIndex >= visibleRowIndices.start && rowIndex <= visibleRowIndices.stop;\n      var key = rowIndex + '-' + columnIndex;\n      var style = void 0; // Cache style objects so shallow-compare doesn't re-render unnecessarily.\n\n      if (canCacheStyle && styleCache[key]) {\n        style = styleCache[key];\n      } else {\n        // In deferred mode, cells will be initially rendered before we know their size.\n        // Don't interfere with CellMeasurer's measurements by setting an invalid size.\n        if (deferredMeasurementCache && !deferredMeasurementCache.has(rowIndex, columnIndex)) {\n          // Position not-yet-measured cells at top/left 0,0,\n          // And give them width/height of 'auto' so they can grow larger than the parent Grid if necessary.\n          // Positioning them further to the right/bottom influences their measured size.\n          style = {\n            height: 'auto',\n            left: 0,\n            position: 'absolute',\n            top: 0,\n            width: 'auto'\n          };\n        } else {\n          style = {\n            height: rowDatum.size,\n            left: columnDatum.offset + horizontalOffsetAdjustment,\n            position: 'absolute',\n            top: rowDatum.offset + verticalOffsetAdjustment,\n            width: columnDatum.size\n          };\n          styleCache[key] = style;\n        }\n      }\n\n      var cellRendererParams = {\n        columnIndex: columnIndex,\n        isScrolling: isScrolling,\n        isVisible: isVisible,\n        key: key,\n        parent: parent,\n        rowIndex: rowIndex,\n        style: style\n      };\n      var renderedCell = void 0; // Avoid re-creating cells while scrolling.\n      // This can lead to the same cell being created many times and can cause performance issues for \"heavy\" cells.\n      // If a scroll is in progress- cache and reuse cells.\n      // This cache will be thrown away once scrolling completes.\n      // However if we are scaling scroll positions and sizes, we should also avoid caching.\n      // This is because the offset changes slightly as scroll position changes and caching leads to stale values.\n      // For more info refer to issue #395\n      //\n      // If isScrollingOptOut is specified, we always cache cells.\n      // For more info refer to issue #1028\n\n      if ((isScrollingOptOut || isScrolling) && !horizontalOffsetAdjustment && !verticalOffsetAdjustment) {\n        if (!cellCache[key]) {\n          cellCache[key] = cellRenderer(cellRendererParams);\n        }\n\n        renderedCell = cellCache[key]; // If the user is no longer scrolling, don't cache cells.\n        // This makes dynamic cell content difficult for users and would also lead to a heavier memory footprint.\n      } else {\n        renderedCell = cellRenderer(cellRendererParams);\n      }\n\n      if (renderedCell == null || renderedCell === false) {\n        continue;\n      }\n\n      if (process.env.NODE_ENV !== 'production') {\n        warnAboutMissingStyle(parent, renderedCell);\n      }\n\n      renderedCells.push(renderedCell);\n    }\n  }\n\n  return renderedCells;\n}\n\nfunction warnAboutMissingStyle(parent, renderedCell) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (renderedCell) {\n      // If the direct child is a CellMeasurer, then we should check its child\n      // See issue #611\n      if (renderedCell.type && renderedCell.type.__internalCellMeasurerFlag) {\n        renderedCell = renderedCell.props.children;\n      }\n\n      if (renderedCell && renderedCell.props && renderedCell.props.style === undefined && parent.__warnedAboutMissingStyle !== true) {\n        parent.__warnedAboutMissingStyle = true;\n        console.warn('Rendered cell should include style property for positioning.');\n      }\n    }\n  }\n}\n\nimport { bpfrpt_proptype_CellRangeRendererParams } from './types';","export var SCROLL_DIRECTION_BACKWARD = -1;\nexport var SCROLL_DIRECTION_FORWARD = 1;\nexport var SCROLL_DIRECTION_HORIZONTAL = 'horizontal';\nexport var SCROLL_DIRECTION_VERTICAL = 'vertical';\n/**\n * Calculates the number of cells to overscan before and after a specified range.\n * This function ensures that overscanning doesn't exceed the available cells.\n */\n\nexport default function defaultOverscanIndicesGetter(_ref) {\n  var cellCount = _ref.cellCount,\n      overscanCellsCount = _ref.overscanCellsCount,\n      scrollDirection = _ref.scrollDirection,\n      startIndex = _ref.startIndex,\n      stopIndex = _ref.stopIndex; // Make sure we render at least 1 cell extra before and after (except near boundaries)\n  // This is necessary in order to support keyboard navigation (TAB/SHIFT+TAB) in some cases\n  // For more info see issues #625\n\n  overscanCellsCount = Math.max(1, overscanCellsCount);\n\n  if (scrollDirection === SCROLL_DIRECTION_FORWARD) {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - 1),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + overscanCellsCount)\n    };\n  } else {\n    return {\n      overscanStartIndex: Math.max(0, startIndex - overscanCellsCount),\n      overscanStopIndex: Math.min(cellCount - 1, stopIndex + 1)\n    };\n  }\n}\nimport { bpfrpt_proptype_OverscanIndicesGetterParams } from './types';\nimport { bpfrpt_proptype_OverscanIndices } from './types';","import _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport clsx from 'clsx';\nimport Column from './Column';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { findDOMNode } from 'react-dom';\nimport Grid, { accessibilityOverscanIndicesGetter } from '../Grid';\nimport defaultRowRenderer from './defaultRowRenderer';\nimport defaultHeaderRowRenderer from './defaultHeaderRowRenderer';\nimport SortDirection from './SortDirection';\n/**\n * Table component with fixed headers and virtualized rows for improved performance with large data sets.\n * This component expects explicit width, height, and padding parameters.\n */\n\nvar Table = function (_React$PureComponent) {\n  _inherits(Table, _React$PureComponent);\n\n  function Table(props) {\n    _classCallCheck(this, Table);\n\n    var _this = _possibleConstructorReturn(this, (Table.__proto__ || _Object$getPrototypeOf(Table)).call(this, props));\n\n    _this.state = {\n      scrollbarWidth: 0\n    };\n    _this._createColumn = _this._createColumn.bind(_this);\n    _this._createRow = _this._createRow.bind(_this);\n    _this._onScroll = _this._onScroll.bind(_this);\n    _this._onSectionRendered = _this._onSectionRendered.bind(_this);\n    _this._setRef = _this._setRef.bind(_this);\n    return _this;\n  }\n\n  _createClass(Table, [{\n    key: 'forceUpdateGrid',\n    value: function forceUpdateGrid() {\n      if (this.Grid) {\n        this.Grid.forceUpdate();\n      }\n    }\n    /** See Grid#getOffsetForCell */\n\n  }, {\n    key: 'getOffsetForRow',\n    value: function getOffsetForRow(_ref) {\n      var alignment = _ref.alignment,\n          index = _ref.index;\n\n      if (this.Grid) {\n        var _Grid$getOffsetForCel = this.Grid.getOffsetForCell({\n          alignment: alignment,\n          rowIndex: index\n        }),\n            scrollTop = _Grid$getOffsetForCel.scrollTop;\n\n        return scrollTop;\n      }\n\n      return 0;\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: 'invalidateCellSizeAfterRender',\n    value: function invalidateCellSizeAfterRender(_ref2) {\n      var columnIndex = _ref2.columnIndex,\n          rowIndex = _ref2.rowIndex;\n\n      if (this.Grid) {\n        this.Grid.invalidateCellSizeAfterRender({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#measureAllCells */\n\n  }, {\n    key: 'measureAllRows',\n    value: function measureAllRows() {\n      if (this.Grid) {\n        this.Grid.measureAllCells();\n      }\n    }\n    /** CellMeasurer compatibility */\n\n  }, {\n    key: 'recomputeGridSize',\n    value: function recomputeGridSize() {\n      var _ref3 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref3$columnIndex = _ref3.columnIndex,\n          columnIndex = _ref3$columnIndex === undefined ? 0 : _ref3$columnIndex,\n          _ref3$rowIndex = _ref3.rowIndex,\n          rowIndex = _ref3$rowIndex === undefined ? 0 : _ref3$rowIndex;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: rowIndex,\n          columnIndex: columnIndex\n        });\n      }\n    }\n    /** See Grid#recomputeGridSize */\n\n  }, {\n    key: 'recomputeRowHeights',\n    value: function recomputeRowHeights() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.recomputeGridSize({\n          rowIndex: index\n        });\n      }\n    }\n    /** See Grid#scrollToPosition */\n\n  }, {\n    key: 'scrollToPosition',\n    value: function scrollToPosition() {\n      var scrollTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToPosition({\n          scrollTop: scrollTop\n        });\n      }\n    }\n    /** See Grid#scrollToCell */\n\n  }, {\n    key: 'scrollToRow',\n    value: function scrollToRow() {\n      var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n\n      if (this.Grid) {\n        this.Grid.scrollToCell({\n          columnIndex: 0,\n          rowIndex: index\n        });\n      }\n    }\n  }, {\n    key: 'getScrollbarWidth',\n    value: function getScrollbarWidth() {\n      if (this.Grid) {\n        var _Grid = findDOMNode(this.Grid);\n\n        var clientWidth = _Grid.clientWidth || 0;\n        var offsetWidth = _Grid.offsetWidth || 0;\n        return offsetWidth - clientWidth;\n      }\n\n      return 0;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      this._setScrollbarWidth();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      this._setScrollbarWidth();\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _this2 = this;\n\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          disableHeader = _props.disableHeader,\n          gridClassName = _props.gridClassName,\n          gridStyle = _props.gridStyle,\n          headerHeight = _props.headerHeight,\n          headerRowRenderer = _props.headerRowRenderer,\n          height = _props.height,\n          id = _props.id,\n          noRowsRenderer = _props.noRowsRenderer,\n          rowClassName = _props.rowClassName,\n          rowStyle = _props.rowStyle,\n          scrollToIndex = _props.scrollToIndex,\n          style = _props.style,\n          width = _props.width;\n      var scrollbarWidth = this.state.scrollbarWidth;\n      var availableRowsHeight = disableHeader ? height : height - headerHeight;\n      var rowClass = typeof rowClassName === 'function' ? rowClassName({\n        index: -1\n      }) : rowClassName;\n      var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({\n        index: -1\n      }) : rowStyle; // Precompute and cache column styles before rendering rows and columns to speed things up\n\n      this._cachedColumnStyles = [];\n      React.Children.toArray(children).forEach(function (column, index) {\n        var flexStyles = _this2._getFlexStyleForColumn(column, column.props.style);\n\n        _this2._cachedColumnStyles[index] = _extends({\n          overflow: 'hidden'\n        }, flexStyles);\n      }); // Note that we specify :rowCount, :scrollbarWidth, :sortBy, and :sortDirection as properties on Grid even though these have nothing to do with Grid.\n      // This is done because Grid is a pure component and won't update unless its properties or state has changed.\n      // Any property that should trigger a re-render of Grid then is specified here to avoid a stale display.\n\n      return React.createElement('div', {\n        'aria-label': this.props['aria-label'],\n        'aria-labelledby': this.props['aria-labelledby'],\n        'aria-colcount': React.Children.toArray(children).length,\n        'aria-rowcount': this.props.rowCount,\n        className: clsx('ReactVirtualized__Table', className),\n        id: id,\n        role: 'grid',\n        style: style\n      }, !disableHeader && headerRowRenderer({\n        className: clsx('ReactVirtualized__Table__headerRow', rowClass),\n        columns: this._getHeaderColumns(),\n        style: _extends({\n          height: headerHeight,\n          overflow: 'hidden',\n          paddingRight: scrollbarWidth,\n          width: width\n        }, rowStyleObject)\n      }), React.createElement(Grid, _extends({}, this.props, {\n        'aria-readonly': null,\n        autoContainerWidth: true,\n        className: clsx('ReactVirtualized__Table__Grid', gridClassName),\n        cellRenderer: this._createRow,\n        columnWidth: width,\n        columnCount: 1,\n        height: availableRowsHeight,\n        id: undefined,\n        noContentRenderer: noRowsRenderer,\n        onScroll: this._onScroll,\n        onSectionRendered: this._onSectionRendered,\n        ref: this._setRef,\n        role: 'rowgroup',\n        scrollbarWidth: scrollbarWidth,\n        scrollToRow: scrollToIndex,\n        style: _extends({}, gridStyle, {\n          overflowX: 'hidden'\n        })\n      })));\n    }\n  }, {\n    key: '_createColumn',\n    value: function _createColumn(_ref4) {\n      var column = _ref4.column,\n          columnIndex = _ref4.columnIndex,\n          isScrolling = _ref4.isScrolling,\n          parent = _ref4.parent,\n          rowData = _ref4.rowData,\n          rowIndex = _ref4.rowIndex;\n      var onColumnClick = this.props.onColumnClick;\n      var _column$props = column.props,\n          cellDataGetter = _column$props.cellDataGetter,\n          cellRenderer = _column$props.cellRenderer,\n          className = _column$props.className,\n          columnData = _column$props.columnData,\n          dataKey = _column$props.dataKey,\n          id = _column$props.id;\n      var cellData = cellDataGetter({\n        columnData: columnData,\n        dataKey: dataKey,\n        rowData: rowData\n      });\n      var renderedCell = cellRenderer({\n        cellData: cellData,\n        columnData: columnData,\n        columnIndex: columnIndex,\n        dataKey: dataKey,\n        isScrolling: isScrolling,\n        parent: parent,\n        rowData: rowData,\n        rowIndex: rowIndex\n      });\n\n      var onClick = function onClick(event) {\n        onColumnClick && onColumnClick({\n          columnData: columnData,\n          dataKey: dataKey,\n          event: event\n        });\n      };\n\n      var style = this._cachedColumnStyles[columnIndex];\n      var title = typeof renderedCell === 'string' ? renderedCell : null; // Avoid using object-spread syntax with multiple objects here,\n      // Since it results in an extra method call to 'babel-runtime/helpers/extends'\n      // See PR https://github.com/bvaughn/react-virtualized/pull/942\n\n      return React.createElement('div', {\n        'aria-colindex': columnIndex + 1,\n        'aria-describedby': id,\n        className: clsx('ReactVirtualized__Table__rowColumn', className),\n        key: 'Row' + rowIndex + '-' + 'Col' + columnIndex,\n        onClick: onClick,\n        role: 'gridcell',\n        style: style,\n        title: title\n      }, renderedCell);\n    }\n  }, {\n    key: '_createHeader',\n    value: function _createHeader(_ref5) {\n      var column = _ref5.column,\n          index = _ref5.index;\n      var _props2 = this.props,\n          headerClassName = _props2.headerClassName,\n          headerStyle = _props2.headerStyle,\n          onHeaderClick = _props2.onHeaderClick,\n          sort = _props2.sort,\n          sortBy = _props2.sortBy,\n          sortDirection = _props2.sortDirection;\n      var _column$props2 = column.props,\n          columnData = _column$props2.columnData,\n          dataKey = _column$props2.dataKey,\n          defaultSortDirection = _column$props2.defaultSortDirection,\n          disableSort = _column$props2.disableSort,\n          headerRenderer = _column$props2.headerRenderer,\n          id = _column$props2.id,\n          label = _column$props2.label;\n      var sortEnabled = !disableSort && sort;\n      var classNames = clsx('ReactVirtualized__Table__headerColumn', headerClassName, column.props.headerClassName, {\n        ReactVirtualized__Table__sortableHeaderColumn: sortEnabled\n      });\n\n      var style = this._getFlexStyleForColumn(column, _extends({}, headerStyle, column.props.headerStyle));\n\n      var renderedHeader = headerRenderer({\n        columnData: columnData,\n        dataKey: dataKey,\n        disableSort: disableSort,\n        label: label,\n        sortBy: sortBy,\n        sortDirection: sortDirection\n      });\n      var headerOnClick = void 0,\n          headerOnKeyDown = void 0,\n          headerTabIndex = void 0,\n          headerAriaSort = void 0,\n          headerAriaLabel = void 0;\n\n      if (sortEnabled || onHeaderClick) {\n        // If this is a sortable header, clicking it should update the table data's sorting.\n        var isFirstTimeSort = sortBy !== dataKey; // If this is the firstTime sort of this column, use the column default sort order.\n        // Otherwise, invert the direction of the sort.\n\n        var newSortDirection = isFirstTimeSort ? defaultSortDirection : sortDirection === SortDirection.DESC ? SortDirection.ASC : SortDirection.DESC;\n\n        var onClick = function onClick(event) {\n          sortEnabled && sort({\n            defaultSortDirection: defaultSortDirection,\n            event: event,\n            sortBy: dataKey,\n            sortDirection: newSortDirection\n          });\n          onHeaderClick && onHeaderClick({\n            columnData: columnData,\n            dataKey: dataKey,\n            event: event\n          });\n        };\n\n        var onKeyDown = function onKeyDown(event) {\n          if (event.key === 'Enter' || event.key === ' ') {\n            onClick(event);\n          }\n        };\n\n        headerAriaLabel = column.props['aria-label'] || label || dataKey;\n        headerAriaSort = 'none';\n        headerTabIndex = 0;\n        headerOnClick = onClick;\n        headerOnKeyDown = onKeyDown;\n      }\n\n      if (sortBy === dataKey) {\n        headerAriaSort = sortDirection === SortDirection.ASC ? 'ascending' : 'descending';\n      } // Avoid using object-spread syntax with multiple objects here,\n      // Since it results in an extra method call to 'babel-runtime/helpers/extends'\n      // See PR https://github.com/bvaughn/react-virtualized/pull/942\n\n\n      return React.createElement('div', {\n        'aria-label': headerAriaLabel,\n        'aria-sort': headerAriaSort,\n        className: classNames,\n        id: id,\n        key: 'Header-Col' + index,\n        onClick: headerOnClick,\n        onKeyDown: headerOnKeyDown,\n        role: 'columnheader',\n        style: style,\n        tabIndex: headerTabIndex\n      }, renderedHeader);\n    }\n  }, {\n    key: '_createRow',\n    value: function _createRow(_ref6) {\n      var _this3 = this;\n\n      var index = _ref6.rowIndex,\n          isScrolling = _ref6.isScrolling,\n          key = _ref6.key,\n          parent = _ref6.parent,\n          style = _ref6.style;\n      var _props3 = this.props,\n          children = _props3.children,\n          onRowClick = _props3.onRowClick,\n          onRowDoubleClick = _props3.onRowDoubleClick,\n          onRowRightClick = _props3.onRowRightClick,\n          onRowMouseOver = _props3.onRowMouseOver,\n          onRowMouseOut = _props3.onRowMouseOut,\n          rowClassName = _props3.rowClassName,\n          rowGetter = _props3.rowGetter,\n          rowRenderer = _props3.rowRenderer,\n          rowStyle = _props3.rowStyle;\n      var scrollbarWidth = this.state.scrollbarWidth;\n      var rowClass = typeof rowClassName === 'function' ? rowClassName({\n        index: index\n      }) : rowClassName;\n      var rowStyleObject = typeof rowStyle === 'function' ? rowStyle({\n        index: index\n      }) : rowStyle;\n      var rowData = rowGetter({\n        index: index\n      });\n      var columns = React.Children.toArray(children).map(function (column, columnIndex) {\n        return _this3._createColumn({\n          column: column,\n          columnIndex: columnIndex,\n          isScrolling: isScrolling,\n          parent: parent,\n          rowData: rowData,\n          rowIndex: index,\n          scrollbarWidth: scrollbarWidth\n        });\n      });\n      var className = clsx('ReactVirtualized__Table__row', rowClass);\n\n      var flattenedStyle = _extends({}, style, {\n        height: this._getRowHeight(index),\n        overflow: 'hidden',\n        paddingRight: scrollbarWidth\n      }, rowStyleObject);\n\n      return rowRenderer({\n        className: className,\n        columns: columns,\n        index: index,\n        isScrolling: isScrolling,\n        key: key,\n        onRowClick: onRowClick,\n        onRowDoubleClick: onRowDoubleClick,\n        onRowRightClick: onRowRightClick,\n        onRowMouseOver: onRowMouseOver,\n        onRowMouseOut: onRowMouseOut,\n        rowData: rowData,\n        style: flattenedStyle\n      });\n    }\n    /**\n     * Determines the flex-shrink, flex-grow, and width values for a cell (header or column).\n     */\n\n  }, {\n    key: '_getFlexStyleForColumn',\n    value: function _getFlexStyleForColumn(column) {\n      var customStyle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var flexValue = column.props.flexGrow + ' ' + column.props.flexShrink + ' ' + column.props.width + 'px';\n\n      var style = _extends({}, customStyle, {\n        flex: flexValue,\n        msFlex: flexValue,\n        WebkitFlex: flexValue\n      });\n\n      if (column.props.maxWidth) {\n        style.maxWidth = column.props.maxWidth;\n      }\n\n      if (column.props.minWidth) {\n        style.minWidth = column.props.minWidth;\n      }\n\n      return style;\n    }\n  }, {\n    key: '_getHeaderColumns',\n    value: function _getHeaderColumns() {\n      var _this4 = this;\n\n      var _props4 = this.props,\n          children = _props4.children,\n          disableHeader = _props4.disableHeader;\n      var items = disableHeader ? [] : React.Children.toArray(children);\n      return items.map(function (column, index) {\n        return _this4._createHeader({\n          column: column,\n          index: index\n        });\n      });\n    }\n  }, {\n    key: '_getRowHeight',\n    value: function _getRowHeight(rowIndex) {\n      var rowHeight = this.props.rowHeight;\n      return typeof rowHeight === 'function' ? rowHeight({\n        index: rowIndex\n      }) : rowHeight;\n    }\n  }, {\n    key: '_onScroll',\n    value: function _onScroll(_ref7) {\n      var clientHeight = _ref7.clientHeight,\n          scrollHeight = _ref7.scrollHeight,\n          scrollTop = _ref7.scrollTop;\n      var onScroll = this.props.onScroll;\n      onScroll({\n        clientHeight: clientHeight,\n        scrollHeight: scrollHeight,\n        scrollTop: scrollTop\n      });\n    }\n  }, {\n    key: '_onSectionRendered',\n    value: function _onSectionRendered(_ref8) {\n      var rowOverscanStartIndex = _ref8.rowOverscanStartIndex,\n          rowOverscanStopIndex = _ref8.rowOverscanStopIndex,\n          rowStartIndex = _ref8.rowStartIndex,\n          rowStopIndex = _ref8.rowStopIndex;\n      var onRowsRendered = this.props.onRowsRendered;\n      onRowsRendered({\n        overscanStartIndex: rowOverscanStartIndex,\n        overscanStopIndex: rowOverscanStopIndex,\n        startIndex: rowStartIndex,\n        stopIndex: rowStopIndex\n      });\n    }\n  }, {\n    key: '_setRef',\n    value: function _setRef(ref) {\n      this.Grid = ref;\n    }\n  }, {\n    key: '_setScrollbarWidth',\n    value: function _setScrollbarWidth() {\n      var scrollbarWidth = this.getScrollbarWidth();\n      this.setState({\n        scrollbarWidth: scrollbarWidth\n      });\n    }\n  }]);\n\n  return Table;\n}(React.PureComponent);\n\nTable.defaultProps = {\n  disableHeader: false,\n  estimatedRowSize: 30,\n  headerHeight: 0,\n  headerStyle: {},\n  noRowsRenderer: function noRowsRenderer() {\n    return null;\n  },\n  onRowsRendered: function onRowsRendered() {\n    return null;\n  },\n  onScroll: function onScroll() {\n    return null;\n  },\n  overscanIndicesGetter: accessibilityOverscanIndicesGetter,\n  overscanRowCount: 10,\n  rowRenderer: defaultRowRenderer,\n  headerRowRenderer: defaultHeaderRowRenderer,\n  rowStyle: {},\n  scrollToAlignment: 'auto',\n  scrollToIndex: -1,\n  style: {}\n};\nexport default Table;\nTable.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** This is just set on the grid top element. */\n  'aria-label': PropTypes.string,\n\n  /** This is just set on the grid top element. */\n  'aria-labelledby': PropTypes.string,\n\n  /**\n   * Removes fixed height from the scrollingContainer so that the total height\n   * of rows can stretch the window. Intended for use with WindowScroller\n   */\n  autoHeight: PropTypes.bool,\n\n  /** One or more Columns describing the data displayed in this row */\n  children: function children(props) {\n    var children = React.Children.toArray(props.children);\n\n    for (var i = 0; i < children.length; i++) {\n      var childType = children[i].type;\n\n      if (childType !== Column && !(childType.prototype instanceof Column)) {\n        return new Error('Table only accepts children of type Column');\n      }\n    }\n  },\n\n  /** Optional CSS class name */\n  className: PropTypes.string,\n\n  /** Disable rendering the header at all */\n  disableHeader: PropTypes.bool,\n\n  /**\n   * Used to estimate the total height of a Table before all of its rows have actually been measured.\n   * The estimated total height is adjusted as rows are rendered.\n   */\n  estimatedRowSize: PropTypes.number.isRequired,\n\n  /** Optional custom CSS class name to attach to inner Grid element. */\n  gridClassName: PropTypes.string,\n\n  /** Optional inline style to attach to inner Grid element. */\n  gridStyle: PropTypes.object,\n\n  /** Optional CSS class to apply to all column headers */\n  headerClassName: PropTypes.string,\n\n  /** Fixed height of header row */\n  headerHeight: PropTypes.number.isRequired,\n\n  /**\n   * Responsible for rendering a table row given an array of columns:\n   * Should implement the following interface: ({\n   *   className: string,\n   *   columns: any[],\n   *   style: any\n   * }): PropTypes.node\n   */\n  headerRowRenderer: PropTypes.func,\n\n  /** Optional custom inline style to attach to table header columns. */\n  headerStyle: PropTypes.object,\n\n  /** Fixed/available height for out DOM element */\n  height: PropTypes.number.isRequired,\n\n  /** Optional id */\n  id: PropTypes.string,\n\n  /** Optional renderer to be used in place of table body rows when rowCount is 0 */\n  noRowsRenderer: PropTypes.func,\n\n  /**\n   * Optional callback when a column is clicked.\n   * ({ columnData: any, dataKey: string }): void\n   */\n  onColumnClick: PropTypes.func,\n\n  /**\n   * Optional callback when a column's header is clicked.\n   * ({ columnData: any, dataKey: string }): void\n   */\n  onHeaderClick: PropTypes.func,\n\n  /**\n   * Callback invoked when a user clicks on a table row.\n   * ({ index: number }): void\n   */\n  onRowClick: PropTypes.func,\n\n  /**\n   * Callback invoked when a user double-clicks on a table row.\n   * ({ index: number }): void\n   */\n  onRowDoubleClick: PropTypes.func,\n\n  /**\n   * Callback invoked when the mouse leaves a table row.\n   * ({ index: number }): void\n   */\n  onRowMouseOut: PropTypes.func,\n\n  /**\n   * Callback invoked when a user moves the mouse over a table row.\n   * ({ index: number }): void\n   */\n  onRowMouseOver: PropTypes.func,\n\n  /**\n   * Callback invoked when a user right-clicks on a table row.\n   * ({ index: number }): void\n   */\n  onRowRightClick: PropTypes.func,\n\n  /**\n   * Callback invoked with information about the slice of rows that were just rendered.\n   * ({ startIndex, stopIndex }): void\n   */\n  onRowsRendered: PropTypes.func,\n\n  /**\n   * Callback invoked whenever the scroll offset changes within the inner scrollable region.\n   * This callback can be used to sync scrolling between lists, tables, or grids.\n   * ({ clientHeight, scrollHeight, scrollTop }): void\n   */\n  onScroll: PropTypes.func.isRequired,\n\n  /** See Grid#overscanIndicesGetter */\n  overscanIndicesGetter: PropTypes.func.isRequired,\n\n  /**\n   * Number of rows to render above/below the visible bounds of the list.\n   * These rows can help for smoother scrolling on touch devices.\n   */\n  overscanRowCount: PropTypes.number.isRequired,\n\n  /**\n   * Optional CSS class to apply to all table rows (including the header row).\n   * This property can be a CSS class name (string) or a function that returns a class name.\n   * If a function is provided its signature should be: ({ index: number }): string\n   */\n  rowClassName: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n\n  /**\n   * Callback responsible for returning a data row given an index.\n   * ({ index: number }): any\n   */\n  rowGetter: PropTypes.func.isRequired,\n\n  /**\n   * Either a fixed row height (number) or a function that returns the height of a row given its index.\n   * ({ index: number }): number\n   */\n  rowHeight: PropTypes.oneOfType([PropTypes.number, PropTypes.func]).isRequired,\n\n  /** Number of rows in table. */\n  rowCount: PropTypes.number.isRequired,\n\n  /**\n   * Responsible for rendering a table row given an array of columns:\n   * Should implement the following interface: ({\n   *   className: string,\n   *   columns: Array,\n   *   index: number,\n   *   isScrolling: boolean,\n   *   onRowClick: ?Function,\n   *   onRowDoubleClick: ?Function,\n   *   onRowMouseOver: ?Function,\n   *   onRowMouseOut: ?Function,\n   *   rowData: any,\n   *   style: any\n   * }): PropTypes.node\n   */\n  rowRenderer: PropTypes.func,\n\n  /** Optional custom inline style to attach to table rows. */\n  rowStyle: PropTypes.oneOfType([PropTypes.object, PropTypes.func]).isRequired,\n\n  /** See Grid#scrollToAlignment */\n  scrollToAlignment: PropTypes.oneOf(['auto', 'end', 'start', 'center']).isRequired,\n\n  /** Row index to ensure visible (by forcefully scrolling if necessary) */\n  scrollToIndex: PropTypes.number.isRequired,\n\n  /** Vertical offset. */\n  scrollTop: PropTypes.number,\n\n  /**\n   * Sort function to be called if a sortable header is clicked.\n   * Should implement the following interface: ({\n   *   defaultSortDirection: 'ASC' | 'DESC',\n   *   event: MouseEvent,\n   *   sortBy: string,\n   *   sortDirection: SortDirection\n   * }): void\n   */\n  sort: PropTypes.func,\n\n  /** Table data is currently sorted by this :dataKey (if it is sorted at all) */\n  sortBy: PropTypes.string,\n\n  /** Table data is currently sorted in this direction (if it is sorted at all) */\n  sortDirection: PropTypes.oneOf([SortDirection.ASC, SortDirection.DESC]),\n\n  /** Optional inline style */\n  style: PropTypes.object,\n\n  /** Tab index for focus */\n  tabIndex: PropTypes.number,\n\n  /** Width of list */\n  width: PropTypes.number.isRequired\n} : {};\nimport { bpfrpt_proptype_CellPosition } from '../Grid';","import createMultiSort from './createMultiSort';\nimport defaultCellDataGetter from './defaultCellDataGetter';\nimport defaultCellRenderer from './defaultCellRenderer';\nimport defaultHeaderRowRenderer from './defaultHeaderRowRenderer.js';\nimport defaultHeaderRenderer from './defaultHeaderRenderer';\nimport defaultRowRenderer from './defaultRowRenderer';\nimport Column from './Column';\nimport SortDirection from './SortDirection';\nimport SortIndicator from './SortIndicator';\nimport Table from './Table';\nexport default Table;\nexport { createMultiSort, defaultCellDataGetter, defaultCellRenderer, defaultHeaderRowRenderer, defaultHeaderRenderer, defaultRowRenderer, Column, SortDirection, SortIndicator, Table };","import _extends from 'babel-runtime/helpers/extends';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport createDetectElementResize from '../vendor/detectElementResize';\n\nvar AutoSizer = function (_React$PureComponent) {\n  _inherits(AutoSizer, _React$PureComponent);\n\n  function AutoSizer() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, AutoSizer);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AutoSizer.__proto__ || _Object$getPrototypeOf(AutoSizer)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      height: _this.props.defaultHeight || 0,\n      width: _this.props.defaultWidth || 0\n    }, _this._onResize = function () {\n      var _this$props = _this.props,\n          disableHeight = _this$props.disableHeight,\n          disableWidth = _this$props.disableWidth,\n          onResize = _this$props.onResize;\n\n      if (_this._parentNode) {\n        // Guard against AutoSizer component being removed from the DOM immediately after being added.\n        // This can result in invalid style values which can result in NaN values if we don't handle them.\n        // See issue #150 for more context.\n        var _height = _this._parentNode.offsetHeight || 0;\n\n        var _width = _this._parentNode.offsetWidth || 0;\n\n        var win = _this._window || window;\n\n        var _style = win.getComputedStyle(_this._parentNode) || {};\n\n        var paddingLeft = parseInt(_style.paddingLeft, 10) || 0;\n        var paddingRight = parseInt(_style.paddingRight, 10) || 0;\n        var paddingTop = parseInt(_style.paddingTop, 10) || 0;\n        var paddingBottom = parseInt(_style.paddingBottom, 10) || 0;\n        var newHeight = _height - paddingTop - paddingBottom;\n        var newWidth = _width - paddingLeft - paddingRight;\n\n        if (!disableHeight && _this.state.height !== newHeight || !disableWidth && _this.state.width !== newWidth) {\n          _this.setState({\n            height: _height - paddingTop - paddingBottom,\n            width: _width - paddingLeft - paddingRight\n          });\n\n          onResize({\n            height: _height,\n            width: _width\n          });\n        }\n      }\n    }, _this._setRef = function (autoSizer) {\n      _this._autoSizer = autoSizer;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  } // uses any instead of Window because Flow doesn't have window type\n\n\n  _createClass(AutoSizer, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var nonce = this.props.nonce;\n\n      if (this._autoSizer && this._autoSizer.parentNode && this._autoSizer.parentNode.ownerDocument && this._autoSizer.parentNode.ownerDocument.defaultView && this._autoSizer.parentNode instanceof this._autoSizer.parentNode.ownerDocument.defaultView.HTMLElement) {\n        // Delay access of parentNode until mount.\n        // This handles edge-cases where the component has already been unmounted before its ref has been set,\n        // As well as libraries like react-lite which have a slightly different lifecycle.\n        this._parentNode = this._autoSizer.parentNode;\n        this._window = this._autoSizer.parentNode.ownerDocument.defaultView; // Defer requiring resize handler in order to support server-side rendering.\n        // See issue #41\n\n        this._detectElementResize = createDetectElementResize(nonce, this._window);\n\n        this._detectElementResize.addResizeListener(this._parentNode, this._onResize);\n\n        this._onResize();\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      if (this._detectElementResize && this._parentNode) {\n        this._detectElementResize.removeResizeListener(this._parentNode, this._onResize);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          disableHeight = _props.disableHeight,\n          disableWidth = _props.disableWidth,\n          style = _props.style;\n      var _state = this.state,\n          height = _state.height,\n          width = _state.width; // Outer div should not force width/height since that may prevent containers from shrinking.\n      // Inner component should overflow and use calculated width/height.\n      // See issue #68 for more information.\n\n      var outerStyle = {\n        overflow: 'visible'\n      };\n      var childParams = {};\n\n      if (!disableHeight) {\n        outerStyle.height = 0;\n        childParams.height = height;\n      }\n\n      if (!disableWidth) {\n        outerStyle.width = 0;\n        childParams.width = width;\n      }\n      /**\n       * TODO: Avoid rendering children before the initial measurements have been collected.\n       * At best this would just be wasting cycles.\n       * Add this check into version 10 though as it could break too many ref callbacks in version 9.\n       * Note that if default width/height props were provided this would still work with SSR.\n      if (\n        height !== 0 &&\n        width !== 0\n      ) {\n        child = children({ height, width })\n      }\n      */\n\n\n      return React.createElement('div', {\n        className: className,\n        ref: this._setRef,\n        style: _extends({}, outerStyle, style)\n      }, children(childParams));\n    }\n  }]);\n\n  return AutoSizer;\n}(React.PureComponent);\n\nAutoSizer.defaultProps = {\n  onResize: function onResize() {},\n  disableHeight: false,\n  disableWidth: false,\n  style: {}\n};\nAutoSizer.propTypes = process.env.NODE_ENV === 'production' ? null : {\n  /** Function responsible for rendering children.*/\n  children: PropTypes.func.isRequired,\n\n  /** Optional custom CSS class name to attach to root AutoSizer element.  */\n  className: PropTypes.string,\n\n  /** Default height to use for initial render; useful for SSR */\n  defaultHeight: PropTypes.number,\n\n  /** Default width to use for initial render; useful for SSR */\n  defaultWidth: PropTypes.number,\n\n  /** Disable dynamic :height property */\n  disableHeight: PropTypes.bool.isRequired,\n\n  /** Disable dynamic :width property */\n  disableWidth: PropTypes.bool.isRequired,\n\n  /** Nonce of the inlined stylesheet for Content Security Policy */\n  nonce: PropTypes.string,\n\n  /** Callback to be invoked on-resize */\n  onResize: PropTypes.func.isRequired,\n\n  /** Optional inline style */\n  style: PropTypes.object\n};\nexport default AutoSizer;\nimport PropTypes from 'prop-types';","export { default } from './AutoSizer';\nexport { default as AutoSizer } from './AutoSizer';"],"sourceRoot":""}