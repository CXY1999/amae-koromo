{"version":3,"sources":["components/ranking/deltaRanking.tsx","components/ranking/careerRanking.tsx","components/ranking/index.tsx"],"names":["RankingTable","rows","className","map","x","key","id","to","generatePlayerPathById","LevelWithDelta","getTag","level","nickname","delta","DeltaRanking","data1w","useAsyncFactory","getDeltaRanking","RankingTimeSpan","OneWeek","data4w","FourWeeks","useState","modeId","setModeId","mode","onChange","bottom","top","length","index","formatPercent","rank_key","CareerRanking","dataRank1","getCareerRanking","CareerRankingType","Rank1","dataRank12","Rank12","dataRank123","Rank123","stateName","Routes","match","useRouteMatch","path","activeClassName","Helmet"],"mappings":"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","file":"static/js/11.d3617311.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DeltaRankingItem, RankingTimeSpan } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getDeltaRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useState } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\n\nfunction RankingTable({ rows = [] as DeltaRankingItem[] }) {\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map(x => (\n          <tr key={x.id}>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.delta}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function DeltaRanking() {\n  const data1w = useAsyncFactory(() => getDeltaRanking(RankingTimeSpan.OneWeek), []);\n  const data4w = useAsyncFactory(() => getDeltaRanking(RankingTimeSpan.FourWeeks), []);\n  const [modeId, setModeId] = useState(\"\");\n  if (!data1w || !data4w) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col\">\n          <ModeSelector mode={modeId} onChange={setModeId} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">苦主榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].bottom} />;\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].bottom} />;\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">汪汪榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].top} />;\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].top} />;\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CareerRankingItem, CareerRankingType } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getCareerRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useState } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { formatPercent } from \"../../utils/index\";\nimport { Alert } from \"../misc/alert\";\n\nfunction RankingTable({ rows = [] as CareerRankingItem[] }) {\n  if (!rows || !rows.length) {\n    return <Loading />;\n  }\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map((x, index) => (\n          <tr key={x.id}>\n            <td>{index + 1}</td>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{formatPercent(x.rank_key)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function CareerRanking() {\n  const [modeId, setModeId] = useState(\"\");\n  const dataRank1 = useAsyncFactory(() => getCareerRanking(CareerRankingType.Rank1, modeId), [modeId]);\n  const dataRank12 = useAsyncFactory(() => getCareerRanking(CareerRankingType.Rank12, modeId), [modeId]);\n  const dataRank123 = useAsyncFactory(() => getCareerRanking(CareerRankingType.Rank123, modeId), [modeId]);\n  return (\n    <>\n      <Alert stateName=\"careerRankingNotice\">\n        <h4 className=\"mb-2\">提示</h4>\n        本榜只包含有至少 300 场对局记录的玩家\n      </Alert>\n      <div className=\"row mb-3\">\n        <div className=\"col\">\n          <ModeSelector mode={modeId} onChange={setModeId} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-lg-4\">\n          <h3 className=\"text-center\">一位率</h3>\n          <RankingTable rows={dataRank1} />;\n        </div>\n        <div className=\"col-lg-4\">\n          <h3 className=\"text-center\">连对率</h3>\n          <RankingTable rows={dataRank12} />;\n        </div>\n        <div className=\"col-lg-4\">\n          <h3 className=\"text-center\">避四率</h3>\n          <RankingTable rows={dataRank123} />;\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { Alert } from \"../misc/alert\";\nimport { Switch, Route, Redirect, useRouteMatch } from \"react-router\";\nimport DeltaRanking from \"./deltaRanking\";\nimport CareerRanking from \"./careerRanking\";\nimport { NavLink } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\n\nexport default function Routes() {\n  const match = useRouteMatch() || { path: \"\" };\n  return (\n    <div>\n      <Alert stateName=\"rankingNotice\">\n        <h4 className=\"mb-2\">提示</h4>\n        排行榜非实时更新，可能会有数小时的延迟\n      </Alert>\n      <nav className=\"nav nav-pills mb-3\">\n        <NavLink to={`${match.path}/delta`} className=\"nav-link\" activeClassName=\"active\">\n          苦主与汪汪\n        </NavLink>\n        <NavLink to={`${match.path}/career`} className=\"nav-link\" activeClassName=\"active\">\n          数据榜\n        </NavLink>\n      </nav>\n      <Switch>\n        <Route path={`${match.path}/delta`}>\n          <Helmet>\n            <title>苦主及汪汪</title>\n          </Helmet>\n          <DeltaRanking />\n        </Route>\n        <Route path={`${match.path}/career`}>\n          <Helmet>\n            <title>数据榜</title>\n          </Helmet>\n          <CareerRanking />\n        </Route>\n        <Route>\n          <Redirect to={`${match.path}/delta`} />\n        </Route>\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}