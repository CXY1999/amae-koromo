{"version":3,"sources":["components/modeModel/model.tsx","components/routing/index.tsx","components/modeModel/modelModeSelector.tsx","components/modeModel/index.tsx","components/ranking/deltaRanking.tsx","components/ranking/careerRanking.tsx","components/ranking/index.tsx"],"names":["DEFAULT_MODEL","selectedMode","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RouteDef","Error","ViewRoutes","Context","NavButtons","className","replace","keepState","t","useTranslation","routes","urlBase","useRouteMatch","url","filter","x","disabled","map","route","key","path","to","loc","pathname","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","match","useLocation","push","SimpleRoutedSubViews","props","slice","ModelModeSelector","setModeId","useCallback","modeId","Conf","availableModes","length","mode","onChange","RankingTable","rows","id","generatePlayerPathById","LevelWithDelta","getTag","level","nickname","delta","formatter","formatPercent","showNumGames","valueLabel","extraColumns","label","index","count","col","rank_key","CareerRankingColumn","type","disableMixedMode","isMixedMode","data","useAsyncFactory","getCareerRanking","item","parseInt","CareerRanking","stateName","i","Fragment","ROUTES","data1w","getDeltaRanking","RankingTimeSpan","OneWeek","data4w","FourWeeks","bottom","top","CareerRankingType","Rank1","Rank4","Rank12","StableLevel","PlayerMetadata","formatStableLevel2","AvgRank","formatFixed3","NumGames","formatIdentity","Win","Lose","ExpectedGamePoint0","ExpectedGamePoint1","ExpectedGamePoint2","ExpectedGamePoint3","PointEfficiency","被炸率","里宝率","一发率","被炸率Rev","里宝率Rev","一发率Rev","Routes"],"mappings":"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","file":"static/js/6.b6ee4f6e.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\n\nexport interface Model {\n  selectedMode: string;\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedMode: \"\" };\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = {\n  path: string;\n  exact?: boolean;\n  title: string;\n  disabled?: boolean;\n  children: React.ReactChild | React.ReactChildren;\n};\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <NavLink\n            key={route.path}\n            to={(loc) => ({\n              pathname: `${urlBase}/${route.path}`,\n              state: keepState ? loc.state : undefined,\n            })}\n            replace={replace}\n            exact={!!route.exact}\n            className=\"nav-link\"\n            activeClassName=\"active\"\n          >\n            {t(route.title)}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children,\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n            {mutateTitle && (\n              <Helmet>\n                <title>{t(route.title)}</title>\n              </Helmet>\n            )}\n            {route.children}\n          </Route>\n        ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children,\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return (\n    <Context.Provider value={children[0].props.children.map((x) => x.props)}>{children.slice(1)}</Context.Provider>\n  );\n}\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\n\nexport default function ModelModeSelector() {\n  const [model, updateModel] = useModel();\n  const setModeId = useCallback(modeId => updateModel({ selectedMode: modeId }), [updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector mode={model.selectedMode} onChange={setModeId} />\n      </div>\n    </div>\n  );\n}\n","export { ModelModeProvider, useModel } from \"./model\";\nexport { default as ModelModeSelector } from \"./modelModeSelector\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DeltaRankingItem, RankingTimeSpan } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getDeltaRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useModel } from \"../modeModel\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction RankingTable({ rows = [] as DeltaRankingItem[] }) {\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map(x => (\n          <tr key={x.id}>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.delta}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function DeltaRanking() {\n  const { t } = useTranslation();\n  const data1w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.OneWeek),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.OneWeek)\"\n  );\n  const data4w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.FourWeeks),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.FourWeeks)\"\n  );\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  if (!data1w || !data4w) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">{t(\"苦主榜\")}</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"一周\")}</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].bottom} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"四周\")}</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].bottom} />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">{t(\"汪汪榜\")}</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"一周\")}</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].top} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"四周\")}</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].top} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","/* eslint-disable @typescript-eslint/indent */\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CareerRankingItem, CareerRankingType } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getCareerRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta, GameMode } from \"../../data/types\";\nimport { formatPercent } from \"../../utils/index\";\nimport { Alert } from \"../misc/alert\";\nimport { useModel } from \"../modeModel\";\nimport { useTranslation } from \"react-i18next\";\n\ntype ExtraColumnInternal = {\n  label: string;\n  value: (item: CareerRankingItem) => string;\n};\n\ntype ExtraColumn = {\n  label: string;\n  value: (item: CareerRankingItem, mode: GameMode) => string;\n};\n\nfunction RankingTable({\n  rows = [] as CareerRankingItem[],\n  formatter = formatPercent as (x: number) => string,\n  showNumGames = true,\n  valueLabel = \"\",\n  extraColumns = [] as ExtraColumnInternal[]\n}) {\n  const { t } = useTranslation();\n  if (!rows || !rows.length) {\n    return <Loading />;\n  }\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th className=\"text-right\">{t(\"排名\")}</th>\n          <th>{t(\"玩家\")}</th>\n          {showNumGames && <th className=\"text-right\">{t(\"对局数\")}</th>}\n          {extraColumns.map(x => (\n            <th className=\"text-right\" key={x.label}>\n              {t(x.label)}\n            </th>\n          ))}\n          <th className=\"text-right\">{valueLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((x, index) => (\n          <tr key={x.id}>\n            <td className=\"text-right\">{index + 1}</td>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            {showNumGames && <td className=\"text-right\">{x.count}</td>}\n            {extraColumns.map(col => (\n              <td className=\"text-right\" key={col.label}>\n                {col.value(x)}\n              </td>\n            ))}\n            <td className=\"text-right\">{formatter(x.rank_key)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport function CareerRankingColumn({\n  type,\n  title,\n  formatter = formatPercent,\n  showNumGames = true,\n  valueLabel = \"\",\n  disableMixedMode = false,\n  extraColumns = []\n}: {\n  type: CareerRankingType;\n  title: string;\n  formatter?: (x: number) => string;\n  showNumGames?: boolean;\n  valueLabel?: string;\n  disableMixedMode?: boolean;\n  extraColumns?: ExtraColumn[];\n}) {\n  const { t } = useTranslation();\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  const isMixedMode = !modeId || modeId === \"0\";\n  const data = useAsyncFactory(() => getCareerRanking(type, modeId), [type, modeId], \"getCareerRanking\");\n  return (\n    <div className=\"col-lg\">\n      <h3 className=\"text-center mb-2\">{t(title)}</h3>\n      {!disableMixedMode || !isMixedMode ? (\n        <RankingTable\n          rows={data}\n          formatter={formatter}\n          valueLabel={t(valueLabel || title)}\n          showNumGames={showNumGames}\n          extraColumns={extraColumns.map(x => ({ ...x, value: item => x.value(item, parseInt(modeId, 10)) }))}\n        />\n      ) : (\n        <p className=\"text-center mt-4\">{t(\"请选择模式\")}</p>\n      )}\n    </div>\n  );\n}\nexport function CareerRanking({\n  children\n}: {\n  children:\n    | React.ReactElement<ReturnType<typeof CareerRankingColumn>>\n    | React.ReactElement<ReturnType<typeof CareerRankingColumn>>[];\n}) {\n  const { t } = useTranslation();\n  if (!(\"length\" in children)) {\n    children = [children];\n  }\n  return (\n    <>\n      <Alert stateName=\"careerRankingNotice\">\n        <h4 className=\"mb-2\">{t(\"提示\")}</h4>\n        {t(\"本榜只包含有至少 300 场对局记录的玩家\")}\n      </Alert>\n      <div className=\"row\">\n        { children.map((x, i) => (\n          <React.Fragment key={i}>{x}</React.Fragment>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { Alert } from \"../misc/alert\";\nimport DeltaRanking from \"./deltaRanking\";\nimport { CareerRanking, CareerRankingColumn } from \"./careerRanking\";\nimport { ModelModeProvider, ModelModeSelector } from \"../modeModel\";\nimport { CareerRankingType } from \"../../data/types\";\nimport { PlayerMetadata } from \"../../data/types/metadata\";\nimport { formatFixed3, formatIdentity } from \"../../utils/index\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    <RouteDef path=\"delta\" title=\"苦主及汪汪\">\n      <DeltaRanking />\n    </RouteDef>\n    <RouteDef path=\"career1\" title=\"一位率/四位率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank1} title=\"一位率\" />\n        <CareerRankingColumn type={CareerRankingType.Rank4} title=\"四位率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career2\" title=\"连对率/安定段位\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank12} title=\"连对率\" />\n        <CareerRankingColumn\n          type={CareerRankingType.StableLevel}\n          title=\"安定段位\"\n          formatter={PlayerMetadata.formatStableLevel2}\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career3\" title=\"平均顺位/对局数\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.AvgRank} title=\"平均顺位\" formatter={formatFixed3} />\n        <CareerRankingColumn\n          type={CareerRankingType.NumGames}\n          title=\"对局数\"\n          formatter={formatIdentity}\n          showNumGames={false}\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"winlose\" title=\"和率/铳率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Win} title=\"和牌率\" />\n        <CareerRankingColumn type={CareerRankingType.Lose} title=\"放铳率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"ept12\" title=\"一/二位平均 Pt\">\n      <CareerRanking>\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint0}\n          title=\"一位平均 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint1}\n          title=\"二位平均 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"ept34\" title=\"三位平均 Pt/四位平均得点 Pt\">\n      <CareerRanking>\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint2}\n          title=\"三位平均 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n        <CareerRankingColumn\n          type={CareerRankingType.ExpectedGamePoint3}\n          title=\"四位平均得点 Pt\"\n          formatter={formatFixed3}\n          valueLabel=\"Pt\"\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"efficiency\" title=\"得点效率\">\n      <CareerRanking>\n        <CareerRankingColumn\n          type={CareerRankingType.PointEfficiency}\n          title=\"得点效率\"\n          formatter={formatFixed3}\n          disableMixedMode\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"lucky\" title=\"欧洲人\">\n      <CareerRanking>\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.被炸率} title=\"被炸率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.里宝率} title=\"里宝率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.一发率} title=\"一发率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"unlucky\" title=\"非洲人\">\n      <CareerRanking>\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.被炸率Rev} title=\"被炸率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.里宝率Rev} title=\"里宝率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.一发率Rev} title=\"一发率\" />\n      </CareerRanking>\n    </RouteDef>\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  const { t } = useTranslation();\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <Alert stateName=\"rankingNotice\">\n          <h4 className=\"mb-2\">{t(\"提示\")}</h4>\n          {t(\"排行榜非实时更新，可能会有数小时的延迟\")}\n        </Alert>\n        <NavButtons />\n        <ModelModeSelector />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}