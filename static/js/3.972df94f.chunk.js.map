{"version":3,"sources":["components/gameRecords/charts/recentRank.tsx"],"names":["__webpack_require__","r","__webpack_exports__","d","RecentRankChart","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","recharts__WEBPACK_IMPORTED_MODULE_1__","_utils_dataSource__WEBPACK_IMPORTED_MODULE_2__","_utils_gameMode__WEBPACK_IMPORTED_MODULE_3__","_player__WEBPACK_IMPORTED_MODULE_4__","createDot","props","active","a","createElement","Object","assign","stroke","RANK_COLORS","payload","rank","onClick","window","open","GameRecord","getRecordLink","game","playerId","fill","createActiveDot","RankChartTooltip","_ref","arguments","length","undefined","realPayload","className","formatFullStartTime","GameMode","modeId","RANK_LABELS","players","map","x","key","accountId","toString","player","isActive","hideDetailLink","_ref2","dataAdapter","_ref2$aspect","aspect","_ref2$numGames","numGames","dataPoints","useMemo","result","totalGames","getCount","i","Math","min","getItem","getRankIndexByPlayer","unshift","pos","width","height","data","margin","top","right","bottom","left","isAnimationActive","dataKey","type","strokeWidth","dot","activeDot","cursor","content"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,4BAAAE,IAAA,IAAAC,EAAAL,EAAA,GAAAM,EAAAN,EAAAO,EAAAF,GAAAG,EAAAR,EAAA,KAAAS,EAAAT,EAAA,GAAAU,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAuBMY,EAAY,SAACC,EAAgCC,GACjD,OACER,EAAAS,EAAAC,cAACR,EAAA,EAADS,OAAAC,OAAA,GACML,EADN,CAEEZ,EAAG,EACHkB,OAAQC,IAAYP,EAAMQ,QAAQC,MAClCC,QAAS,kBAAMC,OAAOC,KAAKC,IAAWC,cAAcd,EAAMQ,QAAQO,KAAMf,EAAMQ,QAAQQ,UAAW,YAC5Ff,EAAS,CAAEgB,KAAMV,IAAYP,EAAMQ,QAAQC,MAAOrB,EAAG,IAAO,MAIjE8B,EAAkB,SAAClB,GAAD,OAAgBD,EAAUC,GAAO,IAEnDmB,EAAmB,WAA4C,IAAAC,EAAAC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAAlCpB,EAAyCmB,EAAzCnB,OAAQO,EAAiCY,EAAjCZ,QAClC,IAAKP,IAAWO,IAAYA,EAAQc,OAClC,OAAO,KAET,IAAME,EAAchB,EAAQ,GAAGA,QAC/B,OACEf,EAAAS,EAAAC,cAAA,OAAKsB,UAAU,wBACbhC,EAAAS,EAAAC,cAAA,UACGU,IAAWa,oBAAoBF,EAAYT,MAD9C,IACsDY,IAASH,EAAYT,KAAKa,QAAS,IACtFC,IAAYL,EAAYf,OAE1Be,EAAYT,KAAKe,QAAQC,IAAI,SAAAC,GAAC,OAC7BvC,EAAAS,EAAAC,cAAA,KAAG8B,IAAKD,EAAEE,UAAUC,YAClB1C,EAAAS,EAAAC,cAACL,EAAA,EAAD,CAAQsC,OAAQJ,EAAGjB,KAAMS,EAAYT,KAAMsB,SAAUb,EAAYR,WAAagB,EAAEE,UAAWI,gBAAc,SAOpG,SAAS/C,EAATgD,GAUZ,IATDC,EASCD,EATDC,YACAxB,EAQCuB,EARDvB,SAQCyB,EAAAF,EAPDG,cAOC,IAAAD,EAPQ,EAORA,EAAAE,EAAAJ,EANDK,gBAMC,IAAAD,EANU,GAMVA,EACKE,EAAaC,kBAAQ,WACzB,IAAMC,EAAS,GACTC,EAAaR,EAAYS,WAC/B,IAAKD,EACH,OAAOD,EAET,IAAK,IAAIG,EAAI,EAAGA,EAAIC,KAAKC,IAAIJ,EAAYJ,GAAWM,IAAK,CACvD,IAAMnC,EAAOyB,EAAYa,QAAQH,GACjC,KAAM,SAAUnC,GACd,MAEF,IAAMN,EAAOI,IAAWyC,qBAAqBvC,EAAMC,GACnD+B,EAAOQ,QAAQ,CAAEC,IAAK,EAAI/C,EAAMA,OAAMM,OAAMC,aAE9C,OAAO+B,GACN,CAACP,IACJ,OACE/C,EAAAS,EAAAC,cAACR,EAAA,EAAD,CAAqB8D,MAAM,OAAOf,OAAQA,EAAQgB,OAAO,QACvDjE,EAAAS,EAAAC,cAACR,EAAA,EAAD,CAAWgE,KAAMd,EAAYe,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAC3EvE,EAAAS,EAAAC,cAACR,EAAA,EAAD,CACEsE,mBAAmB,EACnBC,QAAQ,MACRC,KAAK,SACL7D,OAAO,UACP8D,YAAa,EACbC,IAAKtE,EACLuE,UAAWpD,IAEbzB,EAAAS,EAAAC,cAACR,EAAA,EAAD,CAAS4E,QAAQ,EAAOC,QAAS/E,EAAAS,EAAAC,cAACgB,EAAD","file":"static/js/3.972df94f.chunk.js","sourcesContent":["import React from \"react\";\nimport { ResponsiveContainer, LineChart, Line, Dot, Tooltip, TooltipProps } from \"recharts\";\n\nimport { IDataAdapter } from \"../dataAdapterProvider\";\nimport { GameRecord, RANK_LABELS, RANK_COLORS } from \"../../../utils/dataSource\";\nimport { useMemo } from \"react\";\nimport GameMode from \"../../../utils/gameMode\";\nimport { Player } from \"../player\";\n\ndeclare module \"recharts\" {\n  interface DotProps {\n    strokeWidth?: number;\n    stroke?: string;\n    fill?: string;\n    payload?: any;\n  }\n  interface LabelListProps {\n    fill?: string;\n  }\n}\n\ntype DotPayload = { pos: number; rank: number; game: GameRecord; playerId: number };\n\nconst createDot = (props: { payload: DotPayload }, active?: boolean) => {\n  return (\n    <Dot\n      {...props}\n      r={5}\n      stroke={RANK_COLORS[props.payload.rank]}\n      onClick={() => window.open(GameRecord.getRecordLink(props.payload.game, props.payload.playerId), \"_blank\")}\n      {...(active ? { fill: RANK_COLORS[props.payload.rank], r: 10 } : {})}\n    />\n  );\n};\nconst createActiveDot = (props: any) => createDot(props, true);\n\nconst RankChartTooltip = ({ active, payload }: TooltipProps = {}) => {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n  const realPayload = payload[0].payload as DotPayload;\n  return (\n    <div className=\"player-chart-tooltip\">\n      <h5>\n        {GameRecord.formatFullStartTime(realPayload.game)} {GameMode[realPayload.game.modeId]}{\" \"}\n        {RANK_LABELS[realPayload.rank]}\n      </h5>\n      {realPayload.game.players.map(x => (\n        <p key={x.accountId.toString()}>\n          <Player player={x} game={realPayload.game} isActive={realPayload.playerId === x.accountId} hideDetailLink />\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default function RecentRankChart({\n  dataAdapter,\n  playerId,\n  aspect = 2,\n  numGames = 20\n}: {\n  dataAdapter: IDataAdapter;\n  playerId: number;\n  aspect?: number;\n  numGames?: number;\n}) {\n  const dataPoints = useMemo(() => {\n    const result = [] as DotPayload[];\n    const totalGames = dataAdapter.getCount();\n    if (!totalGames) {\n      return result;\n    }\n    for (let i = 0; i < Math.min(totalGames, numGames); i++) {\n      const game = dataAdapter.getItem(i);\n      if (!(\"uuid\" in game)) {\n        break;\n      }\n      const rank = GameRecord.getRankIndexByPlayer(game, playerId);\n      result.unshift({ pos: 3 - rank, rank, game, playerId });\n    }\n    return result;\n  }, [dataAdapter]);\n  return (\n    <ResponsiveContainer width=\"100%\" aspect={aspect} height=\"auto\">\n      <LineChart data={dataPoints} margin={{ top: 15, right: 15, bottom: 15, left: 15 }}>\n        <Line\n          isAnimationActive={false}\n          dataKey=\"pos\"\n          type=\"linear\"\n          stroke=\"#b5c2ce\"\n          strokeWidth={3}\n          dot={createDot}\n          activeDot={createActiveDot}\n        />\n        <Tooltip cursor={false} content={<RankChartTooltip />} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}"],"sourceRoot":""}