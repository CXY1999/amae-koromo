{"version":3,"sources":["components/gameRecords/player.tsx","components/gameRecords/table.tsx"],"names":["Player","React","memo","player","game","isActive","hideDetailLink","nickname","level","score","accountId","isTop","GameRecord","getRankIndexByPlayer","className","href","getRecordLink","title","target","rel","getLevelTag","undefined","to","generatePlayerPathById","Players","activePlayerId","players","map","x","key","toString","isMobile","window","matchMedia","matches","cellFormatTime","cellData","dayjs","unix","format","cellFormatFullTime","rowData","loading","formatStartDate","formatFullStartTime","cellFormatRank","columnData","style","color","getPlayerRankColor","getPlayerRankLabel","slice","cellFormatGameMode","GameMode","GameRecordTable","showStartEnd","showFullTime","data","useDataAdapter","useModel","model","scrollerProps","useScrollerProps","isScrolling","onChildScroll","scrollTop","height","registerChild","rowGetter","useCallback","index","getItem","getRowClassName","clsx","isItemLoaded","even","noRowsRenderer","getUnfilteredCount","type","playerId","cellRenderPlayer","shouldTriggerLayout","useEffect","triggerRelayout","ref","disableHeight","width","autoHeight","rowCount","getCount","rowHeight","headerHeight","onScroll","rowClassName","dataKey","label","cellRenderer","flexGrow","headerClassName"],"mappings":"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","file":"static/js/9.5e6cb320.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IoMdBook } from \"react-icons/io\";\n\nimport { GameRecord, PlayerRecord, getLevelTag } from \"../../data/types\";\nimport { generatePlayerPathById } from \"./routes\";\n\nexport const Player = React.memo(function({\n  player,\n  game,\n  isActive,\n  hideDetailLink\n}: {\n  player: PlayerRecord;\n  game: GameRecord;\n  isActive: boolean;\n  hideDetailLink?: boolean;\n}) {\n  const { nickname, level, score, accountId } = player;\n  const isTop = GameRecord.getRankIndexByPlayer(game, player) === 0;\n  return (\n    <span className={`player ${isTop && \"font-weight-bold\"} ${isActive && \"active-player\"}`}>\n      <a href={GameRecord.getRecordLink(game, player)} title=\"查看牌谱\" target=\"_blank\" rel=\"noopener noreferrer\">\n        [{getLevelTag(level)}] {nickname} {score !== undefined && `[${score}]`}\n      </a>{\" \"}\n      {hideDetailLink || isActive ? null : (\n        <Link title=\"玩家记录\" to={generatePlayerPathById(accountId)}>\n          <IoMdBook />\n        </Link>\n      )}\n    </span>\n  );\n});\n","import React from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { TableCellProps, Index } from \"react-virtualized\";\r\nimport { Table, Column } from \"react-virtualized/dist/es/Table\";\r\nimport { AutoSizer } from \"react-virtualized/dist/es/AutoSizer\";\r\nimport dayjs from \"dayjs\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { GameRecord, GameMode } from \"../../data/types\";\r\nimport { Player } from \"./player\";\r\nimport { useScrollerProps } from \"../misc/scroller\";\r\nimport { useDataAdapter } from \"./dataAdapterProvider\";\r\nimport { triggerRelayout } from \"../../utils/index\";\r\nimport { useModel } from \"./model\";\r\nimport Loading from \"../misc/loading\";\r\n\r\nconst formatTime = (x: number) => (x ? dayjs.unix(x).format(\"HH:mm\") : null);\r\n\r\nconst Players = React.memo(({ game, activePlayerId }: { game: GameRecord; activePlayerId?: string }) => (\r\n  <div className=\"row no-gutters\">\r\n    {game.players.map(x => (\r\n      <div key={x.accountId} className=\"col-12 col-md-6 pr-1\">\r\n        <Player game={game} player={x} isActive={x.accountId.toString() === activePlayerId} />\r\n      </div>\r\n    ))}\r\n  </div>\r\n));\r\n\r\nfunction isMobile() {\r\n  return !!window.matchMedia(\"(max-width: 575.75px)\").matches;\r\n}\r\n\r\nconst cellFormatTime = ({ cellData }: TableCellProps) => formatTime(cellData);\r\nconst cellFormatFullTime = ({ rowData }: TableCellProps) =>\r\n  rowData.loading ? \"\" : isMobile() ? GameRecord.formatStartDate(rowData) : GameRecord.formatFullStartTime(rowData);\r\nconst cellFormatRank = ({ rowData, columnData }: TableCellProps) =>\r\n  !rowData || rowData.loading || !columnData.activePlayerId ? (\r\n    \"\"\r\n  ) : (\r\n    <span\r\n      className=\"font-weight-bold\"\r\n      style={{ color: GameRecord.getPlayerRankColor(rowData, columnData.activePlayerId) }}\r\n    >\r\n      {GameRecord.getPlayerRankLabel(rowData, columnData.activePlayerId).slice(0, 1)}\r\n    </span>\r\n  );\r\nconst cellFormatGameMode = ({ cellData }: TableCellProps) => GameMode[cellData];\r\n\r\nfunction getRowHeight() {\r\n  if (window.matchMedia(\"(min-width: 768px)\").matches) {\r\n    return 70;\r\n  }\r\n  if (!isMobile()) {\r\n    return 140;\r\n  }\r\n  return 100;\r\n}\r\n\r\nexport default function GameRecordTable({ showStartEnd = true, showFullTime = false } = {}) {\r\n  const data = useDataAdapter();\r\n  const [model] = useModel();\r\n  const scrollerProps = useScrollerProps();\r\n  const { isScrolling, onChildScroll, scrollTop, height, registerChild } = scrollerProps;\r\n  const rowGetter = useCallback(({ index }: Index) => data.getItem(index), [data]);\r\n  const getRowClassName = useCallback(\r\n    ({ index }: Index) => (index >= 0 ? clsx({ loading: !data.isItemLoaded(index), even: (index & 1) === 0 }) : \"\"),\r\n    [data]\r\n  );\r\n  const noRowsRenderer = useCallback(() => (data.getUnfilteredCount() ? null : <Loading />), [data]);\r\n  const activePlayerId = model.type === \"player\" ? model.playerId : undefined;\r\n  const cellRenderPlayer = useCallback(\r\n    ({ rowData }: TableCellProps) =>\r\n      rowData && rowData.players ? <Players game={rowData} activePlayerId={activePlayerId} /> : null,\r\n    [activePlayerId]\r\n  );\r\n  const unfilteredCount = data.getUnfilteredCount();\r\n  const shouldTriggerLayout = !!unfilteredCount;\r\n  useEffect(() => {\r\n    triggerRelayout();\r\n  }, [shouldTriggerLayout]);\r\n  return (\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    <div ref={registerChild as any} className=\"font-xs-adjust\">\r\n      <AutoSizer disableHeight>\r\n        {({ width }) => (\r\n          <Table\r\n            autoHeight\r\n            className={activePlayerId ? \"with-active-player\" : \"\"}\r\n            rowCount={data.getCount()}\r\n            rowGetter={rowGetter}\r\n            rowHeight={getRowHeight()}\r\n            headerHeight={50}\r\n            width={width}\r\n            height={height}\r\n            isScrolling={isScrolling}\r\n            onScroll={onChildScroll}\r\n            scrollTop={scrollTop}\r\n            rowClassName={getRowClassName}\r\n            noRowsRenderer={noRowsRenderer}\r\n          >\r\n            <Column\r\n              dataKey=\"modeId\"\r\n              label={isMobile() ? \"\" : \"等级\"}\r\n              cellRenderer={cellFormatGameMode}\r\n              width={isMobile() ? 20 : 40}\r\n            />\r\n            {activePlayerId ? (\r\n              <Column\r\n                dataKey=\"modeId\"\r\n                label={isMobile() ? \"\" : \"顺位\"}\r\n                columnData={{ activePlayerId }}\r\n                cellRenderer={cellFormatRank}\r\n                width={isMobile() ? 20 : 40}\r\n              />\r\n            ) : null}\r\n            <Column dataKey=\"players\" label=\"玩家\" cellRenderer={cellRenderPlayer} width={120} flexGrow={1} />\r\n            {showStartEnd\r\n              ? [\r\n                  <Column\r\n                    key=\"startTime\"\r\n                    dataKey=\"startTime\"\r\n                    label=\"开始\"\r\n                    cellRenderer={cellFormatTime}\r\n                    width={isMobile() ? 40 : 50}\r\n                    className=\"text-right\"\r\n                    headerClassName=\"text-right\"\r\n                  />,\r\n                  <Column\r\n                    key=\"endTime\"\r\n                    dataKey=\"endTime\"\r\n                    label=\"结束\"\r\n                    cellRenderer={cellFormatTime}\r\n                    width={isMobile() ? 40 : 50}\r\n                    headerClassName=\"text-right\"\r\n                    className=\"text-right\"\r\n                  />\r\n                ]\r\n              : null}\r\n            {showFullTime ? (\r\n              <Column\r\n                dataKey=\"startTime\"\r\n                label=\"时间\"\r\n                cellRenderer={cellFormatFullTime}\r\n                width={isMobile() ? 40 : 140}\r\n                className=\"text-right\"\r\n                headerClassName=\"text-right\"\r\n              />\r\n            ) : null}\r\n          </Table>\r\n        )}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}