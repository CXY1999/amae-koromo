{"version":3,"sources":["components/gameRecords/player.tsx","components/playerDetails/charts/recentRank.tsx"],"names":["Player","React","memo","player","game","isActive","hideDetailLink","nickname","level","score","accountId","isTop","GameRecord","getRankIndexByPlayer","className","href","getRecordLink","title","target","rel","getLevelTag","undefined","to","generatePlayerPathById","createDot","props","active","r","stroke","RANK_COLORS","payload","rank","onClick","window","open","playerId","fill","createActiveDot","RankChartTooltip","length","realPayload","formatFullStartTime","GameMode","modeId","RANK_LABELS","players","map","x","key","toString","RecentRankChart","dataAdapter","aspect","numGames","dataPoints","useMemo","result","totalGames","getCount","i","Math","min","getItem","unshift","pos","width","height","data","margin","top","right","bottom","left","isAnimationActive","dataKey","type","strokeWidth","dot","activeDot","cursor","content"],"mappings":"mHAAA,uFAOaA,EAASC,IAAMC,MAAK,SAAS,GAUtC,IATFC,EASC,EATDA,OACAC,EAQC,EARDA,KACAC,EAOC,EAPDA,SACAC,EAMC,EANDA,eAOQC,EAAsCJ,EAAtCI,SAAUC,EAA4BL,EAA5BK,MAAOC,EAAqBN,EAArBM,MAAOC,EAAcP,EAAdO,UAC1BC,EAA0D,IAAlDC,aAAWC,qBAAqBT,EAAMD,GACpD,OACE,0BAAMW,UAAS,iBAAYH,GAAS,mBAArB,YAA2CN,GAAY,kBACpE,uBAAGU,KAAMH,aAAWI,cAAcZ,EAAMD,GAASc,MAAM,2BAAOC,OAAO,SAASC,IAAI,uBAAlF,IACIC,sBAAYZ,GADhB,KAC0BD,EAD1B,SAC+Cc,IAAVZ,GAAA,WAA2BA,EAA3B,MAChC,IACJH,GAAkBD,EAAW,KAC5B,kBAAC,IAAD,CAAMY,MAAM,2BAAOK,GAAIC,YAAuBb,IAC5C,kBAAC,IAAD,Y,iCC3BV,qGAwBMc,EAAY,SAACC,EAAgCC,GACjD,OACE,kBAAC,IAAD,iBACMD,EADN,CAEEE,EAAG,EACHC,OAAQC,cAAYJ,EAAMK,QAAQC,MAClCC,QAAS,kBAAMC,OAAOC,KAAKtB,aAAWI,cAAcS,EAAMK,QAAQ1B,KAAMqB,EAAMK,QAAQK,UAAW,YAC5FT,EAAS,CAAEU,KAAMP,cAAYJ,EAAMK,QAAQC,MAAOJ,EAAG,IAAO,MAKjEU,EAAkB,SAACZ,GAAD,OAAgBD,EAAUC,GAAO,IAEnDa,EAAmB,WAA6C,IAAD,yDAAP,GAAlCZ,EAAyC,EAAzCA,OAAQI,EAAiC,EAAjCA,QAClC,IAAKJ,IAAWI,IAAYA,EAAQS,OAClC,OAAO,KAET,IAAMC,EAAcV,EAAQ,GAAGA,QAC/B,OACE,yBAAKhB,UAAU,wBACb,4BACGF,aAAW6B,oBAAoBD,EAAYpC,MAD9C,IACsDsC,WAASF,EAAYpC,KAAKuC,QAAS,IACtFC,cAAYJ,EAAYT,OAE1BS,EAAYpC,KAAKyC,QAAQC,KAAI,SAAAC,GAAC,OAC7B,uBAAGC,IAAKD,EAAErC,UAAUuC,YAClB,kBAAC,IAAD,CAAQ9C,OAAQ4C,EAAG3C,KAAMoC,EAAYpC,KAAMC,SAAUmC,EAAYL,WAAaY,EAAErC,UAAWJ,gBAAc,UAOpG,SAAS4C,EAAT,GAUX,IATFC,EASC,EATDA,YACAhB,EAQC,EARDA,SAQC,IAPDiB,cAOC,MAPQ,EAOR,MANDC,gBAMC,MANU,GAMV,EACKC,EAAaC,mBAAQ,WACzB,IAAMC,EAAS,GACTC,EAAaN,EAAYO,WAC/B,IAAKD,EACH,OAAOD,EAET,IAAK,IAAIG,EAAI,EAAGA,EAAIC,KAAKC,IAAIJ,EAAYJ,GAAWM,IAAK,CACvD,IAAMvD,EAAO+C,EAAYW,QAAQH,GACjC,KAAM,SAAUvD,GACd,MAEF,IAAM2B,EAAOnB,aAAWC,qBAAqBT,EAAM+B,GACnDqB,EAAOO,QAAQ,CAAEC,IAAK,EAAIjC,EAAMA,OAAM3B,OAAM+B,aAE9C,OAAOqB,IACN,CAACL,EAAaE,EAAUlB,IAC3B,OAAKmB,EAAWf,OAId,kBAAC,IAAD,CAAqB0B,MAAM,OAAOb,OAAQA,EAAQc,OAAO,QACvD,kBAAC,IAAD,CAAWC,KAAMb,EAAYc,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,KAC3E,kBAAC,IAAD,CACEC,mBAAmB,EACnBC,QAAQ,MACRC,KAAK,SACL/C,OAAO,UACPgD,YAAa,EACbC,IAAKrD,EACLsD,UAAWzC,IAEb,kBAAC,IAAD,CAAS0C,QAAQ,EAAOC,QAAS,kBAAC1C,EAAD,UAd9B,kBAAC,IAAD","file":"static/js/10.49bd979b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IoMdBook } from \"react-icons/io\";\n\nimport { GameRecord, PlayerRecord, getLevelTag } from \"../../data/types\";\nimport { generatePlayerPathById } from \"./routes\";\n\nexport const Player = React.memo(function({\n  player,\n  game,\n  isActive,\n  hideDetailLink\n}: {\n  player: PlayerRecord;\n  game: GameRecord;\n  isActive: boolean;\n  hideDetailLink?: boolean;\n}) {\n  const { nickname, level, score, accountId } = player;\n  const isTop = GameRecord.getRankIndexByPlayer(game, player) === 0;\n  return (\n    <span className={`player ${isTop && \"font-weight-bold\"} ${isActive && \"active-player\"}`}>\n      <a href={GameRecord.getRecordLink(game, player)} title=\"查看牌谱\" target=\"_blank\" rel=\"noopener noreferrer\">\n        [{getLevelTag(level)}] {nickname} {score !== undefined && `[${score}]`}\n      </a>{\" \"}\n      {hideDetailLink || isActive ? null : (\n        <Link title=\"玩家记录\" to={generatePlayerPathById(accountId)}>\n          <IoMdBook />\n        </Link>\n      )}\n    </span>\n  );\n});\n","import React from \"react\";\nimport { ResponsiveContainer, LineChart, Line, Dot, Tooltip, TooltipProps } from \"recharts\";\n\nimport { IDataAdapter } from \"../../gameRecords/dataAdapterProvider\";\nimport { GameRecord, RANK_LABELS, RANK_COLORS, GameMode } from \"../../../data/types\";\nimport { useMemo } from \"react\";\nimport { Player } from \"../../gameRecords/player\";\nimport Loading from \"../../misc/loading\";\n\ndeclare module \"recharts\" {\n  interface DotProps {\n    strokeWidth?: number;\n    stroke?: string;\n    fill?: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload?: any;\n  }\n  interface LabelListProps {\n    fill?: string;\n  }\n}\n\ntype DotPayload = { pos: number; rank: number; game: GameRecord; playerId: number };\n\nconst createDot = (props: { payload: DotPayload }, active?: boolean) => {\n  return (\n    <Dot\n      {...props}\n      r={5}\n      stroke={RANK_COLORS[props.payload.rank]}\n      onClick={() => window.open(GameRecord.getRecordLink(props.payload.game, props.payload.playerId), \"_blank\")}\n      {...(active ? { fill: RANK_COLORS[props.payload.rank], r: 10 } : {})}\n    />\n  );\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst createActiveDot = (props: any) => createDot(props, true);\n\nconst RankChartTooltip = ({ active, payload }: TooltipProps = {}) => {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n  const realPayload = payload[0].payload as DotPayload;\n  return (\n    <div className=\"player-chart-tooltip\">\n      <h5>\n        {GameRecord.formatFullStartTime(realPayload.game)} {GameMode[realPayload.game.modeId]}{\" \"}\n        {RANK_LABELS[realPayload.rank]}\n      </h5>\n      {realPayload.game.players.map(x => (\n        <p key={x.accountId.toString()}>\n          <Player player={x} game={realPayload.game} isActive={realPayload.playerId === x.accountId} hideDetailLink />\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default function RecentRankChart({\n  dataAdapter,\n  playerId,\n  aspect = 2,\n  numGames = 20\n}: {\n  dataAdapter: IDataAdapter;\n  playerId: number;\n  aspect?: number;\n  numGames?: number;\n}) {\n  const dataPoints = useMemo(() => {\n    const result = [] as DotPayload[];\n    const totalGames = dataAdapter.getCount();\n    if (!totalGames) {\n      return result;\n    }\n    for (let i = 0; i < Math.min(totalGames, numGames); i++) {\n      const game = dataAdapter.getItem(i);\n      if (!(\"uuid\" in game)) {\n        break;\n      }\n      const rank = GameRecord.getRankIndexByPlayer(game, playerId);\n      result.unshift({ pos: 3 - rank, rank, game, playerId });\n    }\n    return result;\n  }, [dataAdapter, numGames, playerId]);\n  if (!dataPoints.length) {\n    return <Loading />;\n  }\n  return (\n    <ResponsiveContainer width=\"100%\" aspect={aspect} height=\"auto\">\n      <LineChart data={dataPoints} margin={{ top: 15, right: 15, bottom: 15, left: 15 }}>\n        <Line\n          isAnimationActive={false}\n          dataKey=\"pos\"\n          type=\"linear\"\n          stroke=\"#b5c2ce\"\n          strokeWidth={3}\n          dot={createDot}\n          activeDot={createActiveDot}\n        />\n        <Tooltip cursor={false} content={<RankChartTooltip />} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n"],"sourceRoot":""}