{"version":3,"sources":["components/ranking/model.tsx","components/ranking/deltaRanking.tsx","components/ranking/careerRanking.tsx","components/ranking/modelModeSelector.tsx","components/ranking/index.tsx"],"names":["DEFAULT_MODEL","selectedMode","ModelContext","React","createContext","useModel","useContext","ModelProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RankingTable","rows","className","map","x","key","id","to","generatePlayerPathById","LevelWithDelta","getTag","level","nickname","delta","DeltaRanking","data1w","useAsyncFactory","getDeltaRanking","RankingTimeSpan","OneWeek","data4w","FourWeeks","modeId","bottom","top","formatter","formatPercent","valueLabel","length","index","count","rank_key","CareerRankingColumn","type","title","data","getCareerRanking","CareerRanking","stateName","i","Fragment","ModelModeSelector","setModeId","useCallback","mode","onChange","Routes","match","useRouteMatch","path","activeClassName","Helmet","CareerRankingType","Rank1","Rank4","Rank12","StableLevel","PlayerMetadata","formatStableLevel2"],"mappings":"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","file":"static/js/11.ebeee478.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\n\nexport interface Model {\n  selectedMode: string;\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedMode: \"\" };\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DeltaRankingItem, RankingTimeSpan } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getDeltaRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useModel } from \"./model\";\n\nfunction RankingTable({ rows = [] as DeltaRankingItem[] }) {\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map(x => (\n          <tr key={x.id}>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.delta}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function DeltaRanking() {\n  const data1w = useAsyncFactory(() => getDeltaRanking(RankingTimeSpan.OneWeek), []);\n  const data4w = useAsyncFactory(() => getDeltaRanking(RankingTimeSpan.FourWeeks), []);\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  if (!data1w || !data4w) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">苦主榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].bottom} />;\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].bottom} />;\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">汪汪榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].top} />;\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].top} />;\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CareerRankingItem, CareerRankingType } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getCareerRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { formatPercent } from \"../../utils/index\";\nimport { Alert } from \"../misc/alert\";\nimport { useModel } from \"./model\";\n\nfunction RankingTable({\n  rows = [] as CareerRankingItem[],\n  formatter = formatPercent as (x: number) => string,\n  valueLabel = \"\"\n}) {\n  if (!rows || !rows.length) {\n    return <Loading />;\n  }\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th className=\"text-right\">排名</th>\n          <th>玩家</th>\n          <th className=\"text-right\">局数</th>\n          <th className=\"text-right\">{valueLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((x, index) => (\n          <tr key={x.id}>\n            <td className=\"text-right\">{index + 1}</td>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.count}</td>\n            <td className=\"text-right\">{formatter(x.rank_key)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport function CareerRankingColumn({\n  type,\n  title,\n  formatter = formatPercent,\n  valueLabel = \"\"\n}: {\n  type: CareerRankingType;\n  title: string;\n  formatter?: (x: number) => string;\n  valueLabel?: string;\n}) {\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  const data = useAsyncFactory(() => getCareerRanking(type, modeId), [type, modeId]);\n  return (\n    <div className=\"col-lg\">\n      <h3 className=\"text-center mb-2\">{title}</h3>\n      <RankingTable rows={data} formatter={formatter} valueLabel={valueLabel || title} />;\n    </div>\n  );\n}\nexport function CareerRanking({\n  children\n}: {\n  children: React.ReactElement<ReturnType<typeof CareerRankingColumn>>[];\n}) {\n  return (\n    <>\n      <Alert stateName=\"careerRankingNotice\">\n        <h4 className=\"mb-2\">提示</h4>\n        本榜只包含有至少 300 场对局记录的玩家\n      </Alert>\n      <div className=\"row\">\n        {children.map((x, i) => (\n          <React.Fragment key={i}>{x}</React.Fragment>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\n\nexport default function ModelModeSelector() {\n  const [model, updateModel] = useModel();\n  const setModeId = useCallback(modeId => updateModel({ selectedMode: modeId }), [updateModel]);\n  return <ModeSelector mode={model.selectedMode} onChange={setModeId} />;\n}\n","import React from \"react\";\n\nimport { Alert } from \"../misc/alert\";\nimport { Switch, Route, Redirect, useRouteMatch } from \"react-router\";\nimport DeltaRanking from \"./deltaRanking\";\nimport { CareerRanking, CareerRankingColumn } from \"./careerRanking\";\nimport { NavLink } from \"react-router-dom\";\nimport { Helmet } from \"react-helmet\";\nimport ModelModeSelector from \"./modelModeSelector\";\nimport { ModelProvider } from \"./model\";\nimport { CareerRankingType } from \"../../data/types\";\nimport { PlayerMetadata } from \"../../data/types/metadata\";\n\nexport default function Routes() {\n  const match = useRouteMatch() || { path: \"\" };\n  return (\n    <ModelProvider>\n      <Alert stateName=\"rankingNotice\">\n        <h4 className=\"mb-2\">提示</h4>\n        排行榜非实时更新，可能会有数小时的延迟\n      </Alert>\n      <nav className=\"nav nav-pills mb-3\">\n        <NavLink to={`${match.path}/delta`} className=\"nav-link\" activeClassName=\"active\">\n          苦主与汪汪\n        </NavLink>\n        <NavLink to={`${match.path}/career1`} className=\"nav-link\" activeClassName=\"active\">\n          一位率/四位率\n        </NavLink>\n        <NavLink to={`${match.path}/career2`} className=\"nav-link\" activeClassName=\"active\">\n          连对率/安定段位\n        </NavLink>\n      </nav>\n      <div className=\"row mb-3\">\n        <div className=\"col\">\n          <ModelModeSelector />\n        </div>\n      </div>\n      <Switch>\n        <Route path={`${match.path}/delta`}>\n          <Helmet>\n            <title>苦主及汪汪</title>\n          </Helmet>\n          <DeltaRanking />\n        </Route>\n        <Route path={`${match.path}/career1`}>\n          <Helmet>\n            <title>一位率/四位率</title>\n          </Helmet>\n          <CareerRanking>\n            <CareerRankingColumn type={CareerRankingType.Rank1} title=\"一位率\" />\n            <CareerRankingColumn type={CareerRankingType.Rank4} title=\"四位率\" />\n          </CareerRanking>\n        </Route>\n        <Route path={`${match.path}/career2`}>\n          <Helmet>\n            <title>连对率/安定段位</title>\n          </Helmet>\n          <CareerRanking>\n            <CareerRankingColumn type={CareerRankingType.Rank12} title=\"连对率\" />\n            <CareerRankingColumn\n              type={CareerRankingType.StableLevel}\n              title=\"安定段位\"\n              formatter={PlayerMetadata.formatStableLevel2}\n            />\n          </CareerRanking>\n        </Route>\n        <Route>\n          <Redirect to={`${match.path}/delta`} />\n        </Route>\n      </Switch>\n    </ModelProvider>\n  );\n}\n"],"sourceRoot":""}