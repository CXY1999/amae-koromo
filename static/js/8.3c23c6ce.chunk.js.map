{"version":3,"sources":["components/routing/index.tsx","components/playerDetails/playerDetailsSettings.tsx","components/playerDetails/statItem.tsx","components/playerDetails/estimatedStableLevel.tsx","components/playerDetails/sameMatchRate.tsx","components/playerDetails/playerDetails.tsx"],"names":["RouteDef","Error","ViewRoutes","Context","React","createContext","NavButtons","className","replace","keepState","t","useTranslation","routes","useContext","urlBase","useRouteMatch","url","map","route","key","path","to","loc","pathname","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","children","match","useLocation","push","SimpleRoutedSubViews","Provider","value","props","x","slice","DateRangeOptions","DATE_RANGE_ITEMS","Object","keys","label","PlayerDetailsSettings","showLevel","useModel","model","updateModel","useState","type","All","startDate","endDate","dayjs","isSame","subtract","Custom","Last4Weeks","mode","setMode","Conf","dateMin","customDateFrom","setCustomDateFrom","customDateTo","setCustomDateTo","useEffect","playerId","selectedMode","setSelectedMode","useCallback","updateSearchTextFromEvent","e","searchText","currentTarget","inline","selectedItemKey","items","groupKey","onChange","availableModes","length","min","date","StatItem","description","i18nNamespace","data-tip","data-html","ENABLED_MODES","GameMode","玉","王座","三玉","三王座","EstimatedStableLevel","metadata","features","estimatedStableLevel","level","LevelWithDelta","getAdjustedLevel","parseInt","includes","isAllowedMode","notEnoughData","count","expectedGamePoint","PlayerMetadata","calculateExpectedGamePoint","estimatedNumGamesToChangeLevel","getMaxPoint","curPoint","Level","id","score","delta","getStartingPoint","changeLevelMsg","levelComponents","getStableLevelComponents","levelNames","modeL","modeLabel","levelNames1","levelName2","toFixed","join","formatFixed3","estimateStableLevel2","Math","abs","SameMatchRateTable","numGames","numDisplay","currentAccountId","adapter","useDataAdapter","getCount","numProcessedGames","rates","useMemo","i","game","getItem","currentPlayer","players","find","p","accountId","player","resultSelf","Array","fill","resultOpponent","pointSelf","pointOpponent","win","entry","selfRank","GameRecord","getRankIndexByPlayer","opponentRank","calculateDeltaPoint","modeId","result","values","sort","a","b","Fragment","style","display","formatPercent","backgroundColor","RankRates","getAvg","index","generatePlayerPathById","nickname","onClick","data-place","isMobile","SameMatchRate","RankRateChart","Loadable","loader","loading","RecentRankChart","WinLoseDistribution","ReactTooltipPromise","ReactTooltip","ExtendedStatsViewAsync","view","stats","useAsync","extended_stats","triggerRelayout","View","PlayerExtendedStatsView","和牌率","放铳率","自摸率","默听率","流局率","流听率","副露率","立直率","和了巡数","平均打点","平均铳点","MoreStats","getTag","max_level","formatAdjustedScore","levelObj","fixMaxLevel","最大连庄","里宝率","被炸率","平均被炸点数","放铳时立直率","放铳时副露率","副露后放铳率","副露后和牌率","副露后流局率","RiichiStats","立直后和牌率","立直后放铳率","立直收支","立直收入","立直支出","先制率","追立率","被追率","立直巡目","立直后流局率","一发率","振听立直率","BasicStats","avg_rank","negative_rate","LuckStats","役满","累计役满","最大累计番数","流满","W立直","平均起手向听","LargestLost","最近大铳","target","rel","href","getRecordLink","FanStatEntryList","formatFanSummary","fans","formatFullStartTime","start_time","FanStatEntry2","formatFan","PlayerStats","then","rebuild","getTooltip","dataTip","indexOf","document","getElementById","innerHTML","PlayerDetails","dataAdapter","getMetadata","Helmet","aspect","effect","multiline","place","getContent"],"mappings":"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","file":"static/js/8.3c23c6ce.chunk.js","sourcesContent":["import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = { path: string; exact?: boolean; title: string; children: React.ReactChild | React.ReactChildren };\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes.map(route => (\n        <NavLink\n          key={route.path}\n          to={loc => ({\n            pathname: `${urlBase}/${route.path}`,\n            state: keepState ? loc.state : undefined\n          })}\n          replace={replace}\n          exact={!!route.exact}\n          className=\"nav-link\"\n          activeClassName=\"active\"\n        >\n          {t(route.title)}\n        </NavLink>\n      ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n          {mutateTitle && (\n            <Helmet>\n              <title>{t(route.title)}</title>\n            </Helmet>\n          )}\n          {route.children}\n        </Route>\n      ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return <Context.Provider value={children[0].props.children.map(x => x.props)}>{children.slice(1)}</Context.Provider>;\n}\n","import React from \"react\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { FormRow } from \"../form/formRow\";\nimport { useModel } from \"../gameRecords/model\";\nimport { CheckboxGroup, DatePicker } from \"../form\";\nimport dayjs from \"dayjs\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport Conf from \"../../utils/conf\";\n\nenum DateRangeOptions {\n  All = \"全部\",\n  Last4Weeks = \"最近四周\",\n  Custom = \"自定义\"\n}\nconst DATE_RANGE_ITEMS = Object.keys(DateRangeOptions).map((key: string) => ({\n  key: DateRangeOptions[key as keyof typeof DateRangeOptions],\n  label: DateRangeOptions[key as keyof typeof DateRangeOptions]\n}));\n\nexport default function PlayerDetailsSettings({ showLevel = false }) {\n  const [model, updateModel] = useModel();\n  const [mode, setMode] = useState(() => {\n    if (model.type !== \"player\") {\n      return DateRangeOptions.All;\n    }\n    if (!model.startDate) {\n      return DateRangeOptions.All;\n    }\n    if (\n      (!model.endDate || dayjs(model.endDate).isSame(dayjs(), \"day\")) &&\n      dayjs(model.startDate).isSame(dayjs().subtract(27, \"day\"), \"day\")\n    ) {\n      return DateRangeOptions.Last4Weeks;\n    }\n    return DateRangeOptions.Custom;\n  });\n  const [customDateFrom, setCustomDateFrom] = useState(() =>\n    model.type === \"player\" && model.startDate ? model.startDate : Conf.dateMin\n  );\n  const [customDateTo, setCustomDateTo] = useState(() =>\n    model.type === \"player\" && model.endDate ? model.endDate : dayjs()\n  );\n  useEffect(() => {\n    if (model.type !== \"player\") {\n      return;\n    }\n    switch (mode) {\n      case DateRangeOptions.All:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: null,\n          endDate: null,\n          selectedMode: undefined\n        });\n        break;\n      case DateRangeOptions.Last4Weeks:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: dayjs().subtract(27, \"day\"),\n          endDate: null\n        });\n        break;\n      case DateRangeOptions.Custom:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: customDateFrom,\n          endDate: customDateTo\n        });\n        break;\n    }\n  }, [model, mode, customDateFrom, customDateTo, updateModel]);\n  const setSelectedMode = useCallback(mode => updateModel({ type: \"player\", selectedMode: mode }), [updateModel]);\n  const updateSearchTextFromEvent = useCallback(\n    (e: React.ChangeEvent<HTMLInputElement>) => updateModel({ type: \"player\", searchText: e.currentTarget.value }),\n    [updateModel]\n  );\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <FormRow title=\"时间\" inline={true}>\n            <CheckboxGroup\n              type=\"radio\"\n              selectedItemKey={mode}\n              items={DATE_RANGE_ITEMS}\n              groupKey=\"PlayerDetailsDateRangeSelector\"\n              onChange={setMode as (x: string) => void}\n            />\n          </FormRow>\n        </div>\n        {showLevel && Conf.availableModes.length > 1 && (\n          <div className=\"col-6\">\n            <FormRow title=\"等级\" inline={true}>\n              <ModeSelector mode={model.selectedMode} onChange={setSelectedMode} />\n            </FormRow>\n          </div>\n        )}\n      </div>\n      {mode === DateRangeOptions.Custom ? (\n        <div className=\"row mt-n3\">\n          <div className=\"col-6\">\n            <FormRow inline={true}>\n              <DatePicker\n                min={Conf.dateMin}\n                onChange={setCustomDateFrom}\n                date={customDateFrom}\n                className=\"form-control\"\n              />\n              <DatePicker min={Conf.dateMin} onChange={setCustomDateTo} date={customDateTo} className=\"form-control\" />\n            </FormRow>\n          </div>\n        </div>\n      ) : null}\n      {model.searchText ? (\n        <div className=\"row mb-3\">\n          <div className=\"col-12\">\n            <FormRow title=\"查找玩家\">\n              <input\n                type=\"text\"\n                className=\"form-control\"\n                value={model.searchText}\n                onChange={updateSearchTextFromEvent}\n              />\n            </FormRow>\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n}\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nexport default function StatItem({\n  label,\n  description,\n  className = \"\",\n  i18nNamespace,\n  children\n}: {\n  label: string;\n  description?: string;\n  className?: string;\n  i18nNamespace?: string[];\n  children: React.ReactChild;\n}) {\n  const { t } = useTranslation(i18nNamespace);\n  return (\n    <>\n      <dt className={`col-2 col-lg-1 text-nowrap ${className}`}>{t(label)}</dt>\n      <dd\n        className={`col-4 col-lg-3 text-right ${className}`}\n        data-tip={description ? t(description) : \"\"}\n        data-html=\"true\"\n      >\n        {children}\n      </dd>\n    </>\n  );\n}\n","import React from \"react\";\nimport { LevelWithDelta, PlayerMetadata, GameMode, Level, modeLabel } from \"../../data/types\";\nimport { useModel } from \"../gameRecords/model\";\nimport StatItem from \"./statItem\";\nimport Conf from \"../../utils/conf\";\nimport { useTranslation } from \"react-i18next\";\nimport { formatFixed3 } from \"../../utils\";\n\nconst ENABLED_MODES = [GameMode.玉, GameMode.王座, GameMode.三玉, GameMode.三王座];\n\nexport default function EstimatedStableLevel({ metadata }: { metadata: PlayerMetadata }) {\n  const [model] = useModel();\n  const { t } = useTranslation();\n  if (!Conf.features.estimatedStableLevel) {\n    return null;\n  }\n  const level = LevelWithDelta.getAdjustedLevel(metadata.level);\n  if (!model.selectedMode) {\n    return null;\n  }\n  const mode = parseInt(model.selectedMode) as GameMode;\n  if (!ENABLED_MODES.includes(mode) || !level.isAllowedMode(mode)) {\n    return null;\n  }\n  const notEnoughData = metadata.count < 100;\n  const expectedGamePoint = PlayerMetadata.calculateExpectedGamePoint(metadata, mode);\n  let estimatedNumGamesToChangeLevel = null as number | null;\n  if (level.getMaxPoint() && level.isAllowedMode(mode)) {\n    const curPoint = level.isSame(new Level(metadata.level.id))\n      ? metadata.level.score + metadata.level.delta\n      : level.getStartingPoint();\n    estimatedNumGamesToChangeLevel =\n      expectedGamePoint > 0 ? (level.getMaxPoint() - curPoint) / expectedGamePoint : curPoint / expectedGamePoint;\n  }\n  const changeLevelMsg = estimatedNumGamesToChangeLevel\n    ? t(\"，括号内为预计{{ label }}段场数\", { label: estimatedNumGamesToChangeLevel > 0 ? t(\"升\") : t(\"降\") })\n    : \"\";\n  const levelComponents = PlayerMetadata.getStableLevelComponents(metadata, mode);\n  const levelNames = \"一二三四\".slice(0, levelComponents.length);\n  const modeL = modeLabel(mode);\n  return (\n    <>\n      <StatItem\n        label=\"安定段位\"\n        description={`${t(\"在{{ modeL }}之间一直进行对局，预测最终能达到的段位。\", { modeL })}${\n          levelNames.length === 3 ? t(\"括号内为安定段位时的分数期望。\") : \"\"\n        }${notEnoughData ? t(\"（数据量不足，计算结果可能有较大偏差）\") : \"\"}<br/>${t(\n          \"{{ levelNames1 }}位平均 Pt / {{ levelName2 }}位平均得点 Pt：\",\n          {\n            levelNames1: levelNames.slice(0, levelNames.length - 1),\n            levelName2: levelNames[levelNames.length - 1]\n          }\n        )}[${levelComponents.map(x => x.toFixed(2)).join(\"/\")}]<br/>${t(\n          \"得点效率（各顺位平均 Pt 及平均得点 Pt 的加权平均值）：\"\n        )}${formatFixed3(PlayerMetadata.calculateExpectedGamePoint(metadata, mode, undefined, false))}`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {PlayerMetadata.estimateStableLevel2(metadata, mode)}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n      <StatItem\n        label=\"分数期望\"\n        description={`${t(\"在{{ modeL }}之间每局获得点数的数学期望值{{ changeLevelMsg }}\", {\n          changeLevelMsg,\n          modeL\n        })}${notEnoughData ? t(\"（数据量不足，计算结果可能有较大偏差）\") : \"\"}`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {expectedGamePoint.toFixed(1)}\n          {estimatedNumGamesToChangeLevel ? ` (${Math.abs(estimatedNumGamesToChangeLevel).toFixed(0)})` : \"\"}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { PlayerRecord, RankRates, GameRecord, calculateDeltaPoint, Level } from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { formatPercent, formatFixed3, isMobile } from \"../../utils\";\nimport { SimpleRoutedSubViews, ViewRoutes, RouteDef, NavButtons, ViewSwitch } from \"../routing\";\nimport { IoIosList } from \"react-icons/io\";\nimport { useModel } from \"../gameRecords/model\";\nimport { useTranslation } from \"react-i18next\";\n\nexport function SameMatchRateTable({ numGames = 100, numDisplay = 10, currentAccountId = 0 }) {\n  const { t } = useTranslation();\n  const adapter = useDataAdapter();\n  const [, updateModel] = useModel();\n  const count = adapter.getCount();\n  const numProcessedGames = Math.min(count, numGames);\n  const rates = useMemo(() => {\n    if (count <= 0) {\n      return null;\n    }\n    const map: {\n      [key: number]: {\n        player: PlayerRecord;\n        count: number;\n        resultSelf: RankRates;\n        resultOpponent: RankRates;\n        pointSelf: number;\n        pointOpponent: number;\n        win: number;\n      };\n    } = {};\n    for (let i = 0; i < numProcessedGames; i++) {\n      const game = adapter.getItem(i);\n      if (!(\"uuid\" in game)) {\n        return null; // Not loaded, try again later\n      }\n      const currentPlayer = game.players.find(p => p.accountId === currentAccountId);\n      if (!currentPlayer) {\n        throw new Error(\"Can't find current player, shouldn't happen\");\n      }\n      for (const player of game.players) {\n        if (player.accountId === currentAccountId) {\n          continue;\n        }\n        if (!map[player.accountId]) {\n          map[player.accountId] = {\n            player,\n            count: 0,\n            resultSelf: new Array<number>(game.players.length).fill(0) as RankRates,\n            resultOpponent: new Array<number>(game.players.length).fill(0) as RankRates,\n            pointSelf: 0,\n            pointOpponent: 0,\n            win: 0\n          };\n        }\n        const entry = map[player.accountId];\n        entry.count++;\n        const selfRank = GameRecord.getRankIndexByPlayer(game, currentAccountId);\n        const opponentRank = GameRecord.getRankIndexByPlayer(game, player);\n        entry.resultSelf[selfRank]++;\n        entry.resultOpponent[opponentRank]++;\n        if (selfRank < opponentRank) {\n          entry.win++;\n        }\n        entry.pointSelf += calculateDeltaPoint(\n          currentPlayer.score,\n          selfRank,\n          game.modeId,\n          new Level(currentPlayer.level),\n          true,\n          true\n        );\n        entry.pointOpponent += calculateDeltaPoint(\n          player.score,\n          opponentRank,\n          game.modeId,\n          new Level(player.level),\n          true,\n          true\n        );\n      }\n    }\n    const result = Object.values(map);\n    result.sort((a, b) => b.count - a.count);\n    return result;\n  }, [count, adapter, numProcessedGames, currentAccountId]);\n  if (count <= 0) {\n    return null;\n  }\n  if (!rates) {\n    return <Loading />;\n  }\n  return (\n    <dl className=\"row\">\n      {rates.slice(0, numDisplay).map(x => (\n        <React.Fragment key={x.player.accountId}>\n          <div style={{ display: \"none\" }} id={`smr-statistic-tip-${currentAccountId}-${x.player.accountId}`}>\n            <p className=\"mt-2\">\n              {t(\"胜率：\")}\n              {formatPercent(x.win / x.count)}\n            </p>\n            <table\n              className=\"table table-dark mb-1 text-nowrap table-sm text-right\"\n              style={{ display: \"inline-table\", backgroundColor: \"transparent\" }}\n            >\n              <thead>\n                <tr>\n                  <th></th>\n                  <th>{t(\"玩家\")}</th>\n                  <th>{t(\"对手\")}</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td className=\"text-left\">{t(\"平均顺位\")}</td>\n                  <td>{formatFixed3(RankRates.getAvg(x.resultSelf))}</td>\n                  <td>{formatFixed3(RankRates.getAvg(x.resultOpponent))}</td>\n                </tr>\n                <tr>\n                  <td className=\"text-left\">{t(\"平均得点\")}</td>\n                  <td>{formatFixed3(x.pointSelf / x.count)}</td>\n                  <td>{formatFixed3(x.pointOpponent / x.count)}</td>\n                </tr>\n                {[\"一\", \"二\", \"三\", \"四\"].slice(0, x.resultSelf.length).map((label, index) => (\n                  <tr key={index}>\n                    <td className=\"text-left\">{t(label + \"位\")}</td>\n                    <td>\n                      {formatPercent(x.resultSelf[index] / x.count)} ({x.resultSelf[index]})\n                    </td>\n                    <td>\n                      {formatPercent(x.resultOpponent[index] / x.count)} ({x.resultOpponent[index]})\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n          <dt className=\"col-8 col-lg-4 font-weight-normal\">\n            <Link to={generatePlayerPathById(x.player.accountId)}>{x.player.nickname}</Link>\n            <button\n              className=\"button-link ml-2\"\n              onClick={() => updateModel({ type: \"player\", searchText: x.player.nickname })}\n            >\n              <IoIosList />\n            </button>\n          </dt>\n          <dd className=\"col-4 col-lg-2 text-right\">\n            <span\n              data-tip={`##smr-statistic-tip-${currentAccountId}-${x.player.accountId}`}\n              data-html={true}\n              data-place={isMobile() ? \"left\" : \"top\"}\n            >\n              {\" \"}\n              {formatPercent(x.count / numProcessedGames)} ({x.count})\n            </span>\n          </dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}\n\nexport default function SameMatchRate({ numDisplay = 10, currentAccountId = 0 }) {\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"latest\" title=\"最近 100 局\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} />\n        </RouteDef>\n        <RouteDef path=\"all\" title=\"全部\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} numGames={0x7fffffff} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-n3\" />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n","import React from \"react\";\nimport Loadable from \"../misc/customizedLoadable\";\nimport { Helmet } from \"react-helmet\";\n\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { useEffect } from \"react\";\nimport { triggerRelayout, formatPercent, useAsync, formatFixed3 } from \"../../utils/index\";\nimport {\n  LevelWithDelta,\n  PlayerExtendedStats,\n  PlayerMetadata,\n  GameRecord,\n  FanStatEntry2,\n  FanStatEntryList,\n} from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport PlayerDetailsSettings from \"./playerDetailsSettings\";\nimport StatItem from \"./statItem\";\nimport EstimatedStableLevel from \"./estimatedStableLevel\";\nimport { Level } from \"../../data/types/level\";\nimport { ViewRoutes, RouteDef, SimpleRoutedSubViews, NavButtons, ViewSwitch } from \"../routing\";\nimport { useLocation } from \"react-router-dom\";\nimport SameMatchRate from \"./sameMatchRate\";\nimport { useTranslation } from \"react-i18next\";\n\nconst RankRateChart = Loadable({\n  loader: () => import(\"./charts/rankRate\"),\n  loading: () => <Loading />,\n});\nconst RecentRankChart = Loadable({\n  loader: () => import(\"./charts/recentRank\"),\n  loading: () => <Loading />,\n});\nconst WinLoseDistribution = Loadable({\n  loader: () => import(\"./charts/winLoseDistribution\"),\n  loading: () => <Loading />,\n});\nconst ReactTooltipPromise = import(\"react-tooltip\");\nconst ReactTooltip = Loadable({\n  loader: () => ReactTooltipPromise,\n  loading: () => null,\n});\n\nfunction ExtendedStatsViewAsync({\n  metadata,\n  view,\n}: {\n  metadata: PlayerMetadata;\n  view: React.ComponentType<{ stats: PlayerExtendedStats; metadata: PlayerMetadata }>;\n}) {\n  const stats = useAsync(metadata.extended_stats);\n  useEffect(triggerRelayout, [!!stats]);\n  if (!stats) {\n    return null;\n  }\n  const View = view;\n  return <View stats={stats} metadata={metadata} />;\n}\n\nfunction PlayerExtendedStatsView({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"和牌率\" description=\"和牌局数 / 总局数\">\n        {formatPercent(stats.和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳率\" description=\"放铳局数 / 总局数\">\n        {formatPercent(stats.放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"自摸率\" description=\"自摸局数 / 和牌局数\">\n        {formatPercent(stats.自摸率 || 0)}\n      </StatItem>\n      <StatItem label=\"默胡率\" description=\"门清默听和牌局数 / 和牌局数\">\n        {formatPercent(stats.默听率 || 0)}\n      </StatItem>\n      <StatItem label=\"流局率\" description=\"流局局数 / 总局数\">\n        {formatPercent(stats.流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"流听率\" description=\"流局听牌局数 / 流局局数\">\n        {formatPercent(stats.流听率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露率\" description=\"副露局数 / 总局数\">\n        {formatPercent(stats.副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直率\" description=\"立直局数 / 总局数\">\n        {formatPercent(stats.立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"和了巡数\">{(stats.和了巡数 || 0).toFixed(3)}</StatItem>\n      <StatItem label=\"平均打点\">{stats.平均打点 || 0}</StatItem>\n      <StatItem label=\"平均铳点\">{stats.平均铳点 || 0}</StatItem>\n    </>\n  );\n}\n\nfunction fixMaxLevel(level: LevelWithDelta): LevelWithDelta {\n  const levelObj = new Level(level.id);\n  if (level.score + level.delta < levelObj.getStartingPoint()) {\n    return {\n      id: level.id,\n      score: levelObj.getStartingPoint(),\n      delta: 0,\n    };\n  }\n  return level;\n}\n\nfunction MoreStats({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"最高等级\">{LevelWithDelta.getTag(metadata.max_level)}</StatItem>\n      <StatItem label=\"最高分数\">{LevelWithDelta.formatAdjustedScore(fixMaxLevel(metadata.max_level))}</StatItem>\n      <StatItem label=\"最大连庄\">{stats.最大连庄 || 0}</StatItem>\n      <StatItem label=\"里宝率\" description=\"中里宝局数 / 立直和了局数\">\n        {formatPercent(stats.里宝率 || 0)}\n      </StatItem>\n      <StatItem label=\"被炸率\" description=\"被炸庄（满贯或以上）次数 / 被自摸次数\">\n        {formatPercent(stats.被炸率 || 0)}\n      </StatItem>\n      <StatItem label=\"平均被炸点数\" description=\"被炸庄（满贯或以上）点数 / 次数\">\n        {stats.平均被炸点数 || 0}\n      </StatItem>\n      <StatItem label=\"放铳时立直率\" description=\"放铳时立直次数 / 放铳次数\">\n        {formatPercent(stats.放铳时立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳时副露率\" description=\"放铳时副露次数 / 放铳次数\">\n        {formatPercent(stats.放铳时副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后放铳率\" description=\"放铳时副露次数 / 副露次数\">\n        {formatPercent(stats.副露后放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后和牌率\" description=\"副露后和牌次数 / 副露次数\">\n        {formatPercent(stats.副露后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后流局率\" description=\"副露后流局次数 / 副露次数\">\n        {formatPercent(stats.副露后流局率 || 0)}\n      </StatItem>\n    </>\n  );\n}\nfunction RiichiStats({ stats }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"立直率\" description=\"立直局数 / 总局数\">\n        {formatPercent(stats.立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直和了\" description=\"立直和了局数 / 立直局数\">\n        {formatPercent(stats.立直后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直放铳\" description=\"立直放铳局数 / 立直局数\">\n        {formatPercent(stats.立直后放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直收支\" description=\"立直总收支（含供托） / 立直局数\">\n        {stats.立直收支 || 0}\n      </StatItem>\n      <StatItem label=\"立直收入\" description=\"立直和了收入（含供托） / 立直和了局数\">\n        {stats.立直收入 || 0}\n      </StatItem>\n      <StatItem label=\"立直支出\" description=\"立直放铳支出（含立直棒） / 立直放铳局数\">\n        {stats.立直支出 || 0}\n      </StatItem>\n      <StatItem label=\"先制率\" description=\"先制立直局数 / 立直局数\">\n        {formatPercent(stats.先制率 || 0)}\n      </StatItem>\n      <StatItem label=\"追立率\" description=\"追立局数 / 立直局数\">\n        {formatPercent(stats.追立率 || 0)}\n      </StatItem>\n      <StatItem label=\"被追率\" description=\"被追立局数 / 立直局数\">\n        {formatPercent(stats.被追率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直巡目\">{formatFixed3(stats.立直巡目 || 0)}</StatItem>\n      <StatItem label=\"立直流局\" description=\"立直流局局数 / 立直局数\">\n        {formatPercent(stats.立直后流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"一发率\" description=\"一发局数 / 立直和了局数\">\n        {formatPercent(stats.一发率 || 0)}\n      </StatItem>\n      <StatItem label=\"振听率\" description=\"振听立直局数（不含立直见逃） / 立直局数\">\n        {formatPercent(stats.振听立直率 || 0)}\n      </StatItem>\n    </>\n  );\n}\nfunction BasicStats({ metadata }: { metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"记录场数\">{metadata.count}</StatItem>\n      <StatItem label=\"记录等级\">{LevelWithDelta.getTag(metadata.level)}</StatItem>\n      <StatItem label=\"记录分数\">{LevelWithDelta.formatAdjustedScore(metadata.level)}</StatItem>\n      <ExtendedStatsViewAsync metadata={metadata} view={PlayerExtendedStatsView} />\n      <StatItem label=\"平均顺位\">{metadata.avg_rank.toFixed(3)}</StatItem>\n      <StatItem label=\"被飞率\">{formatPercent(metadata.negative_rate)}</StatItem>\n      <EstimatedStableLevel metadata={metadata} />\n    </>\n  );\n}\nfunction LuckStats({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"役满\" description=\"和出役满次数\">\n        {stats.役满 || 0}\n      </StatItem>\n      <StatItem label=\"累计役满\" description=\"和出累计役满次数\">\n        {stats.累计役满 || 0}\n      </StatItem>\n      <StatItem label=\"最大累计番数\" description=\"和出的最大番数（不含役满役）\">\n        {stats.最大累计番数 || 0}\n      </StatItem>\n      <StatItem label=\"流满\" description=\"流满次数\">\n        {stats.流满 || 0}\n      </StatItem>\n      <StatItem label=\"两立直\" description=\"两立直次数\">\n        {stats.W立直 || 0}\n      </StatItem>\n      <StatItem label=\"平均起手向听\">{formatFixed3(stats.平均起手向听)}</StatItem>\n    </>\n  );\n}\nfunction LargestLost({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  const { t } = useTranslation();\n  if (!stats.最近大铳) {\n    return <p className=\"text-center\">{t(\"无满贯或以上大铳\")}</p>;\n  }\n  return (\n    <div>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"d-flex justify-content-between font-weight-bold\"\n        href={GameRecord.getRecordLink(stats.最近大铳.id, metadata.id)}\n      >\n        <span>{FanStatEntryList.formatFanSummary(stats.最近大铳.fans)}</span>\n        <span>{GameRecord.formatFullStartTime(stats.最近大铳.start_time)}</span>\n      </a>\n      <dl className=\"row mt-2\">\n        {stats.最近大铳.fans.map((x) => (\n          <StatItem key={x.label} label={x.label}>\n            {FanStatEntry2.formatFan(x)}\n          </StatItem>\n        ))}\n      </dl>\n    </div>\n  );\n}\nfunction PlayerStats({ metadata }: { metadata: PlayerMetadata }) {\n  const loc = useLocation();\n  useEffect(() => {\n    ReactTooltipPromise.then((x) => x.rebuild());\n  }, [loc.pathname]);\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"\" exact title=\"基本\">\n          <dl className=\"row\">\n            <BasicStats metadata={metadata} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"riichi\" title=\"立直\">\n          <dl className=\"row\">\n            <ExtendedStatsViewAsync metadata={metadata} view={RiichiStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"extended\" title=\"更多\">\n          <dl className=\"row\">\n            <ExtendedStatsViewAsync metadata={metadata} view={MoreStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"win-lose\" title=\"和铳分布\">\n          <ExtendedStatsViewAsync metadata={metadata} view={WinLoseDistribution} />\n        </RouteDef>\n        <RouteDef path=\"luck\" title=\"血统\">\n          <dl className=\"row\">\n            <ExtendedStatsViewAsync metadata={metadata} view={LuckStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"largest-lost\" title=\"最近大铳\">\n          <ExtendedStatsViewAsync metadata={metadata} view={LargestLost} />\n        </RouteDef>\n        <RouteDef path=\"same-match\" title=\"最常同桌\">\n          <SameMatchRate currentAccountId={metadata.id} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-3\" replace keepState />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n\nfunction getTooltip(dataTip: string): React.ReactNode {\n  if (dataTip && dataTip.indexOf && dataTip.indexOf(\"##\") === 0) {\n    return document.getElementById(dataTip.slice(2))?.innerHTML || dataTip;\n  }\n  return dataTip;\n}\n\nexport default function PlayerDetails() {\n  const { t } = useTranslation();\n  const dataAdapter = useDataAdapter();\n  const metadata = dataAdapter.getMetadata<PlayerMetadata>();\n  useEffect(() => {\n    ReactTooltipPromise.then((x) => x.rebuild());\n  });\n  useEffect(triggerRelayout, [!!metadata]);\n  if (!metadata || !metadata.nickname) {\n    return <Loading />;\n  }\n  return (\n    <div>\n      <Helmet>\n        <title>{metadata.nickname}</title>\n      </Helmet>\n      <h2 className=\"text-center\">\n        {t(\"玩家：\")}\n        {metadata.nickname}\n      </h2>\n      <div className=\"row mt-4\">\n        <div className=\"col-md-8\">\n          <h3 className=\"text-center mb-4\">{t(\"最近走势\")}</h3>\n          <RecentRankChart dataAdapter={dataAdapter} playerId={metadata.id} aspect={6} />\n          <PlayerStats metadata={metadata} />\n        </div>\n        <div className=\"col-md-4\">\n          <h3 className=\"text-center mb-4\">{t(\"累计战绩\")}</h3>\n          <RankRateChart metadata={metadata} />\n        </div>\n      </div>\n      <PlayerDetailsSettings showLevel={true} />\n      <ReactTooltip effect=\"solid\" multiline={true} place=\"top\" getContent={getTooltip} className=\"stat-tooltip\" />\n    </div>\n  );\n}\n"],"sourceRoot":""}