{"version":3,"sources":["components/gameRecords/player.tsx","components/gameRecords/table.tsx"],"names":["Player","React","memo","player","game","isActive","hideDetailLink","nickname","level","score","accountId","isTop","GameRecord","getRankIndexByPlayer","className","href","getRecordLink","title","target","rel","getLevelTag","undefined","to","generatePlayerPathById","Players","activePlayerId","players","map","x","key","toString","cellFormatTime","cellData","dayjs","unix","format","cellFormatFullTime","rowData","loading","formatFullStartTime","cellFormatRank","columnData","style","color","getPlayerRankColor","getPlayerRankLabel","slice","cellFormatGameMode","GameMode","GameRecordTable","showStartEnd","showFullTime","data","useDataAdapter","useModel","model","scrollerProps","useScrollerProps","isScrolling","onChildScroll","scrollTop","height","registerChild","rowGetter","useCallback","index","getItem","getRowClassName","clsx","isItemLoaded","even","noRowsRenderer","getUnfilteredCount","type","playerId","cellRenderPlayer","unfilteredCount","shouldTriggerLayout","shouldPreload","useEffect","triggerRelayout","Loadable","preloadAll","ref","disableHeight","width","autoHeight","rowCount","getCount","rowHeight","window","matchMedia","matches","headerHeight","onScroll","rowClassName","dataKey","label","cellRenderer","flexGrow","headerClassName"],"mappings":"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","file":"static/js/8.a95e21be.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { IoMdBook } from \"react-icons/io\";\n\nimport { GameRecord, PlayerRecord, getLevelTag } from \"../../data/types\";\nimport { generatePlayerPathById } from \"./routes\";\n\nexport const Player = React.memo(function({\n  player,\n  game,\n  isActive,\n  hideDetailLink\n}: {\n  player: PlayerRecord;\n  game: GameRecord;\n  isActive: boolean;\n  hideDetailLink?: boolean;\n}) {\n  const { nickname, level, score, accountId } = player;\n  const isTop = GameRecord.getRankIndexByPlayer(game, player) === 0;\n  return (\n    <span className={`player ${isTop && \"font-weight-bold\"} ${isActive && \"active-player\"}`}>\n      <a href={GameRecord.getRecordLink(game, player)} title=\"查看牌谱\" target=\"_blank\" rel=\"noopener noreferrer\">\n        [{getLevelTag(level)}] {nickname} {score !== undefined && `[${score}]`}\n      </a>{\" \"}\n      {hideDetailLink || isActive ? null : (\n        <Link title=\"玩家记录\" to={generatePlayerPathById(accountId)}>\n          <IoMdBook />\n        </Link>\n      )}\n    </span>\n  );\n});\n","import React from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { TableCellProps, Index } from \"react-virtualized\";\r\nimport { Table, Column } from \"react-virtualized/dist/es/Table\";\r\nimport { AutoSizer } from \"react-virtualized/dist/es/AutoSizer\";\r\nimport dayjs from \"dayjs\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { GameRecord, GameMode } from \"../../data/types\";\r\nimport { Player } from \"./player\";\r\nimport { useScrollerProps } from \"../misc/scroller\";\r\nimport { useDataAdapter } from \"./dataAdapterProvider\";\r\nimport { triggerRelayout } from \"../../utils/index\";\r\nimport { useModel } from \"./model\";\r\nimport Loadable from \"react-loadable\";\r\nimport Loading from \"../misc/loading\";\r\n\r\nconst formatTime = (x: number) => (x ? dayjs.unix(x).format(\"HH:mm\") : null);\r\n\r\nconst Players = React.memo(({ game, activePlayerId }: { game: GameRecord; activePlayerId?: string }) => (\r\n  <div className=\"row no-gutters\">\r\n    {game.players.map(x => (\r\n      <div key={x.accountId} className=\"col-12 col-md-6 pr-1\">\r\n        <Player game={game} player={x} isActive={x.accountId.toString() === activePlayerId} />\r\n      </div>\r\n    ))}\r\n  </div>\r\n));\r\n\r\nconst cellFormatTime = ({ cellData }: TableCellProps) => formatTime(cellData);\r\nconst cellFormatFullTime = ({ rowData }: TableCellProps) =>\r\n  rowData.loading ? \"\" : GameRecord.formatFullStartTime(rowData);\r\nconst cellFormatRank = ({ rowData, columnData }: TableCellProps) =>\r\n  !rowData || rowData.loading || !columnData.activePlayerId ? (\r\n    \"\"\r\n  ) : (\r\n    <span\r\n      className=\"font-weight-bold\"\r\n      style={{ color: GameRecord.getPlayerRankColor(rowData, columnData.activePlayerId) }}\r\n    >\r\n      {GameRecord.getPlayerRankLabel(rowData, columnData.activePlayerId).slice(0, 1)}\r\n    </span>\r\n  );\r\nconst cellFormatGameMode = ({ cellData }: TableCellProps) => GameMode[cellData];\r\n\r\nexport default function GameRecordTable({ showStartEnd = true, showFullTime = false } = {}) {\r\n  const data = useDataAdapter();\r\n  const [model] = useModel();\r\n  const scrollerProps = useScrollerProps();\r\n  const { isScrolling, onChildScroll, scrollTop, height, registerChild } = scrollerProps;\r\n  const rowGetter = useCallback(({ index }: Index) => data.getItem(index), [data]);\r\n  const getRowClassName = useCallback(\r\n    ({ index }: Index) => (index >= 0 ? clsx({ loading: !data.isItemLoaded(index), even: (index & 1) === 0 }) : \"\"),\r\n    [data]\r\n  );\r\n  const noRowsRenderer = useCallback(() => (data.getUnfilteredCount() ? null : <Loading />), [data]);\r\n  const activePlayerId = model.type === \"player\" ? model.playerId : undefined;\r\n  const cellRenderPlayer = useCallback(\r\n    ({ rowData }: TableCellProps) =>\r\n      rowData && rowData.players ? <Players game={rowData} activePlayerId={activePlayerId} /> : null,\r\n    [activePlayerId]\r\n  );\r\n  const unfilteredCount = data.getUnfilteredCount();\r\n  const shouldTriggerLayout = !!unfilteredCount;\r\n  const shouldPreload = !!unfilteredCount && !(\"loading\" in (data.getItem(0) || {loading: true}));\r\n  useEffect(() => {\r\n    triggerRelayout();\r\n  }, [shouldTriggerLayout]);\r\n  useEffect(() => {\r\n    if (shouldPreload) {\r\n      Loadable.preloadAll();\r\n    }\r\n  }, [shouldPreload]);\r\n  return (\r\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    <div ref={registerChild as any}>\r\n      <AutoSizer disableHeight>\r\n        {({ width }) => (\r\n          <Table\r\n            autoHeight\r\n            className={activePlayerId ? \"with-active-player\" : \"\"}\r\n            rowCount={data.getCount()}\r\n            rowGetter={rowGetter}\r\n            rowHeight={window.matchMedia(\"(min-width: 768px)\").matches ? 70 : 140}\r\n            headerHeight={50}\r\n            width={width}\r\n            height={height}\r\n            isScrolling={isScrolling}\r\n            onScroll={onChildScroll}\r\n            scrollTop={scrollTop}\r\n            rowClassName={getRowClassName}\r\n            noRowsRenderer={noRowsRenderer}\r\n          >\r\n            <Column dataKey=\"modeId\" label=\"等级\" cellRenderer={cellFormatGameMode} width={40} />\r\n            {activePlayerId ? (\r\n              <Column\r\n                dataKey=\"modeId\"\r\n                label=\"顺位\"\r\n                columnData={{ activePlayerId }}\r\n                cellRenderer={cellFormatRank}\r\n                width={40}\r\n              />\r\n            ) : null}\r\n            <Column dataKey=\"players\" label=\"玩家\" cellRenderer={cellRenderPlayer} width={120} flexGrow={1} />\r\n            {showStartEnd\r\n              ? [\r\n                  <Column\r\n                    key=\"startTime\"\r\n                    dataKey=\"startTime\"\r\n                    label=\"开始\"\r\n                    cellRenderer={cellFormatTime}\r\n                    width={50}\r\n                    className=\"text-right\"\r\n                    headerClassName=\"text-right\"\r\n                  />,\r\n                  <Column\r\n                    key=\"endTime\"\r\n                    dataKey=\"endTime\"\r\n                    label=\"结束\"\r\n                    cellRenderer={cellFormatTime}\r\n                    width={50}\r\n                    headerClassName=\"text-right\"\r\n                    className=\"text-right\"\r\n                  />\r\n                ]\r\n              : null}\r\n            {showFullTime ? (\r\n              <Column\r\n                dataKey=\"startTime\"\r\n                label=\"时间\"\r\n                cellRenderer={cellFormatFullTime}\r\n                width={140}\r\n                className=\"text-right\"\r\n                headerClassName=\"text-right\"\r\n              />\r\n            ) : null}\r\n          </Table>\r\n        )}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}