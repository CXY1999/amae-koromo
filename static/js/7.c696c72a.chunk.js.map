{"version":3,"sources":["components/modeModel/model.tsx","components/modeModel/modelModeSelector.tsx","components/modeModel/index.tsx","components/routing/index.tsx","components/ranking/deltaRanking.tsx","components/ranking/careerRanking.tsx","components/ranking/index.tsx"],"names":["DEFAULT_MODEL","selectedMode","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","ModelModeSelector","setModeId","useCallback","modeId","className","mode","onChange","RouteDef","Error","ViewRoutes","Context","NavButtons","routes","match","useRouteMatch","path","map","route","key","to","activeClassName","title","ViewSwitch","defaultPath","SimpleRoutedSubViews","props","x","slice","RankingTable","rows","id","generatePlayerPathById","LevelWithDelta","getTag","level","nickname","delta","formatter","formatPercent","showNumGames","valueLabel","length","index","count","rank_key","CareerRankingColumn","type","data","useAsyncFactory","getCareerRanking","CareerRanking","stateName","i","Fragment","ROUTES","data1w","getDeltaRanking","RankingTimeSpan","OneWeek","data4w","FourWeeks","bottom","top","CareerRankingType","Rank1","Rank4","Rank12","StableLevel","PlayerMetadata","formatStableLevel2","AvgRank","formatFixed3","NumGames","formatIdentity","Routes"],"mappings":"kxBAUA,IAAMA,EAAuB,CAAEC,aAAc,IACvCC,EAAeC,IAAMC,cAAsD,CAAC,EAAD,GAAMJ,GAAiB,eAC3FK,EAAW,kBAAMC,qBAAWJ,IAElC,SAASK,EAAT,GAAmF,IAAtDC,EAAqD,EAArDA,SAAqD,EAC1DC,sBAC3B,SAACC,EAAiBC,GAAlB,YACKD,EADL,GAEKC,KAEL,MACA,uBACKX,MARgF,mBAChFY,EADgF,KACzEC,EADyE,KAWjFC,EAAsCC,mBAAQ,iBAAM,CAACH,EAAOC,KAAc,CAACD,EAAOC,IACxF,OAAO,kBAACX,EAAac,SAAd,CAAuBF,MAAOA,GAAQN,K,6ECrBhC,SAASS,IAAqB,IAAD,EACbZ,cADa,mBACnCO,EADmC,KAC5BC,EAD4B,KAEpCK,EAAYC,uBAAY,SAAAC,GAAM,OAAIP,EAAY,CAAEZ,aAAcmB,MAAW,CAACP,IAChF,OACE,yBAAKQ,UAAU,YACb,yBAAKA,UAAU,OACb,kBAAC,IAAD,CAAcC,KAAMV,EAAMX,aAAcsB,SAAUL,MCX1D,2G,iCCAA,qNAOaM,EAAmD,WAC9D,MAAM,IAAIC,MAAM,+BAILC,EAAmD,WAC9D,MAAM,IAAID,MAAM,+BAGZE,EAAUxB,IAAMC,cAA+B,IAE9C,SAASwB,IACd,IAAMC,EAASvB,qBAAWqB,GACpBG,EAAQC,eAAmB,CAAEC,KAAM,IACzC,OACE,yBAAKX,UAAU,sBACZQ,EAAOI,KAAI,SAAAC,GAAK,OACf,kBAAC,IAAD,CAASC,IAAKD,EAAMF,KAAMI,GAAE,UAAKN,EAAME,KAAX,YAAmBE,EAAMF,MAAQX,UAAU,WAAWgB,gBAAgB,UAC/FH,EAAMI,WAOV,SAASC,EAAT,GAMH,IALFC,EAKC,EALDA,YACAhC,EAIC,EAJDA,SAKMqB,EAASvB,qBAAWqB,GACpBG,EAAQC,eAAmB,CAAEC,KAAM,IACzC,OACE,kBAAC,IAAD,KACGH,EAAOI,KAAI,SAAAC,GAAK,OACf,kBAAC,IAAD,CAAOC,IAAKD,EAAMF,KAAMA,KAAI,UAAKF,EAAME,KAAX,YAAmBE,EAAMF,OACnD,kBAAC,SAAD,KACE,+BAAQE,EAAMI,QAEfJ,EAAM1B,aAGX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAU4B,GAAE,UAAKN,EAAME,KAAX,YAAmBQ,GAAeX,EAAO,GAAGG,SAEzDxB,GAKA,SAASiC,EAAT,GAIH,IAHFjC,EAGC,EAHDA,SAIA,OAAO,kBAACmB,EAAQX,SAAT,CAAkBF,MAAON,EAAS,GAAGkC,MAAMlC,SAASyB,KAAI,SAAAU,GAAC,OAAIA,EAAED,UAASlC,EAASoC,MAAM,M,4ICrDhG,SAASC,EAAT,GAA4D,IAAD,IAAnCC,YAAmC,MAA5B,GAA4B,EACzD,OACE,2BAAOzB,UAAU,uBACf,+BACGyB,EAAKb,KAAI,SAAAU,GAAC,OACT,wBAAIR,IAAKQ,EAAEI,IACT,4BACE,kBAAC,IAAD,CAAMX,GAAIY,YAAuBL,EAAEI,KAAnC,IACIE,iBAAeC,OAAOP,EAAEQ,OAD5B,KACsCR,EAAES,WAG1C,wBAAI/B,UAAU,cAAcsB,EAAEU,aCT1C,SAASR,EAAT,GAKI,IAAD,IAJDC,YAIC,MAJM,GAIN,MAHDQ,iBAGC,MAHWC,IAGX,MAFDC,oBAEC,aADDC,kBACC,MADY,GACZ,EACD,OAAKX,GAASA,EAAKY,OAIjB,2BAAOrC,UAAU,uBACf,+BACE,4BACE,wBAAIA,UAAU,cAAd,gBACA,4CACCmC,GAAgB,wBAAInC,UAAU,cAAd,sBACjB,wBAAIA,UAAU,cAAcoC,KAGhC,+BACGX,EAAKb,KAAI,SAACU,EAAGgB,GAAJ,OACR,wBAAIxB,IAAKQ,EAAEI,IACT,wBAAI1B,UAAU,cAAcsC,EAAQ,GACpC,4BACE,kBAAC,IAAD,CAAMvB,GAAIY,YAAuBL,EAAEI,KAAnC,IACIE,iBAAeC,OAAOP,EAAEQ,OAD5B,KACsCR,EAAES,WAGzCI,GAAgB,wBAAInC,UAAU,cAAcsB,EAAEiB,OAC/C,wBAAIvC,UAAU,cAAciC,EAAUX,EAAEkB,iBAtBzC,kBAAC,IAAD,MA8BJ,SAASC,EAAT,GAYH,IAXFC,EAWC,EAXDA,KACAzB,EAUC,EAVDA,MAUC,IATDgB,iBASC,MATWC,IASX,MARDC,oBAQC,aAPDC,kBAOC,MAPY,GAOZ,IACepD,cACVe,EAFL,oBAEoBnB,aACf+D,EAAOC,aAAgB,kBAAMC,YAAiBH,EAAM3C,KAAS,CAAC2C,EAAM3C,GAAS,oBACnF,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,oBAAoBiB,GAClC,kBAAC,EAAD,CAAcQ,KAAMkB,EAAMV,UAAWA,EAAWG,WAAYA,GAAcnB,EAAOkB,aAAcA,IAFjG,KAMG,SAASW,EAAT,GAIH,IAHF3D,EAGC,EAHDA,SAIA,OACE,oCACE,kBAAC,IAAD,CAAO4D,UAAU,uBACf,wBAAI/C,UAAU,QAAd,gBADF,yGAIA,yBAAKA,UAAU,OACZb,EAASyB,KAAI,SAACU,EAAG0B,GAAJ,OACZ,kBAAC,IAAMC,SAAP,CAAgBnC,IAAKkC,GAAI1B,Q,qBCtFnC,wCAYA,IAAM4B,EACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUvC,KAAK,QAAQM,MAAM,kCAC3B,mBFeS,WACb,IAAMkC,EAASP,aACb,kBAAMQ,YAAgBC,IAAgBC,WACtC,GACA,4CAEIC,EAASX,aACb,kBAAMQ,YAAgBC,IAAgBG,aACtC,GACA,8CATmC,EAWrBxE,cACVe,EAZ+B,oBAYhBnB,aACrB,OAAKuE,GAAWI,EAId,oCACE,yBAAKvD,UAAU,OACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,eAAd,sBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,eAAd,gBACA,kBAACwB,EAAD,CAAcC,KAAM0B,EAAOpD,GAAU,KAAK0D,UAE5C,yBAAKzD,UAAU,YACb,wBAAIA,UAAU,eAAd,gBACA,kBAACwB,EAAD,CAAcC,KAAM8B,EAAOxD,GAAU,KAAK0D,YAIhD,yBAAKzD,UAAU,YACb,wBAAIA,UAAU,eAAd,sBACA,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,wBAAIA,UAAU,eAAd,gBACA,kBAACwB,EAAD,CAAcC,KAAM0B,EAAOpD,GAAU,KAAK2D,OAE5C,yBAAK1D,UAAU,YACb,wBAAIA,UAAU,eAAd,gBACA,kBAACwB,EAAD,CAAcC,KAAM8B,EAAOxD,GAAU,KAAK2D,WA3B7C,kBAAC,IAAD,QE7BL,OAEF,kBAAC,IAAD,CAAU/C,KAAK,UAAUM,MAAM,yCAC7B,kBAAC6B,EAAD,KACE,kBAACL,EAAD,CAAqBC,KAAMiB,oBAAkBC,MAAO3C,MAAM,uBAC1D,kBAACwB,EAAD,CAAqBC,KAAMiB,oBAAkBE,MAAO5C,MAAM,yBAG9D,kBAAC,IAAD,CAAUN,KAAK,UAAUM,MAAM,+CAC7B,kBAAC6B,EAAD,KACE,kBAACL,EAAD,CAAqBC,KAAMiB,oBAAkBG,OAAQ7C,MAAM,uBAC3D,kBAACwB,EAAD,CACEC,KAAMiB,oBAAkBI,YACxB9C,MAAM,2BACNgB,UAAW+B,IAAeC,uBAIhC,kBAAC,IAAD,CAAUtD,KAAK,UAAUM,MAAM,+CAC7B,kBAAC6B,EAAD,KACE,kBAACL,EAAD,CAAqBC,KAAMiB,oBAAkBO,QAASjD,MAAM,2BAAOgB,UAAWkC,MAC9E,kBAAC1B,EAAD,CACEC,KAAMiB,oBAAkBS,SACxBnD,MAAM,qBACNgB,UAAWoC,IACXlC,cAAc,OAOT,SAASmC,IACtB,OACE,kBAAC,IAAD,KACGpB,EACD,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOH,UAAU,iBACf,wBAAI/C,UAAU,QAAd,gBADF,sHAIA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD","file":"static/js/7.c696c72a.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\n\nexport interface Model {\n  selectedMode: string;\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedMode: \"\" };\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\n\nexport default function ModelModeSelector() {\n  const [model, updateModel] = useModel();\n  const setModeId = useCallback(modeId => updateModel({ selectedMode: modeId }), [updateModel]);\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector mode={model.selectedMode} onChange={setModeId} />\n      </div>\n    </div>\n  );\n}\n","export { ModelModeProvider, useModel } from \"./model\";\nexport { default as ModelModeSelector } from \"./modelModeSelector\";\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\n\ntype RouteDefProps = { path: string; title: string; children: React.ReactChild | React.ReactChildren };\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons() {\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { path: \"\" };\n  return (\n    <nav className=\"nav nav-pills mb-3\">\n      {routes.map(route => (\n        <NavLink key={route.path} to={`${match.path}/${route.path}`} className=\"nav-link\" activeClassName=\"active\">\n          {route.title}\n        </NavLink>\n      ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultPath,\n  children\n}: {\n  defaultPath?: string;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { path: \"\" };\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route key={route.path} path={`${match.path}/${route.path}`}>\n          <Helmet>\n            <title>{route.title}</title>\n          </Helmet>\n          {route.children}\n        </Route>\n      ))}\n      <Route>\n        <Redirect to={`${match.path}/${defaultPath || routes[0].path}`} />\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return <Context.Provider value={children[0].props.children.map(x => x.props)}>{children.slice(1)}</Context.Provider>;\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DeltaRankingItem, RankingTimeSpan } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getDeltaRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useModel } from \"../modeModel\";\n\nfunction RankingTable({ rows = [] as DeltaRankingItem[] }) {\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map(x => (\n          <tr key={x.id}>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.delta}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function DeltaRanking() {\n  const data1w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.OneWeek),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.OneWeek)\"\n  );\n  const data4w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.FourWeeks),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.FourWeeks)\"\n  );\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  if (!data1w || !data4w) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">苦主榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].bottom} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].bottom} />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">汪汪榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].top} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].top} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CareerRankingItem, CareerRankingType } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getCareerRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { formatPercent } from \"../../utils/index\";\nimport { Alert } from \"../misc/alert\";\nimport { useModel } from \"../modeModel\";\n\nfunction RankingTable({\n  rows = [] as CareerRankingItem[],\n  formatter = formatPercent as (x: number) => string,\n  showNumGames = true,\n  valueLabel = \"\"\n}) {\n  if (!rows || !rows.length) {\n    return <Loading />;\n  }\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th className=\"text-right\">排名</th>\n          <th>玩家</th>\n          {showNumGames && <th className=\"text-right\">对局数</th>}\n          <th className=\"text-right\">{valueLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((x, index) => (\n          <tr key={x.id}>\n            <td className=\"text-right\">{index + 1}</td>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            {showNumGames && <td className=\"text-right\">{x.count}</td>}\n            <td className=\"text-right\">{formatter(x.rank_key)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport function CareerRankingColumn({\n  type,\n  title,\n  formatter = formatPercent,\n  showNumGames = true,\n  valueLabel = \"\"\n}: {\n  type: CareerRankingType;\n  title: string;\n  formatter?: (x: number) => string;\n  showNumGames?: boolean;\n  valueLabel?: string;\n}) {\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  const data = useAsyncFactory(() => getCareerRanking(type, modeId), [type, modeId], \"getCareerRanking\");\n  return (\n    <div className=\"col-lg\">\n      <h3 className=\"text-center mb-2\">{title}</h3>\n      <RankingTable rows={data} formatter={formatter} valueLabel={valueLabel || title} showNumGames={showNumGames} />;\n    </div>\n  );\n}\nexport function CareerRanking({\n  children\n}: {\n  children: React.ReactElement<ReturnType<typeof CareerRankingColumn>>[];\n}) {\n  return (\n    <>\n      <Alert stateName=\"careerRankingNotice\">\n        <h4 className=\"mb-2\">提示</h4>\n        本榜只包含有至少 300 场对局记录的玩家\n      </Alert>\n      <div className=\"row\">\n        {children.map((x, i) => (\n          <React.Fragment key={i}>{x}</React.Fragment>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { Alert } from \"../misc/alert\";\nimport DeltaRanking from \"./deltaRanking\";\nimport { CareerRanking, CareerRankingColumn } from \"./careerRanking\";\nimport { ModelModeProvider, ModelModeSelector } from \"../modeModel\";\nimport { CareerRankingType } from \"../../data/types\";\nimport { PlayerMetadata } from \"../../data/types/metadata\";\nimport { formatFixed3, formatIdentity } from \"../../utils/index\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    <RouteDef path=\"delta\" title=\"苦主及汪汪\">\n      <DeltaRanking />\n    </RouteDef>\n    <RouteDef path=\"career1\" title=\"一位率/四位率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank1} title=\"一位率\" />\n        <CareerRankingColumn type={CareerRankingType.Rank4} title=\"四位率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career2\" title=\"连对率/安定段位\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank12} title=\"连对率\" />\n        <CareerRankingColumn\n          type={CareerRankingType.StableLevel}\n          title=\"安定段位\"\n          formatter={PlayerMetadata.formatStableLevel2}\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career3\" title=\"平均顺位/对局数\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.AvgRank} title=\"平均顺位\" formatter={formatFixed3} />\n        <CareerRankingColumn\n          type={CareerRankingType.NumGames}\n          title=\"对局数\"\n          formatter={formatIdentity}\n          showNumGames={false}\n        />\n      </CareerRanking>\n    </RouteDef>\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <Alert stateName=\"rankingNotice\">\n          <h4 className=\"mb-2\">提示</h4>\n          排行榜非实时更新，可能会有数小时的延迟\n        </Alert>\n        <NavButtons />\n        <ModelModeSelector />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}