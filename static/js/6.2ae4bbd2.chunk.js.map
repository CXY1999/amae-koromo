{"version":3,"sources":["components/modeModel/model.tsx","components/routing/index.tsx","components/modeModel/modelModeSelector.tsx","components/modeModel/index.tsx","components/ranking/deltaRanking.tsx","components/ranking/careerRanking.tsx","components/ranking/index.tsx"],"names":["DEFAULT_MODEL","selectedMode","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RouteDef","Error","ViewRoutes","Context","NavButtons","className","replace","keepState","routes","urlBase","useRouteMatch","url","map","route","key","path","to","loc","pathname","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","match","useLocation","push","SimpleRoutedSubViews","props","x","slice","ModelModeSelector","setModeId","useCallback","modeId","mode","onChange","RankingTable","rows","id","generatePlayerPathById","LevelWithDelta","getTag","level","nickname","delta","formatter","formatPercent","showNumGames","valueLabel","length","index","count","rank_key","CareerRankingColumn","type","data","useAsyncFactory","getCareerRanking","CareerRanking","stateName","i","Fragment","ROUTES","data1w","getDeltaRanking","RankingTimeSpan","OneWeek","data4w","FourWeeks","bottom","top","CareerRankingType","Rank1","Rank4","Rank12","StableLevel","PlayerMetadata","formatStableLevel2","AvgRank","formatFixed3","NumGames","formatIdentity","Routes"],"mappings":"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","file":"static/js/6.2ae4bbd2.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\n\nexport interface Model {\n  selectedMode: string;\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedMode: \"\" };\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\n\ntype RouteDefProps = { path: string; exact?: boolean; title: string; children: React.ReactChild | React.ReactChildren };\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes.map(route => (\n        <NavLink\n          key={route.path}\n          to={loc => ({\n            pathname: `${urlBase}/${route.path}`,\n            state: keepState ? loc.state : undefined\n          })}\n          replace={replace}\n          exact={!!route.exact}\n          className=\"nav-link\"\n          activeClassName=\"active\"\n        >\n          {route.title}\n        </NavLink>\n      ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n          {mutateTitle && (\n            <Helmet>\n              <title>{route.title}</title>\n            </Helmet>\n          )}\n          {route.children}\n        </Route>\n      ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return <Context.Provider value={children[0].props.children.map(x => x.props)}>{children.slice(1)}</Context.Provider>;\n}\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\n\nexport default function ModelModeSelector() {\n  const [model, updateModel] = useModel();\n  const setModeId = useCallback(modeId => updateModel({ selectedMode: modeId }), [updateModel]);\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector mode={model.selectedMode} onChange={setModeId} />\n      </div>\n    </div>\n  );\n}\n","export { ModelModeProvider, useModel } from \"./model\";\nexport { default as ModelModeSelector } from \"./modelModeSelector\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DeltaRankingItem, RankingTimeSpan } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getDeltaRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useModel } from \"../modeModel\";\n\nfunction RankingTable({ rows = [] as DeltaRankingItem[] }) {\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map(x => (\n          <tr key={x.id}>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.delta}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function DeltaRanking() {\n  const data1w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.OneWeek),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.OneWeek)\"\n  );\n  const data4w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.FourWeeks),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.FourWeeks)\"\n  );\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  if (!data1w || !data4w) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">苦主榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].bottom} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].bottom} />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">汪汪榜</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">一周</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].top} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">四周</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].top} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CareerRankingItem, CareerRankingType } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getCareerRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { formatPercent } from \"../../utils/index\";\nimport { Alert } from \"../misc/alert\";\nimport { useModel } from \"../modeModel\";\n\nfunction RankingTable({\n  rows = [] as CareerRankingItem[],\n  formatter = formatPercent as (x: number) => string,\n  showNumGames = true,\n  valueLabel = \"\"\n}) {\n  if (!rows || !rows.length) {\n    return <Loading />;\n  }\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th className=\"text-right\">排名</th>\n          <th>玩家</th>\n          {showNumGames && <th className=\"text-right\">对局数</th>}\n          <th className=\"text-right\">{valueLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((x, index) => (\n          <tr key={x.id}>\n            <td className=\"text-right\">{index + 1}</td>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            {showNumGames && <td className=\"text-right\">{x.count}</td>}\n            <td className=\"text-right\">{formatter(x.rank_key)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport function CareerRankingColumn({\n  type,\n  title,\n  formatter = formatPercent,\n  showNumGames = true,\n  valueLabel = \"\"\n}: {\n  type: CareerRankingType;\n  title: string;\n  formatter?: (x: number) => string;\n  showNumGames?: boolean;\n  valueLabel?: string;\n}) {\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  const data = useAsyncFactory(() => getCareerRanking(type, modeId), [type, modeId], \"getCareerRanking\");\n  return (\n    <div className=\"col-lg\">\n      <h3 className=\"text-center mb-2\">{title}</h3>\n      <RankingTable rows={data} formatter={formatter} valueLabel={valueLabel || title} showNumGames={showNumGames} />;\n    </div>\n  );\n}\nexport function CareerRanking({\n  children\n}: {\n  children: React.ReactElement<ReturnType<typeof CareerRankingColumn>>[];\n}) {\n  return (\n    <>\n      <Alert stateName=\"careerRankingNotice\">\n        <h4 className=\"mb-2\">提示</h4>\n        本榜只包含有至少 300 场对局记录的玩家\n      </Alert>\n      <div className=\"row\">\n        {children.map((x, i) => (\n          <React.Fragment key={i}>{x}</React.Fragment>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { Alert } from \"../misc/alert\";\nimport DeltaRanking from \"./deltaRanking\";\nimport { CareerRanking, CareerRankingColumn } from \"./careerRanking\";\nimport { ModelModeProvider, ModelModeSelector } from \"../modeModel\";\nimport { CareerRankingType } from \"../../data/types\";\nimport { PlayerMetadata } from \"../../data/types/metadata\";\nimport { formatFixed3, formatIdentity } from \"../../utils/index\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    <RouteDef path=\"delta\" title=\"苦主及汪汪\">\n      <DeltaRanking />\n    </RouteDef>\n    <RouteDef path=\"career1\" title=\"一位率/四位率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank1} title=\"一位率\" />\n        <CareerRankingColumn type={CareerRankingType.Rank4} title=\"四位率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career2\" title=\"连对率/安定段位\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank12} title=\"连对率\" />\n        <CareerRankingColumn\n          type={CareerRankingType.StableLevel}\n          title=\"安定段位\"\n          formatter={PlayerMetadata.formatStableLevel2}\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career3\" title=\"平均顺位/对局数\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.AvgRank} title=\"平均顺位\" formatter={formatFixed3} />\n        <CareerRankingColumn\n          type={CareerRankingType.NumGames}\n          title=\"对局数\"\n          formatter={formatIdentity}\n          showNumGames={false}\n        />\n      </CareerRanking>\n    </RouteDef>\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <Alert stateName=\"rankingNotice\">\n          <h4 className=\"mb-2\">提示</h4>\n          排行榜非实时更新，可能会有数小时的延迟\n        </Alert>\n        <NavButtons />\n        <ModelModeSelector />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}