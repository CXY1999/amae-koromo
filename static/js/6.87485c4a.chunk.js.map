{"version":3,"sources":["components/modeModel/model.tsx","components/routing/index.tsx","components/modeModel/modelModeSelector.tsx","components/modeModel/index.tsx","components/contestTools/minMax.tsx","components/contestTools/index.tsx"],"names":["DEFAULT_MODEL","selectedMode","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RouteDef","Error","ViewRoutes","Context","NavButtons","className","replace","keepState","t","useTranslation","routes","urlBase","useRouteMatch","url","filter","x","disabled","map","route","key","path","to","loc","pathname","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","match","useLocation","push","SimpleRoutedSubViews","props","slice","ModelModeSelector","setModeId","useCallback","modeId","Conf","availableModes","length","mode","onChange","Result","game","GameRecord","formatFullStartTime","players","accountId","toString","player","isActive","ROUTES","useState","dayjs","dateStart","setDateStart","dateEnd","setDateEnd","loading","setLoading","minGame","setMinGame","maxGame","setMaxGame","search","a","async","cur","startOf","end","endOf","minScore","Infinity","maxScore","isBefore","loader","ListingDataLoader","getMetadata","metadata","i","count","getRecords","records","rec","curMax","curMin","score","add","min","dateMin","date","type","onClick","Routes"],"mappings":"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","file":"static/js/6.87485c4a.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\n\nexport interface Model {\n  selectedMode: string;\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedMode: \"\" };\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = {\n  path: string;\n  exact?: boolean;\n  title: string;\n  disabled?: boolean;\n  children: React.ReactChild | React.ReactChildren;\n};\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <NavLink\n            key={route.path}\n            to={(loc) => ({\n              pathname: `${urlBase}/${route.path}`,\n              state: keepState ? loc.state : undefined,\n            })}\n            replace={replace}\n            exact={!!route.exact}\n            className=\"nav-link\"\n            activeClassName=\"active\"\n          >\n            {t(route.title)}\n          </NavLink>\n        ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children,\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes\n        .filter((x) => !x.disabled)\n        .map((route) => (\n          <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n            {mutateTitle && (\n              <Helmet>\n                <title>{t(route.title)}</title>\n              </Helmet>\n            )}\n            {route.children}\n          </Route>\n        ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children,\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return (\n    <Context.Provider value={children[0].props.children.map((x) => x.props)}>{children.slice(1)}</Context.Provider>\n  );\n}\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\n\nexport default function ModelModeSelector() {\n  const [model, updateModel] = useModel();\n  const setModeId = useCallback(modeId => updateModel({ selectedMode: modeId }), [updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector mode={model.selectedMode} onChange={setModeId} />\n      </div>\n    </div>\n  );\n}\n","export { ModelModeProvider, useModel } from \"./model\";\nexport { default as ModelModeSelector } from \"./modelModeSelector\";\n","import React, { useState, useCallback } from \"react\";\nimport { FormRow, DatePicker } from \"../form\";\nimport Conf from \"../../utils/conf\";\nimport Loading from \"../misc/loading\";\nimport dayjs from \"dayjs\";\nimport { ListingDataLoader } from \"../../data/source/records/loader\";\nimport { GameRecord } from \"../../data/types\";\nimport { Player } from \"../gameRecords/player\";\n\nfunction Result({ game, title }: { game: GameRecord; title: string }) {\n  return (\n    <div>\n      <h5 className=\"mb-3\">\n        {title}：{GameRecord.formatFullStartTime(game)}\n      </h5>\n      {game.players.map((x) => (\n        <p key={x.accountId.toString()}>\n          <Player player={x} game={game} isActive={false} />\n        </p>\n      ))}\n    </div>\n  );\n}\n\nexport default function MinMax() {\n  const [dateStart, setDateStart] = useState(() => dayjs());\n  const [dateEnd, setDateEnd] = useState(() => dayjs());\n  const [loading, setLoading] = useState(false);\n  const [minGame, setMinGame] = useState(null as GameRecord | null);\n  const [maxGame, setMaxGame] = useState(null as GameRecord | null);\n  const search = useCallback(async () => {\n    setLoading(true);\n    let cur = dateStart.startOf(\"day\");\n    const end = dateEnd.endOf(\"day\");\n\n    let minScore = +Infinity;\n    let maxScore = -Infinity;\n    let minGame: GameRecord | null = null;\n    let maxGame: GameRecord | null = null;\n    while (cur.isBefore(end)) {\n      const loader = new ListingDataLoader(cur);\n      const metadata = await loader.getMetadata();\n      for (let i = 0; i < metadata.count; i += 100) {\n        const records = await loader.getRecords(i, 100);\n        for (const rec of records) {\n          let curMax = -Infinity;\n          let curMin = +Infinity;\n          for (const player of rec.players) {\n            if (player.score > curMax) {\n              curMax = player.score;\n            }\n            if (player.score < curMin) {\n              curMin = player.score;\n            }\n          }\n          if (curMax > maxScore) {\n            maxScore = curMax;\n            maxGame = rec;\n          }\n          if (curMin < minScore) {\n            minScore = curMin;\n            minGame = rec;\n          }\n        }\n      }\n      cur = cur.add(1, \"day\");\n    }\n    setMinGame(minGame);\n    setMaxGame(maxGame);\n    setLoading(false);\n  }, [setLoading, dateStart, dateEnd, setMaxGame, setMinGame]);\n  return (\n    <>\n      <FormRow title=\"开始日期\">\n        <DatePicker min={Conf.dateMin} date={dateStart} onChange={setDateStart} className=\"form-control\" />\n      </FormRow>\n      <FormRow title=\"结束日期\">\n        <DatePicker min={Conf.dateMin} date={dateEnd} onChange={setDateEnd} className=\"form-control\" />\n      </FormRow>\n      {loading ? (\n        <Loading />\n      ) : (\n        <>\n          <button type=\"button\" className=\"btn btn-primary mt-3\" onClick={search}>\n            查询\n          </button>\n          <div className=\"row mt-5\">\n            <div className=\"col\">{minGame && <Result game={minGame} title=\"最低点\" />}</div>\n            <div className=\"col\">{maxGame && <Result game={maxGame} title=\"最高点\" />}</div>\n          </div>\n        </>\n      )}\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { ModelModeProvider } from \"../modeModel\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\nimport MinMax from \"./minMax\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    {[\n      <RouteDef key=\"\" path=\"min-max\" title=\"最低/最高点对局\">\n        <MinMax />\n      </RouteDef>,\n    ]}\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <NavButtons />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}