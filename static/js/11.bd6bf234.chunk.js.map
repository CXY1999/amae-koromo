{"version":3,"sources":["components/playerDetails/charts/recentRank.tsx"],"names":["createDot","props","active","scale","isMobile","r","stroke","Conf","rankColors","payload","rank","onClick","window","open","GameRecord","getRecordLink","game","playerId","fill","createActiveDot","RankChartTooltip","length","realPayload","className","formatFullStartTime","modeId","modeLabel","getRankLabelByIndex","delta","players","map","x","key","accountId","toString","player","isActive","RecentRankChart","dataAdapter","aspect","numGames","dataPoints","useMemo","result","totalGames","getCount","i","Math","min","getItem","getRankIndexByPlayer","unshift","pos","cumulativeDelta","point","playerRecord","filter","calculateDeltaPoint","score","Level","level","haveDelta","some","width","height","data","margin","top","right","bottom","left","type","domain","yAxisId","hide","isAnimationActive","dataKey","strokeWidth","dot","activeDot","strokeDasharray","cursor","content"],"mappings":"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","file":"static/js/11.bd6bf234.chunk.js","sourcesContent":["import React from \"react\";\nimport { ResponsiveContainer, LineChart, Line, Dot, Tooltip, YAxis, TooltipProps } from \"recharts\";\n\nimport { IDataAdapter } from \"../../gameRecords/dataAdapterProvider\";\nimport { GameRecord, Level, modeLabel, getRankLabelByIndex } from \"../../../data/types\";\nimport { useMemo } from \"react\";\nimport { Player } from \"../../gameRecords/player\";\nimport Loading from \"../../misc/loading\";\nimport { calculateDeltaPoint } from \"../../../data/types/metadata\";\nimport { isMobile } from \"../../../utils/index\";\nimport Conf from \"../../../utils/conf\";\n\ndeclare module \"recharts\" {\n  interface DotProps {\n    strokeWidth?: number;\n    stroke?: string;\n    fill?: string;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    payload?: any;\n  }\n  interface LabelListProps {\n    fill?: string;\n  }\n}\n\ntype DotPayload = {\n  pos: number;\n  rank: number;\n  delta: number;\n  cumulativeDelta: number;\n  game: GameRecord;\n  playerId: number;\n};\n\nconst createDot = (props: { payload: DotPayload }, active?: boolean) => {\n  const scale = isMobile() ? 1.5 : 2;\n  return (\n    <Dot\n      {...props}\n      r={2.5 * scale}\n      stroke={Conf.rankColors[props.payload.rank]}\n      onClick={() => window.open(GameRecord.getRecordLink(props.payload.game, props.payload.playerId), \"_blank\")}\n      {...(active ? { fill: Conf.rankColors[props.payload.rank], r: 5 * scale } : {})}\n    />\n  );\n};\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst createActiveDot = (props: any) => createDot(props, true);\n\nconst RankChartTooltip = ({ active, payload }: TooltipProps = {}) => {\n  if (!active || !payload || !payload.length) {\n    return null;\n  }\n  const realPayload = payload[0].payload as DotPayload;\n  return (\n    <div className=\"player-chart-tooltip\">\n      <h5>\n        {GameRecord.formatFullStartTime(realPayload.game)}{\" \"}\n        {realPayload.game.modeId ? modeLabel(realPayload.game.modeId) : \"\"} {getRankLabelByIndex(realPayload.rank)}{\" \"}\n        {realPayload.delta > 0 ? \"+\" : \"\"}\n        {realPayload.delta}pt\n      </h5>\n      {realPayload.game.players.map((x) => (\n        <p key={x.accountId.toString()}>\n          <Player player={x} game={realPayload.game} isActive={realPayload.playerId === x.accountId} />\n        </p>\n      ))}\n    </div>\n  );\n};\n\nexport default function RecentRankChart({\n  dataAdapter,\n  playerId,\n  aspect = 2,\n  numGames = isMobile() ? 20 : 30,\n}: {\n  dataAdapter: IDataAdapter;\n  playerId: number;\n  aspect?: number;\n  numGames?: number;\n}) {\n  const dataPoints = useMemo(() => {\n    const result = [] as DotPayload[];\n    const totalGames = dataAdapter.getCount();\n    if (!totalGames) {\n      return result;\n    }\n    for (let i = 0; i < Math.min(totalGames, numGames); i++) {\n      const game = dataAdapter.getItem(i);\n      if (!game || !(\"uuid\" in game)) {\n        break;\n      }\n      const rank = GameRecord.getRankIndexByPlayer(game, playerId);\n      result.unshift({\n        pos: 3 - rank,\n        rank,\n        delta: 0,\n        cumulativeDelta: 0,\n        game,\n        playerId,\n      });\n    }\n    let delta = 0;\n    for (const point of result) {\n      const game = point.game;\n      if (!game.modeId) {\n        continue;\n      }\n      const playerRecord = game.players.filter((x) => x.accountId.toString() === playerId.toString())[0];\n      point.delta = calculateDeltaPoint(playerRecord.score, point.rank, game.modeId, new Level(playerRecord.level));\n      delta += point.delta;\n      point.cumulativeDelta = delta;\n    }\n    return result;\n  }, [dataAdapter, numGames, playerId]);\n  if (!dataPoints.length) {\n    return <Loading />;\n  }\n  const haveDelta = dataPoints.some((x) => x.delta !== 0);\n  return (\n    <ResponsiveContainer width=\"100%\" aspect={aspect} height=\"auto\">\n      <LineChart data={dataPoints} margin={{ top: 15, right: 15, bottom: 15, left: 15 }}>\n        <YAxis type=\"number\" domain={[\"dataMin\", \"dataMax\"]} yAxisId={0} hide={true} />\n        <YAxis type=\"number\" domain={[\"dataMin\", \"dataMax\"]} yAxisId={1} hide={true} />\n        {haveDelta && (\n          <Line\n            isAnimationActive={false}\n            dataKey=\"cumulativeDelta\"\n            type=\"linear\"\n            stroke=\"#969696\"\n            strokeWidth={1.5}\n            yAxisId={1}\n            dot={false}\n            activeDot={false}\n            strokeDasharray=\"5 5\"\n          />\n        )}\n        <Line\n          isAnimationActive={false}\n          dataKey=\"pos\"\n          type=\"linear\"\n          stroke=\"#b5c2ce\"\n          strokeWidth={3}\n          dot={createDot}\n          activeDot={createActiveDot}\n        />\n        <Tooltip cursor={false} content={<RankChartTooltip />} />\n      </LineChart>\n    </ResponsiveContainer>\n  );\n}\n"],"sourceRoot":""}