{"version":3,"sources":["components/routing/index.tsx","components/playerDetails/playerDetailsSettings.tsx","components/playerDetails/statItem.tsx","components/playerDetails/estimatedStableLevel.tsx","components/playerDetails/sameMatchRate.tsx","components/playerDetails/playerDetails.tsx"],"names":["RouteDef","Error","ViewRoutes","Context","React","createContext","NavButtons","className","replace","keepState","routes","useContext","match","useRouteMatch","url","map","route","key","path","to","loc","pathname","state","undefined","activeClassName","title","ViewSwitch","defaultPath","mutateTitle","children","useLocation","SimpleRoutedSubViews","Provider","value","props","x","slice","DateRangeOptions","DATE_RANGE_ITEMS","Object","keys","label","PlayerDetailsSettings","showLevel","useModel","model","updateModel","useState","type","All","startDate","endDate","dayjs","isSame","subtract","Custom","Last4Weeks","mode","setMode","DATE_MIN","customDateFrom","setCustomDateFrom","customDateTo","setCustomDateTo","useEffect","playerId","selectedMode","setSelectedMode","useCallback","inline","selectedItemKey","items","groupKey","onChange","min","date","StatItem","description","data-tip","EstimatedStableLevel","metadata","level","LevelWithDelta","getAdjustedLevel","parseInt","getTag","GameMode","王座","玉","notEnoughData","count","expectedGamePoint","PlayerMetadata","calculateExpectedGamePoint","estimatedNumGamesToChangeLevel","getMaxPoint","isAllowedMode","curPoint","Level","id","score","delta","getStartingPoint","changeLevelMsg","getStableLevelComponents","toFixed","join","estimateStableLevel2","Math","abs","SameMatchRateTable","numGames","numDisplay","currentAccountId","adapter","useDataAdapter","getCount","numProcessedGames","rates","useMemo","i","game","getItem","players","player","accountId","result","values","sort","a","b","Fragment","generatePlayerPathById","nickname","formatPercent","SameMatchRate","RankRateChart","Loadable","loader","loading","RecentRankChart","WinLoseDistribution","ReactTooltipPromise","ReactTooltip","ExtendedStatsViewAsync","view","stats","useAsync","extended_stats","triggerRelayout","View","PlayerExtendedStatsView","和牌率","放铳率","自摸率","默听率","流局率","流听率","副露率","立直率","和了巡数","平均打点","平均铳点","MoreStats","max_level","formatAdjustedScore","levelObj","fixMaxLevel","最大连庄","一发率","里宝率","被炸率","平均被炸点数","放铳时立直率","放铳时副露率","立直后放铳率","副露后放铳率","立直后和牌率","副露后和牌率","立直后流局率","副露后流局率","BasicStats","avg_rank","negative_rate","LuckStats","役满","累计役满","最大累计番数","流满","W立直","formatFixed3","平均起手向听","LargestLost","最近大铳","target","rel","href","GameRecord","getRecordLink","FanStatEntryList","formatFanSummary","fans","formatFullStartTime","start_time","FanStatEntry2","formatFan","PlayerStats","then","rebuild","PlayerDetails","dataAdapter","getMetadata","Helmet","aspect","effect","multiline","place"],"mappings":"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","file":"static/js/8.88558452.chunk.js","sourcesContent":["import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\n\ntype RouteDefProps = { path: string; title: string; children: React.ReactChild | React.ReactChildren };\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes.map(route => (\n        <NavLink\n          key={route.path}\n          to={loc => ({ pathname: `${match.url}/${route.path}`, state: keepState ? loc.state : undefined })}\n          replace={replace}\n          className=\"nav-link\"\n          activeClassName=\"active\"\n        >\n          {route.title}\n        </NavLink>\n      ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultPath,\n  mutateTitle = true,\n  children\n}: {\n  defaultPath?: string;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route key={route.path} path={`${match.url}/${route.path}`}>\n          {mutateTitle && (\n            <Helmet>\n              <title>{route.title}</title>\n            </Helmet>\n          )}\n          {route.children}\n        </Route>\n      ))}\n      <Route>\n        <Redirect to={{ ...loc, pathname: `${match.url}/${defaultPath || routes[0].path}` }} />\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return <Context.Provider value={children[0].props.children.map(x => x.props)}>{children.slice(1)}</Context.Provider>;\n}\n","import React from \"react\";\nimport { useEffect, useState, useCallback } from \"react\";\nimport { DATE_MIN } from \"../../utils/constants\";\nimport { FormRow } from \"../form/formRow\";\nimport { useModel } from \"../gameRecords/model\";\nimport { CheckboxGroup, DatePicker } from \"../form\";\nimport dayjs from \"dayjs\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\n\nenum DateRangeOptions {\n  All = \"全部\",\n  Last4Weeks = \"最近四周\",\n  Custom = \"自定义\"\n}\nconst DATE_RANGE_ITEMS = Object.keys(DateRangeOptions).map((key: string) => ({\n  key: DateRangeOptions[key as keyof typeof DateRangeOptions],\n  label: DateRangeOptions[key as keyof typeof DateRangeOptions]\n}));\n\nexport default function PlayerDetailsSettings({ showLevel = false }) {\n  const [model, updateModel] = useModel();\n  const [mode, setMode] = useState(() => {\n    if (model.type !== \"player\") {\n      return DateRangeOptions.All;\n    }\n    if (!model.startDate) {\n      return DateRangeOptions.All;\n    }\n    if (\n      (!model.endDate || dayjs(model.endDate).isSame(dayjs(), \"day\")) &&\n      dayjs(model.startDate).isSame(dayjs().subtract(27, \"day\"), \"day\")\n    ) {\n      return DateRangeOptions.Last4Weeks;\n    }\n    return DateRangeOptions.Custom;\n  });\n  const [customDateFrom, setCustomDateFrom] = useState(() =>\n    model.type === \"player\" && model.startDate ? model.startDate : DATE_MIN\n  );\n  const [customDateTo, setCustomDateTo] = useState(() =>\n    model.type === \"player\" && model.endDate ? model.endDate : dayjs()\n  );\n  useEffect(() => {\n    if (model.type !== \"player\") {\n      return;\n    }\n    switch (mode) {\n      case DateRangeOptions.All:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: null,\n          endDate: null,\n          selectedMode: undefined\n        });\n        break;\n      case DateRangeOptions.Last4Weeks:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: dayjs().subtract(27, \"day\"),\n          endDate: null\n        });\n        break;\n      case DateRangeOptions.Custom:\n        updateModel({\n          type: \"player\",\n          playerId: model.playerId,\n          startDate: customDateFrom,\n          endDate: customDateTo\n        });\n        break;\n    }\n  }, [model, mode, customDateFrom, customDateTo, updateModel]);\n  const setSelectedMode = useCallback(mode => updateModel({ type: \"player\", selectedMode: mode }), [updateModel]);\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-6\">\n          <FormRow title=\"时间\" inline={true}>\n            <CheckboxGroup\n              type=\"radio\"\n              selectedItemKey={mode}\n              items={DATE_RANGE_ITEMS}\n              groupKey=\"PlayerDetailsDateRangeSelector\"\n              onChange={setMode as (x: string) => void}\n            />\n          </FormRow>\n        </div>\n        {showLevel && (\n          <div className=\"col-6\">\n            <FormRow title=\"等级\" inline={true}>\n              <ModeSelector mode={model.selectedMode} onChange={setSelectedMode} />\n            </FormRow>\n          </div>\n        )}\n      </div>\n      {mode === DateRangeOptions.Custom ? (\n        <div className=\"row mt-n3\">\n          <div className=\"col-6\">\n            <FormRow inline={true}>\n              <DatePicker min={DATE_MIN} onChange={setCustomDateFrom} date={customDateFrom} className=\"form-control\" />\n              <DatePicker min={DATE_MIN} onChange={setCustomDateTo} date={customDateTo} className=\"form-control\" />\n            </FormRow>\n          </div>\n        </div>\n      ) : null}\n    </>\n  );\n}\n","import React from \"react\";\n\nexport default function StatItem({ label, description, className = \"\", children }: {\n  label: string;\n  description?: string;\n  className?: string;\n  children: React.ReactChild;\n}) {\n  return (<>\n    <dt className={`col-2 col-lg-1 text-nowrap ${className}`}>{label}</dt>\n    <dd className={`col-4 col-lg-3 text-right ${className}`} data-tip={description || \"\"}>\n      {children}\n    </dd>\n  </>);\n}\n","import React from \"react\";\nimport { LevelWithDelta, PlayerMetadata, GameMode, Level } from \"../../data/types\";\nimport { useModel } from \"../gameRecords/model\";\nimport StatItem from \"./statItem\";\n\nexport default function EstimatedStableLevel({ metadata }: { metadata: PlayerMetadata }) {\n  const [model] = useModel();\n  const level = LevelWithDelta.getAdjustedLevel(metadata.level);\n  const mode = model.selectedMode\n    ? (parseInt(model.selectedMode) as GameMode)\n    : LevelWithDelta.getTag(metadata.level) === \"魂\"\n    ? GameMode.王座\n    : GameMode.玉;\n  const notEnoughData = metadata.count < 100;\n  const expectedGamePoint = PlayerMetadata.calculateExpectedGamePoint(metadata, mode);\n  let estimatedNumGamesToChangeLevel = null as number | null;\n  if (level.getMaxPoint() && level.isAllowedMode(mode)) {\n    const curPoint = level.isSame(new Level(metadata.level.id))\n      ? metadata.level.score + metadata.level.delta\n      : level.getStartingPoint();\n    estimatedNumGamesToChangeLevel =\n      expectedGamePoint > 0 ? (level.getMaxPoint() - curPoint) / expectedGamePoint : curPoint / expectedGamePoint;\n  }\n  const changeLevelMsg = estimatedNumGamesToChangeLevel\n    ? `，括号内为预计${estimatedNumGamesToChangeLevel > 0 ? \"升\" : \"降\"}段场数`\n    : \"\";\n  return (\n    <>\n      <StatItem\n        label=\"安定段位\"\n        description={`在${GameMode[mode]}之间一直进行对局，预测最终能达到的段位。${\n          notEnoughData ? \"（数据量不足，计算结果可能有较大偏差）\" : \"\"\n        }<br/>一二三位平均 Pt / 四位平均得点 Pt：[${PlayerMetadata.getStableLevelComponents(metadata, mode)\n          .map(x => x.toFixed(2))\n          .join(\"/\")}]`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {PlayerMetadata.estimateStableLevel2(metadata, mode)}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n      <StatItem\n        label=\"分数期望\"\n        description={`在${GameMode[mode]}之间每局获得点数的数学期望值${changeLevelMsg}${\n          notEnoughData ? \"（数据量不足，计算结果可能有较大偏差）\" : \"\"\n        }`}\n        className={notEnoughData ? \"font-italic font-lighter text-muted\" : \"\"}\n      >\n        <span>\n          {expectedGamePoint.toFixed(1)}\n          {estimatedNumGamesToChangeLevel ? ` (${Math.abs(estimatedNumGamesToChangeLevel).toFixed(0)})` : \"\"}\n          {notEnoughData && \"?\"}\n        </span>\n      </StatItem>\n    </>\n  );\n}\n","import React, { useMemo } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { PlayerRecord } from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { formatPercent } from \"../../utils\";\nimport { SimpleRoutedSubViews, ViewRoutes, RouteDef, NavButtons, ViewSwitch } from \"../routing\";\n\nexport function SameMatchRateTable({ numGames = 100, numDisplay = 10, currentAccountId = 0 }) {\n  const adapter = useDataAdapter();\n  const count = adapter.getCount();\n  const numProcessedGames = Math.min(count, numGames);\n  const rates = useMemo(() => {\n    if (count <= 0) {\n      return null;\n    }\n    const map: { [key: number]: { player: PlayerRecord; count: number } } = {};\n    for (let i = 0; i < numProcessedGames; i++) {\n      const game = adapter.getItem(i);\n      if (!(\"uuid\" in game)) {\n        return null; // Not loaded, try again later\n      }\n      for (const player of game.players) {\n        if (player.accountId === currentAccountId) {\n          continue;\n        }\n        if (!map[player.accountId]) {\n          map[player.accountId] = {\n            player,\n            count: 0\n          };\n        }\n        map[player.accountId].count++;\n      }\n    }\n    const result = Object.values(map);\n    result.sort((a, b) => b.count - a.count);\n    return result;\n  }, [count, adapter, numProcessedGames, currentAccountId]);\n  if (count <= 0) {\n    return null;\n  }\n  if (!rates) {\n    return <Loading />;\n  }\n  return (\n    <dl className=\"row\">\n      {rates.slice(0, numDisplay).map(x => (\n        <React.Fragment key={x.player.accountId}>\n          <dt className=\"col-8 col-lg-4 font-weight-normal\">\n            <Link to={generatePlayerPathById(x.player.accountId)}>{x.player.nickname}</Link>\n          </dt>\n          <dd className=\"col-4 col-lg-2 text-right\">\n            {formatPercent(x.count / numProcessedGames)} ({x.count})\n          </dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  );\n}\n\nexport default function SameMatchRate({ numDisplay = 10, currentAccountId = 0 }) {\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"latest\" title=\"最近 100 局\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} />\n        </RouteDef>\n        <RouteDef path=\"all\" title=\"全部\">\n          <SameMatchRateTable currentAccountId={currentAccountId} numDisplay={numDisplay} numGames={0x7fffffff} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-n3\" />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n","import React from \"react\";\nimport Loadable from \"../misc/customizedLoadable\";\nimport { Helmet } from \"react-helmet\";\n\nimport { useDataAdapter } from \"../gameRecords/dataAdapterProvider\";\nimport { useEffect } from \"react\";\nimport { triggerRelayout, formatPercent, useAsync, formatFixed3 } from \"../../utils/index\";\nimport {\n  LevelWithDelta,\n  PlayerExtendedStats,\n  PlayerMetadata,\n  GameRecord,\n  FanStatEntry2,\n  FanStatEntryList\n} from \"../../data/types\";\nimport Loading from \"../misc/loading\";\nimport PlayerDetailsSettings from \"./playerDetailsSettings\";\nimport StatItem from \"./statItem\";\nimport EstimatedStableLevel from \"./estimatedStableLevel\";\nimport { Level } from \"../../data/types/level\";\nimport { ViewRoutes, RouteDef, SimpleRoutedSubViews, NavButtons, ViewSwitch } from \"../routing\";\nimport { useLocation } from \"react-router-dom\";\nimport SameMatchRate from \"./sameMatchRate\";\n\nconst RankRateChart = Loadable({\n  loader: () => import(\"./charts/rankRate\"),\n  loading: () => <Loading />\n});\nconst RecentRankChart = Loadable({\n  loader: () => import(\"./charts/recentRank\"),\n  loading: () => <Loading />\n});\nconst WinLoseDistribution = Loadable({\n  loader: () => import(\"./charts/winLoseDistribution\"),\n  loading: () => <Loading />\n});\nconst ReactTooltipPromise = import(\"react-tooltip\");\nconst ReactTooltip = Loadable({\n  loader: () => ReactTooltipPromise,\n  loading: () => null\n});\n\nfunction ExtendedStatsViewAsync({\n  metadata,\n  view\n}: {\n  metadata: PlayerMetadata;\n  view: React.ComponentType<{ stats: PlayerExtendedStats; metadata: PlayerMetadata }>;\n}) {\n  const stats = useAsync(metadata.extended_stats);\n  useEffect(triggerRelayout, [!!stats]);\n  if (!stats) {\n    return null;\n  }\n  const View = view;\n  return <View stats={stats} metadata={metadata} />;\n}\n\nfunction PlayerExtendedStatsView({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"和牌率\" description=\"和牌局数 / 总局数\">\n        {formatPercent(stats.和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳率\" description=\"放铳局数 / 总局数\">\n        {formatPercent(stats.放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"自摸率\" description=\"自摸局数 / 和牌局数\">\n        {formatPercent(stats.自摸率 || 0)}\n      </StatItem>\n      <StatItem label=\"默胡率\" description=\"门清默听和牌局数 / 和牌局数\">\n        {formatPercent(stats.默听率 || 0)}\n      </StatItem>\n      <StatItem label=\"流局率\" description=\"流局局数 / 总局数\">\n        {formatPercent(stats.流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"流听率\" description=\"流局听牌局数 / 流局局数\">\n        {formatPercent(stats.流听率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露率\" description=\"副露局数 / 总局数\">\n        {formatPercent(stats.副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直率\" description=\"立直局数 / 总局数\">\n        {formatPercent(stats.立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"和了巡数\">{(stats.和了巡数 || 0).toFixed(3)}</StatItem>\n      <StatItem label=\"平均打点\">{stats.平均打点 || 0}</StatItem>\n      <StatItem label=\"平均铳点\">{stats.平均铳点 || 0}</StatItem>\n    </>\n  );\n}\n\nfunction fixMaxLevel(level: LevelWithDelta): LevelWithDelta {\n  const levelObj = new Level(level.id);\n  if (level.score + level.delta < levelObj.getStartingPoint()) {\n    return {\n      id: level.id,\n      score: levelObj.getStartingPoint(),\n      delta: 0\n    };\n  }\n  return level;\n}\n\nfunction MoreStats({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"最高等级\">{LevelWithDelta.getTag(metadata.max_level)}</StatItem>\n      <StatItem label=\"最高分数\">{LevelWithDelta.formatAdjustedScore(fixMaxLevel(metadata.max_level))}</StatItem>\n      <StatItem label=\"最大连庄\">{stats.最大连庄 || 0}</StatItem>\n      <StatItem label=\"一发率\" description=\"一发局数 / 立直和了局数\">\n        {formatPercent(stats.一发率 || 0)}\n      </StatItem>\n      <StatItem label=\"里宝率\" description=\"中里宝局数 / 立直和了局数\">\n        {formatPercent(stats.里宝率 || 0)}\n      </StatItem>\n      <StatItem label=\"被炸率\" description=\"被炸庄（满贯或以上）次数 / 被自摸次数\">\n        {formatPercent(stats.被炸率 || 0)}\n      </StatItem>\n      <StatItem label=\"平均被炸点数\" description=\"被炸庄（满贯或以上）点数 / 次数\">\n        {stats.平均被炸点数 || 0}\n      </StatItem>\n      <StatItem label=\"放铳时立直率\" description=\"放铳时立直次数 / 放铳次数\">\n        {formatPercent(stats.放铳时立直率 || 0)}\n      </StatItem>\n      <StatItem label=\"放铳时副露率\" description=\"放铳时副露次数 / 放铳次数\">\n        {formatPercent(stats.放铳时副露率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直后放铳率\" description=\"放铳时立直次数 / 立直次数\">\n        {formatPercent(stats.立直后放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后放铳率\" description=\"放铳时副露次数 / 副露次数\">\n        {formatPercent(stats.副露后放铳率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直后和牌率\" description=\"立直后和牌次数 / 立直次数\">\n        {formatPercent(stats.立直后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后和牌率\" description=\"副露后和牌次数 / 副露次数\">\n        {formatPercent(stats.副露后和牌率 || 0)}\n      </StatItem>\n      <StatItem label=\"立直后流局率\" description=\"立直后流局次数 / 立直次数\">\n        {formatPercent(stats.立直后流局率 || 0)}\n      </StatItem>\n      <StatItem label=\"副露后流局率\" description=\"副露后流局次数 / 副露次数\">\n        {formatPercent(stats.副露后流局率 || 0)}\n      </StatItem>\n    </>\n  );\n}\nfunction BasicStats({ metadata }: { metadata: PlayerMetadata }) {\n  return (\n    <>\n      <StatItem label=\"记录场数\">{metadata.count}</StatItem>\n      <StatItem label=\"记录等级\">{LevelWithDelta.getTag(metadata.level)}</StatItem>\n      <StatItem label=\"记录分数\">{LevelWithDelta.formatAdjustedScore(metadata.level)}</StatItem>\n      <ExtendedStatsViewAsync metadata={metadata} view={PlayerExtendedStatsView} />\n      <StatItem label=\"平均顺位\">{metadata.avg_rank.toFixed(3)}</StatItem>\n      <StatItem label=\"被飞率\">{formatPercent(metadata.negative_rate)}</StatItem>\n      <EstimatedStableLevel metadata={metadata} />\n    </>\n  );\n}\nfunction LuckStats({ stats }: { stats: PlayerExtendedStats }) {\n  return (\n    <>\n      <StatItem label=\"役满\" description=\"和出役满次数\">\n        {stats.役满 || 0}\n      </StatItem>\n      <StatItem label=\"累计役满\" description=\"和出累计役满次数\">\n        {stats.累计役满 || 0}\n      </StatItem>\n      <StatItem label=\"最大累计番数\" description=\"和出的最大番数（不含役满役）\">\n        {stats.最大累计番数 || 0}\n      </StatItem>\n      <StatItem label=\"流满\" description=\"流满次数\">\n        {stats.流满 || 0}\n      </StatItem>\n      <StatItem label=\"两立直\" description=\"两立直次数\">\n        {stats.W立直 || 0}\n      </StatItem>\n      <StatItem label=\"平均起手向听\">{formatFixed3(stats.平均起手向听)}</StatItem>\n    </>\n  );\n}\nfunction LargestLost({ stats, metadata }: { stats: PlayerExtendedStats; metadata: PlayerMetadata }) {\n  if (!stats.最近大铳) {\n    return <p className=\"text-center\">无满贯或以上大铳</p>;\n  }\n  return (\n    <div>\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        className=\"d-flex justify-content-between font-weight-bold\"\n        href={GameRecord.getRecordLink(stats.最近大铳.id, metadata.id)}\n      >\n        <span>{FanStatEntryList.formatFanSummary(stats.最近大铳.fans)}</span>\n        <span>{GameRecord.formatFullStartTime(stats.最近大铳.start_time)}</span>\n      </a>\n      <dl className=\"row mt-2\">\n        {stats.最近大铳.fans.map(x => (\n          <StatItem key={x.label} label={x.label}>\n            {FanStatEntry2.formatFan(x)}\n          </StatItem>\n        ))}\n      </dl>\n    </div>\n  );\n}\nfunction PlayerStats({ metadata }: { metadata: PlayerMetadata }) {\n  const loc = useLocation();\n  useEffect(() => {\n    ReactTooltipPromise.then(x => x.rebuild());\n  }, [loc.pathname]);\n  return (\n    <SimpleRoutedSubViews>\n      <ViewRoutes>\n        <RouteDef path=\"basic\" title=\"基本数据\">\n          <dl className=\"row\">\n            <BasicStats metadata={metadata} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"extended\" title=\"更多数据\">\n          <dl className=\"row\">\n            <ExtendedStatsViewAsync metadata={metadata} view={MoreStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"win-lose\" title=\"和铳分布\">\n          <ExtendedStatsViewAsync metadata={metadata} view={WinLoseDistribution} />\n        </RouteDef>\n        <RouteDef path=\"luck\" title=\"血统\">\n          <dl className=\"row\">\n            <ExtendedStatsViewAsync metadata={metadata} view={LuckStats} />\n          </dl>\n        </RouteDef>\n        <RouteDef path=\"largest-lost\" title=\"最近大铳\">\n          <ExtendedStatsViewAsync metadata={metadata} view={LargestLost} />\n        </RouteDef>\n        <RouteDef path=\"same-match\" title=\"最常同桌\">\n          <SameMatchRate currentAccountId={metadata.id} />\n        </RouteDef>\n      </ViewRoutes>\n      <NavButtons className=\"mt-3\" replace keepState />\n      <ViewSwitch mutateTitle={false} />\n    </SimpleRoutedSubViews>\n  );\n}\n\nexport default function PlayerDetails() {\n  const dataAdapter = useDataAdapter();\n  const metadata = dataAdapter.getMetadata<PlayerMetadata>();\n  useEffect(() => {\n    ReactTooltipPromise.then(x => x.rebuild());\n  });\n  useEffect(triggerRelayout, [!!metadata]);\n  if (!metadata || !metadata.nickname) {\n    return <Loading />;\n  }\n  return (\n    <div>\n      <Helmet>\n        <title>{metadata.nickname}</title>\n      </Helmet>\n      <h2 className=\"text-center\">玩家：{metadata.nickname}</h2>\n      <div className=\"row mt-4\">\n        <div className=\"col-md-8\">\n          <h3 className=\"text-center mb-4\">最近走势</h3>\n          <RecentRankChart dataAdapter={dataAdapter} playerId={metadata.id} aspect={6} />\n          <PlayerStats metadata={metadata} />\n        </div>\n        <div className=\"col-md-4\">\n          <h3 className=\"text-center mb-4\">累计战绩</h3>\n          <RankRateChart metadata={metadata} />\n        </div>\n      </div>\n      <PlayerDetailsSettings showLevel={true} />\n      <ReactTooltip effect=\"solid\" multiline={true} place=\"top\" />\n    </div>\n  );\n}\n"],"sourceRoot":""}