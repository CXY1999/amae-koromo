{"version":3,"sources":["components/gameRecords/player.tsx","components/gameRecords/table.tsx"],"names":["__webpack_require__","d","__webpack_exports__","Player","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","react_icons_io__WEBPACK_IMPORTED_MODULE_2__","_utils_dataSource__WEBPACK_IMPORTED_MODULE_3__","_routes__WEBPACK_IMPORTED_MODULE_4__","React","memo","_ref","player","game","isActive","hideDetailLink","nickname","level","score","accountId","isTop","GameRecord","getRankIndexByPlayer","a","createElement","className","concat","href","getRecordLink","title","target","getLevelTag","undefined","to","generatePath","type","playerId","toString","version","Players","activePlayerId","react__WEBPACK_IMPORTED_MODULE_1___default","players","map","x","key","_player__WEBPACK_IMPORTED_MODULE_7__","cellFormatTime","_ref2","cellData","dayjs","unix","format","cellFormatFullTime","_ref3","rowData","loading","formatFullStartTime","cellFormatRank","_ref4","columnData","style","color","getPlayerRankColor","getPlayerRankLabel","slice","cellFormatGameMode","_ref5","GameMode","GameRecordTable","_ref6","arguments","length","_ref6$showStartEnd","showStartEnd","_ref6$showFullTime","showFullTime","data","useDataAdapter","_useModel","useModel","model","Object","_home_travis_build_SAPikachu_amae_koromo_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","scrollerProps","useScrollerProps","isScrolling","onChildScroll","scrollTop","height","registerChild","rowGetter","useCallback","_ref7","index","getItem","getRowClassName","_ref8","clsx","isItemLoaded","even","noRowsRenderer","getUnfilteredCount","_misc_loading__WEBPACK_IMPORTED_MODULE_13__","cellRenderPlayer","_ref9","unfilteredCount","shouldPreload","useEffect","triggerRelayout","Loadable","preloadAll","ref","react_virtualized_dist_es_AutoSizer__WEBPACK_IMPORTED_MODULE_3__","disableHeight","_ref10","width","react_virtualized_dist_es_Table__WEBPACK_IMPORTED_MODULE_2__","autoHeight","rowCount","getCount","rowHeight","window","matchMedia","matches","headerHeight","onScroll","rowClassName","dataKey","label","cellRenderer","flexGrow","headerClassName"],"mappings":"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","file":"static/js/5.8a3de379.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { IoMdBook } from \"react-icons/io\";\r\n\r\nimport { GameRecord, PlayerRecord, getLevelTag } from \"../../utils/dataSource\";\r\nimport { generatePath } from \"./routes\";\r\n\r\nexport const Player = React.memo(function({\r\n  player,\r\n  game,\r\n  isActive,\r\n  hideDetailLink\r\n}: {\r\n  player: PlayerRecord;\r\n  game: GameRecord;\r\n  isActive: boolean;\r\n  hideDetailLink?: boolean;\r\n}) {\r\n  const { nickname, level, score, accountId } = player;\r\n  const isTop = GameRecord.getRankIndexByPlayer(game, player) === 0;\r\n  return (\r\n    <span className={`player ${isTop && \"font-weight-bold\"} ${isActive && \"active-player\"}`}>\r\n      <a href={GameRecord.getRecordLink(game, player)} title=\"查看牌谱\" target=\"_blank\">\r\n        [{getLevelTag(level)}] {nickname} {score !== undefined && `[${score}]`}\r\n      </a>{\" \"}\r\n      {hideDetailLink || isActive ? null : (\r\n        <Link title=\"玩家记录\" to={generatePath({ type: \"player\", playerId: accountId.toString(), version: 0 })}>\r\n          <IoMdBook />\r\n        </Link>\r\n      )}\r\n    </span>\r\n  );\r\n});\r\n","import React from \"react\";\r\nimport { useCallback, useEffect } from \"react\";\r\nimport { TableCellProps, Index } from \"react-virtualized\";\r\nimport { Table, Column } from \"react-virtualized/dist/es/Table\";\r\nimport { AutoSizer } from \"react-virtualized/dist/es/AutoSizer\";\r\nimport dayjs from \"dayjs\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { GameRecord, GameMode } from \"../../utils/dataSource\";\r\nimport { Player } from \"./player\";\r\nimport { useScrollerProps } from \"../misc/scroller\";\r\nimport { useDataAdapter } from \"./dataAdapterProvider\";\r\nimport { triggerRelayout } from \"../../utils/index\";\r\nimport { useModel } from \"./model\";\r\nimport Loadable from \"react-loadable\";\r\nimport Loading from \"../misc/loading\";\r\n\r\nconst formatTime = (x: number) => (x ? dayjs.unix(x).format(\"HH:mm\") : null);\r\n\r\nconst Players = React.memo(({ game, activePlayerId }: { game: GameRecord; activePlayerId?: string }) => (\r\n  <div className=\"row no-gutters\">\r\n    {game.players.map(x => (\r\n      <div key={x.accountId} className=\"col-12 col-md-6 pr-1\">\r\n        <Player game={game} player={x} isActive={x.accountId.toString() === activePlayerId} />\r\n      </div>\r\n    ))}\r\n  </div>\r\n));\r\n\r\nconst cellFormatTime = ({ cellData }: TableCellProps) => formatTime(cellData);\r\nconst cellFormatFullTime = ({ rowData }: TableCellProps) =>\r\n  rowData.loading ? \"\" : GameRecord.formatFullStartTime(rowData);\r\nconst cellFormatRank = ({ rowData, columnData }: TableCellProps) =>\r\n  !rowData || rowData.loading || !columnData.activePlayerId ? (\r\n    \"\"\r\n  ) : (\r\n    <span\r\n      className=\"font-weight-bold\"\r\n      style={{ color: GameRecord.getPlayerRankColor(rowData, columnData.activePlayerId) }}\r\n    >\r\n      {GameRecord.getPlayerRankLabel(rowData, columnData.activePlayerId).slice(0, 1)}\r\n    </span>\r\n  );\r\nconst cellFormatGameMode = ({ cellData }: TableCellProps) => GameMode[cellData];\r\n\r\nexport default function GameRecordTable({ showStartEnd = true, showFullTime = false } = {}) {\r\n  const data = useDataAdapter();\r\n  const [model] = useModel();\r\n  const scrollerProps = useScrollerProps();\r\n  const { isScrolling, onChildScroll, scrollTop, height, registerChild } = scrollerProps;\r\n  const rowGetter = useCallback(({ index }: Index) => data.getItem(index), [data]);\r\n  const getRowClassName = useCallback(\r\n    ({ index }: Index) => (index >= 0 ? clsx({ loading: !data.isItemLoaded(index), even: (index & 1) === 0 }) : \"\"),\r\n    [data]\r\n  );\r\n  const noRowsRenderer = useCallback(() => (data.getUnfilteredCount() ? null : <Loading />), [data]);\r\n  const activePlayerId = model.type === \"player\" ? model.playerId : undefined;\r\n  const cellRenderPlayer = useCallback(\r\n    ({ rowData }: TableCellProps) =>\r\n      rowData && rowData.players ? <Players game={rowData} activePlayerId={activePlayerId} /> : null,\r\n    [activePlayerId]\r\n  );\r\n  const unfilteredCount = data.getUnfilteredCount();\r\n  const shouldPreload = !!unfilteredCount && !(\"loading\" in data.getItem(0));\r\n  useEffect(() => {\r\n    triggerRelayout();\r\n  }, [!!unfilteredCount]);\r\n  useEffect(() => {\r\n    if (shouldPreload) {\r\n      Loadable.preloadAll();\r\n    }\r\n  }, [shouldPreload]);\r\n  return (\r\n    <div ref={registerChild as any}>\r\n      <AutoSizer disableHeight>\r\n        {({ width }) => (\r\n          <Table\r\n            autoHeight\r\n            className={activePlayerId ? \"with-active-player\" : \"\"}\r\n            rowCount={data.getCount()}\r\n            rowGetter={rowGetter}\r\n            rowHeight={window.matchMedia(\"(min-width: 768px)\").matches ? 70 : 140}\r\n            headerHeight={50}\r\n            width={width}\r\n            height={height}\r\n            isScrolling={isScrolling}\r\n            onScroll={onChildScroll}\r\n            scrollTop={scrollTop}\r\n            rowClassName={getRowClassName}\r\n            noRowsRenderer={noRowsRenderer}\r\n          >\r\n            <Column dataKey=\"modeId\" label=\"等级\" cellRenderer={cellFormatGameMode} width={40} />\r\n            {activePlayerId ? (\r\n              <Column\r\n                dataKey=\"modeId\"\r\n                label=\"顺位\"\r\n                columnData={{ activePlayerId }}\r\n                cellRenderer={cellFormatRank}\r\n                width={40}\r\n              />\r\n            ) : null}\r\n            <Column dataKey=\"players\" label=\"玩家\" cellRenderer={cellRenderPlayer} width={120} flexGrow={1} />\r\n            {showStartEnd\r\n              ? [\r\n                  <Column\r\n                    key=\"startTime\"\r\n                    dataKey=\"startTime\"\r\n                    label=\"开始\"\r\n                    cellRenderer={cellFormatTime}\r\n                    width={50}\r\n                    className=\"text-right\"\r\n                    headerClassName=\"text-right\"\r\n                  />,\r\n                  <Column\r\n                    key=\"endTime\"\r\n                    dataKey=\"endTime\"\r\n                    label=\"结束\"\r\n                    cellRenderer={cellFormatTime}\r\n                    width={50}\r\n                    headerClassName=\"text-right\"\r\n                    className=\"text-right\"\r\n                  />\r\n                ]\r\n              : null}\r\n            {showFullTime ? (\r\n              <Column\r\n                dataKey=\"startTime\"\r\n                label=\"时间\"\r\n                cellRenderer={cellFormatFullTime}\r\n                width={140}\r\n                className=\"text-right\"\r\n                headerClassName=\"text-right\"\r\n              />\r\n            ) : null}\r\n          </Table>\r\n        )}\r\n      </AutoSizer>\r\n    </div>\r\n  );\r\n}\r\n"],"sourceRoot":""}