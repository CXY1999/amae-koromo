{"version":3,"sources":["components/modeModel/model.tsx","components/routing/index.tsx","components/modeModel/modelModeSelector.tsx","components/modeModel/index.tsx","components/ranking/deltaRanking.tsx","components/ranking/careerRanking.tsx","components/ranking/index.tsx"],"names":["DEFAULT_MODEL","selectedMode","ModelContext","React","createContext","useModel","useContext","ModelModeProvider","children","useReducer","oldModel","newProps","model","updateModel","value","useMemo","Provider","RouteDef","Error","ViewRoutes","Context","NavButtons","className","replace","keepState","t","useTranslation","routes","urlBase","useRouteMatch","url","map","route","key","path","to","loc","pathname","state","undefined","exact","activeClassName","title","ViewSwitch","defaultRenderDirectly","mutateTitle","match","useLocation","push","SimpleRoutedSubViews","props","x","slice","ModelModeSelector","setModeId","useCallback","modeId","Conf","availableModes","length","mode","onChange","RankingTable","rows","id","generatePlayerPathById","LevelWithDelta","getTag","level","nickname","delta","formatter","formatPercent","showNumGames","valueLabel","index","count","rank_key","CareerRankingColumn","type","data","useAsyncFactory","getCareerRanking","CareerRanking","stateName","i","Fragment","ROUTES","data1w","getDeltaRanking","RankingTimeSpan","OneWeek","data4w","FourWeeks","bottom","top","CareerRankingType","Rank1","Rank4","Rank12","StableLevel","PlayerMetadata","formatStableLevel2","AvgRank","formatFixed3","NumGames","formatIdentity","Win","Lose","被炸率","里宝率","一发率","被炸率Rev","里宝率Rev","一发率Rev","Routes"],"mappings":"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","file":"static/js/6.1ab7538e.chunk.js","sourcesContent":["import React, { useReducer, useContext, ReactChild } from \"react\";\nimport { useMemo } from \"react\";\n\nexport interface Model {\n  selectedMode: string;\n}\n\ntype ModelUpdate = Partial<Model>;\ntype DispatchModelUpdate = (props: ModelUpdate) => void;\n\nconst DEFAULT_MODEL: Model = { selectedMode: \"\" };\nconst ModelContext = React.createContext<[Readonly<Model>, DispatchModelUpdate]>([{ ...DEFAULT_MODEL }, () => {}]);\nexport const useModel = () => useContext(ModelContext);\n\nexport function ModelModeProvider({ children }: { children: ReactChild | ReactChild[] }) {\n  const [model, updateModel] = useReducer(\n    (oldModel: Model, newProps: ModelUpdate): Model => ({\n      ...oldModel,\n      ...newProps\n    }),\n    null,\n    (): Model => ({\n      ...DEFAULT_MODEL\n    })\n  );\n  const value: [Model, DispatchModelUpdate] = useMemo(() => [model, updateModel], [model, updateModel]);\n  return <ModelContext.Provider value={value}>{children}</ModelContext.Provider>;\n}\n","import React from \"react\";\nimport { useContext } from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport { useRouteMatch, Switch, Route, Redirect, useLocation } from \"react-router\";\nimport { Helmet } from \"react-helmet\";\nimport { useTranslation } from \"react-i18next\";\n\ntype RouteDefProps = { path: string; exact?: boolean; title: string; children: React.ReactChild | React.ReactChildren };\nexport const RouteDef: React.FunctionComponent<RouteDefProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\ntype RoutesProps = { children: React.FunctionComponentElement<RouteDefProps>[] };\nexport const ViewRoutes: React.FunctionComponent<RoutesProps> = () => {\n  throw new Error(\"Not intended for rendering\");\n};\n\nconst Context = React.createContext<RouteDefProps[]>([]);\n\nexport function NavButtons({ className = \"\", replace = false, keepState = false }) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <nav className={`nav nav-pills mb-3 ${className}`}>\n      {routes.map(route => (\n        <NavLink\n          key={route.path}\n          to={loc => ({\n            pathname: `${urlBase}/${route.path}`,\n            state: keepState ? loc.state : undefined\n          })}\n          replace={replace}\n          exact={!!route.exact}\n          className=\"nav-link\"\n          activeClassName=\"active\"\n        >\n          {t(route.title)}\n        </NavLink>\n      ))}\n    </nav>\n  );\n}\n\nexport function ViewSwitch({\n  defaultRenderDirectly = false,\n  mutateTitle = true,\n  children\n}: {\n  defaultRenderDirectly?: boolean;\n  mutateTitle?: boolean;\n  children?: React.ReactChild | React.ReactChildren;\n}) {\n  const { t } = useTranslation(\"navButtons\");\n  const routes = useContext(Context);\n  const match = useRouteMatch() || { url: \"\" };\n  const loc = useLocation();\n  const urlBase = match.url.replace(/\\/+$/, \"\");\n  return (\n    <Switch>\n      {routes.map(route => (\n        <Route exact={route.exact} key={route.path} path={`${urlBase}/${route.path}`}>\n          {mutateTitle && (\n            <Helmet>\n              <title>{t(route.title)}</title>\n            </Helmet>\n          )}\n          {route.children}\n        </Route>\n      ))}\n      <Route>\n        {defaultRenderDirectly ? (\n          routes[0].children\n        ) : (\n          <Redirect to={{ ...loc, pathname: `${urlBase}/${routes[0].path}` }} push={false} />\n        )}\n      </Route>\n      {children}\n    </Switch>\n  );\n}\n\nexport function SimpleRoutedSubViews({\n  children\n}: {\n  children: [React.FunctionComponentElement<RoutesProps>, ...(React.ReactChild | React.ReactChildren)[]];\n}) {\n  return <Context.Provider value={children[0].props.children.map(x => x.props)}>{children.slice(1)}</Context.Provider>;\n}\n","import React from \"react\";\nimport { useCallback } from \"react\";\nimport { ModeSelector } from \"../gameRecords/modeSelector\";\nimport { useModel } from \"./model\";\nimport Conf from \"../../utils/conf\";\n\nexport default function ModelModeSelector() {\n  const [model, updateModel] = useModel();\n  const setModeId = useCallback(modeId => updateModel({ selectedMode: modeId }), [updateModel]);\n  if (Conf.availableModes.length < 2) {\n    return null;\n  }\n  return (\n    <div className=\"row mb-3\">\n      <div className=\"col\">\n        <ModeSelector mode={model.selectedMode} onChange={setModeId} />\n      </div>\n    </div>\n  );\n}\n","export { ModelModeProvider, useModel } from \"./model\";\nexport { default as ModelModeSelector } from \"./modelModeSelector\";\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { DeltaRankingItem, RankingTimeSpan } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getDeltaRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { useModel } from \"../modeModel\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction RankingTable({ rows = [] as DeltaRankingItem[] }) {\n  return (\n    <table className=\"table table-striped\">\n      <tbody>\n        {rows.map(x => (\n          <tr key={x.id}>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            <td className=\"text-right\">{x.delta}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport default function DeltaRanking() {\n  const { t } = useTranslation();\n  const data1w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.OneWeek),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.OneWeek)\"\n  );\n  const data4w = useAsyncFactory(\n    () => getDeltaRanking(RankingTimeSpan.FourWeeks),\n    [],\n    \"getDeltaRanking(RankingTimeSpan.FourWeeks)\"\n  );\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  if (!data1w || !data4w) {\n    return <Loading />;\n  }\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">{t(\"苦主榜\")}</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"一周\")}</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].bottom} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"四周\")}</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].bottom} />\n            </div>\n          </div>\n        </div>\n        <div className=\"col-lg-6\">\n          <h3 className=\"text-center\">{t(\"汪汪榜\")}</h3>\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"一周\")}</h4>\n              <RankingTable rows={data1w[modeId || \"0\"].top} />\n            </div>\n            <div className=\"col-md-6\">\n              <h4 className=\"text-center\">{t(\"四周\")}</h4>\n              <RankingTable rows={data4w[modeId || \"0\"].top} />\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { CareerRankingItem, CareerRankingType } from \"../../data/types/ranking\";\nimport { useAsyncFactory } from \"../../utils\";\nimport { getCareerRanking } from \"../../data/source/misc\";\nimport Loading from \"../misc/loading\";\nimport { generatePlayerPathById } from \"../gameRecords/routes\";\nimport { LevelWithDelta } from \"../../data/types\";\nimport { formatPercent } from \"../../utils/index\";\nimport { Alert } from \"../misc/alert\";\nimport { useModel } from \"../modeModel\";\nimport { useTranslation } from \"react-i18next\";\n\nfunction RankingTable({\n  rows = [] as CareerRankingItem[],\n  formatter = formatPercent as (x: number) => string,\n  showNumGames = true,\n  valueLabel = \"\"\n}) {\n  const { t } = useTranslation();\n  if (!rows || !rows.length) {\n    return <Loading />;\n  }\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th className=\"text-right\">{t(\"排名\")}</th>\n          <th>{t(\"玩家\")}</th>\n          {showNumGames && <th className=\"text-right\">{t(\"对局数\")}</th>}\n          <th className=\"text-right\">{valueLabel}</th>\n        </tr>\n      </thead>\n      <tbody>\n        {rows.map((x, index) => (\n          <tr key={x.id}>\n            <td className=\"text-right\">{index + 1}</td>\n            <td>\n              <Link to={generatePlayerPathById(x.id)}>\n                [{LevelWithDelta.getTag(x.level)}] {x.nickname}\n              </Link>\n            </td>\n            {showNumGames && <td className=\"text-right\">{x.count}</td>}\n            <td className=\"text-right\">{formatter(x.rank_key)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n}\n\nexport function CareerRankingColumn({\n  type,\n  title,\n  formatter = formatPercent,\n  showNumGames = true,\n  valueLabel = \"\"\n}: {\n  type: CareerRankingType;\n  title: string;\n  formatter?: (x: number) => string;\n  showNumGames?: boolean;\n  valueLabel?: string;\n}) {\n  const { t } = useTranslation();\n  const [model] = useModel();\n  const modeId = model.selectedMode;\n  const data = useAsyncFactory(() => getCareerRanking(type, modeId), [type, modeId], \"getCareerRanking\");\n  return (\n    <div className=\"col-lg\">\n      <h3 className=\"text-center mb-2\">{t(title)}</h3>\n      <RankingTable rows={data} formatter={formatter} valueLabel={t(valueLabel || title)} showNumGames={showNumGames} />;\n    </div>\n  );\n}\nexport function CareerRanking({\n  children\n}: {\n  children: React.ReactElement<ReturnType<typeof CareerRankingColumn>>[];\n}) {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Alert stateName=\"careerRankingNotice\">\n        <h4 className=\"mb-2\">{t(\"提示\")}</h4>\n        {t(\"本榜只包含有至少 300 场对局记录的玩家\")}\n      </Alert>\n      <div className=\"row\">\n        {children.map((x, i) => (\n          <React.Fragment key={i}>{x}</React.Fragment>\n        ))}\n      </div>\n    </>\n  );\n}\n","import React from \"react\";\n\nimport { Alert } from \"../misc/alert\";\nimport DeltaRanking from \"./deltaRanking\";\nimport { CareerRanking, CareerRankingColumn } from \"./careerRanking\";\nimport { ModelModeProvider, ModelModeSelector } from \"../modeModel\";\nimport { CareerRankingType } from \"../../data/types\";\nimport { PlayerMetadata } from \"../../data/types/metadata\";\nimport { formatFixed3, formatIdentity } from \"../../utils/index\";\nimport { ViewRoutes, SimpleRoutedSubViews, NavButtons, RouteDef } from \"../routing\";\nimport { ViewSwitch } from \"../routing/index\";\nimport { useTranslation } from \"react-i18next\";\n\nconst ROUTES = (\n  <ViewRoutes>\n    <RouteDef path=\"delta\" title=\"苦主及汪汪\">\n      <DeltaRanking />\n    </RouteDef>\n    <RouteDef path=\"career1\" title=\"一位率/四位率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank1} title=\"一位率\" />\n        <CareerRankingColumn type={CareerRankingType.Rank4} title=\"四位率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career2\" title=\"连对率/安定段位\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Rank12} title=\"连对率\" />\n        <CareerRankingColumn\n          type={CareerRankingType.StableLevel}\n          title=\"安定段位\"\n          formatter={PlayerMetadata.formatStableLevel2}\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"career3\" title=\"平均顺位/对局数\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.AvgRank} title=\"平均顺位\" formatter={formatFixed3} />\n        <CareerRankingColumn\n          type={CareerRankingType.NumGames}\n          title=\"对局数\"\n          formatter={formatIdentity}\n          showNumGames={false}\n        />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"winlose\" title=\"和率/铳率\">\n      <CareerRanking>\n        <CareerRankingColumn type={CareerRankingType.Win} title=\"和牌率\" />\n        <CareerRankingColumn type={CareerRankingType.Lose} title=\"放铳率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"lucky\" title=\"欧洲人\">\n      <CareerRanking>\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.被炸率} title=\"被炸率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.里宝率} title=\"里宝率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.一发率} title=\"一发率\" />\n      </CareerRanking>\n    </RouteDef>\n    <RouteDef path=\"unlucky\" title=\"非洲人\">\n      <CareerRanking>\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.被炸率Rev} title=\"被炸率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.里宝率Rev} title=\"里宝率\" />\n        <CareerRankingColumn showNumGames={false} type={CareerRankingType.一发率Rev} title=\"一发率\" />\n      </CareerRanking>\n    </RouteDef>\n  </ViewRoutes>\n);\n\nexport default function Routes() {\n  const { t } = useTranslation();\n  return (\n    <SimpleRoutedSubViews>\n      {ROUTES}\n      <ModelModeProvider>\n        <Alert stateName=\"rankingNotice\">\n          <h4 className=\"mb-2\">{t(\"提示\")}</h4>\n          {t(\"排行榜非实时更新，可能会有数小时的延迟\")}\n        </Alert>\n        <NavButtons />\n        <ModelModeSelector />\n        <ViewSwitch />\n      </ModelModeProvider>\n    </SimpleRoutedSubViews>\n  );\n}\n"],"sourceRoot":""}